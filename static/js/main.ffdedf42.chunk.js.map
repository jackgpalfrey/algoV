{"version":3,"sources":["algoithms/sorting/bubbleSort.ts","components/SortingVisualiser/index.jsx","pages/SortingVisualiserPage.tsx","App.tsx","index.tsx"],"names":["bubbleSort","array","sortedArray","animations","i","length","j","push","command","id","color","tmp","id1","id2","sort","console","log","SortingVisualiser","props","useState","setArray","animationSpeed","setAnimationSpeed","resetArray","newArray","bars","item","value","Math","round","random","a","prevState","slice","forEach","tmp1","tmp2","animator","speed","idx","intervalID","setInterval","clearInterval","animate","useEffect","effect","barsDivs","map","className","style","height","backgroundColor","onClick","numbers","getNumbersFromArrayState","onChange","e","val","parseInt","target","SortingVisualiserPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffdedf42.chunk.js","sourcesContent":["\r\nconst accent = '#'\r\n\r\nfunction sort(array: number[]): [number[],object[]]{\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        \r\n        for (let j = 0; j < sortedArray.length - 1 - i; j++){\r\n            animations.push({command: 'setColor',id: [j,j+1],color: '#fc0388'})\r\n            if (sortedArray[j] > sortedArray[j+1]){\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j+1]\r\n                sortedArray[j+1] = tmp \r\n                animations.push({command: 'swap',id1: j, id2: j+1})\r\n            }\r\n            animations.push({command: 'setColor',id: [j,j+1],color: '#035efc'})\r\n        }\r\n        animations.push({command: 'setColor',id: [sortedArray.length - 1 - i],color: '#15ba09'})\r\n    }\r\n\r\n    animations.push({command: 'setColor',id: [0],color: '#15ba09'})\r\n\r\n\r\n    return [sortedArray, animations]\r\n}\r\n\r\nfunction bubbleSort(array: number[]): object[]{\r\n    let [sortedArray, animations] = sort(array)\r\n    console.log(sortedArray)\r\n    return animations\r\n}\r\n\r\n\r\nexport default bubbleSort","import React, { useEffect, useState } from 'react'\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport './style.css'\r\n\r\nfunction SortingVisualiser(props){\r\n    const [array, setArray] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(500)\r\n\r\n    useEffect(effect => {\r\n        resetArray()\r\n    }, [])\r\n\r\n    function resetArray(){\r\n        let newArray = []\r\n        for (let i = 0; i < props.bars; i++){\r\n            let randomVal = Math.round(Math.random() * 60) + 5\r\n            //let randomVal = i + 10\r\n            let item = {\r\n                value: randomVal,\r\n                color: '#035efc'\r\n            }\r\n            newArray.push(item)\r\n        }\r\n        setArray(newArray)\r\n    }\r\n\r\n    async function animate(command){\r\n\r\n\r\n\r\n        setArray(prevState => {\r\n            try {\r\n                let newArray = prevState.slice()\r\n                switch(command.command){\r\n                    case 'setColor':\r\n                        if (typeof command.id === 'number' && command.id > newArray.length -1 ) return newArray[command.id].color = command.color\r\n                        command.id.forEach(value => {\r\n                            newArray[value].color = command.color\r\n                        })\r\n                        \r\n                        break;\r\n                    case 'swap':\r\n                        if (command.id1 > newArray.length -1) throw 'Out of bounds'\r\n                        if (command.id2 > newArray.length -1) throw 'Out of bounds'\r\n                        const tmp1 = {...newArray[command.id1]}\r\n                        const tmp2 = {...newArray[command.id2]}\r\n                        newArray[command.id1] = tmp2\r\n                        newArray[command.id2] = tmp1\r\n                        break;\r\n                }\r\n                \r\n                return newArray\r\n            \r\n            } catch {\r\n                return prevState\r\n            }  \r\n        });\r\n        \r\n\r\n    }\r\n\r\n    function animator(animations,speed){\r\n        let idx = 0\r\n\r\n        let intervalID = setInterval( () => {\r\n            if (idx > animations.length - 1) {\r\n                clearInterval(intervalID)\r\n                return \r\n            }\r\n            animate(animations[idx])\r\n            idx++\r\n        }, speed)\r\n    }\r\n\r\n    function getNumbersFromArrayState(){\r\n        let numbers = []\r\n        for (let i = 0; i < array.length; i++){\r\n            numbers.push(array[i].value)\r\n        }\r\n\r\n        return numbers\r\n    }\r\n    function handleColorClick(){\r\n        // console.log('click')\r\n        // let animations = []\r\n        // for (let i = 0; i < props.bars; i++){\r\n        //     animations.push({command: 'setColor',id: [i,i+1],color: '#fc0388'})\r\n        //     animations.push({command: 'swap',id1: i, id2: i+1})\r\n        //     animations.push({command: 'setColor',id: [i,i+1],color: '#035efc'})\r\n        // }\r\n\r\n        let animations = bubbleSort(getNumbersFromArrayState())\r\n\r\n        animator(animations,animationSpeed)\r\n    \r\n    }\r\n\r\n    //console.log(array)\r\n    let barsDivs = array.map(item  => {\r\n        return (<div className='bar' style={{height: `${item.value * 10}px`, backgroundColor: `${item.color}`}}>{item.value}</div>)\r\n    })\r\n\r\n    \r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='bar-container'>\r\n                {barsDivs}\r\n            </div>\r\n            <nav>\r\n            <button onClick={resetArray}>Reset</button>\r\n                <button onClick={handleColorClick}>Animate</button>\r\n                <label>\r\n                    Animation Time (ms) \r\n                    <input value={animationSpeed} onChange={(e) => {\r\n                        let val = parseInt(e.target.value)\r\n                        if (!val) {\r\n                            setAnimationSpeed(0)\r\n                        } else {\r\n                            setAnimationSpeed(val)\r\n                        }\r\n                        \r\n                    }}/>\r\n                </label>\r\n                \r\n            </nav>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualiser","import React from 'react'\r\nimport SortingVisualiser from '../components/SortingVisualiser/'\r\n\r\n\r\nfunction SortingVisualiserPage(){\r\n    return (\r\n        <SortingVisualiser bars={30} animations={[]}/>\r\n    )\r\n}\r\n\r\nexport default SortingVisualiserPage","import React from 'react';\nimport './App.css';\nimport SortingVisualiserPage from './pages/SortingVisualiserPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingVisualiserPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}