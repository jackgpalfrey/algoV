{"version":3,"sources":["components/Menu/index.jsx","algoithms/sorting/bubbleSort.ts","algoithms/sorting/heapSort.ts","algoithms/sorting/insertionSort.ts","algoithms/sorting/reverseArray.ts","algoithms/sorting/selectionSort.ts","components/Console/index.jsx","components/InfoCard/index.jsx","components/SortingVisualiser/index.jsx","pages/SortingVisualiserPage.tsx","components/PathfindingVisualiser/index.jsx","pages/PathfindingVisualiserPage.jsx","pages/AlgoriComputePage.jsx","components/ChangeLog/Container.jsx","components/ChangeLog/Item.jsx","pages/HomePage.jsx","App.tsx","index.tsx"],"names":["Menu","useState","isOpen","setIsOpen","className","onMouseEnter","console","log","onClick","onMouseLeave","exact","activeClassName","to","title","bubbleSort","array","startTime","performance","now","sortedArray","animations","i","length","j","push","tmp","runTime","endAni","Math","round","unshift","sort","swap","idx1","idx2","command","id1","id2","heapify","idx","largest","left","right","id","color","heapSort","endTime","floor","k","idxs","insertionSort","posIdxs","reverseArray","slice","ceil","COLORS","selectionSort","minValIdx","Console","props","display","textColor","setTextColor","commandText","setCommandText","responseText","setResponseText","responseHandler","response","setTimeout","useEffect","terminal","placeholder","value","onChange","e","target","includes","style","onKeyDown","key","replaceAll","jsonCommand","JSON","parse","AnimateEngine","error","InfoCard","algorithmType","algorithmID","isOpenHover","setIsOpenHover","avgTimeComplexity","worstTimeComplexity","bestTimeComplexity","memoryComplexity","stable","descriptionArray","creditText","credit","data","description","split","card","onMouseOver","map","item","href","BASE","CHECKING","DONE","TEXT","SortingVisualiser","cookieData","document","cookie","replace","animationtype","urlAnimation","useLocation","search","Object","keys","algoData","setArray","animationSpeed","setAnimationSpeed","window","innerWidth","numBars","setNumBars","setRunTime","swaps","setSwaps","comparisons","setComparisons","animationActive","setAnimationActive","activeAlgorithm","setActiveAlgorithm","isTerminalOpen","setIsTerminalOpen","activeTimeouts","setActiveTimeouts","activeIntervals","setActiveIntervals","commandCode","indexArray","type","Array","isArray","toLowerCase","prevState","newArray","forEach","abs","y","undefined","tmp1","tmp2","values","colorCode","subCommands","interval","currentCommandIdx","intervalID","setInterval","clearInterval","curIntervals","commandsToRun","repeats","intervalBetweenEach","parseInt","currentIteration","intervalIdentifier","curAIntervals","commandsToExecute","waitFor","timeoutID","curTimeouts","numOfBars","Randvalues","random","newRuntime","newComparisons","newSwaps","specificLoop","activeLoops","ALLen","pop","loop","splice","indexOf","activeWaits","AWLen","clearTimeout","location","reload","animationKey","resultData","isLegacy","getNumbersFromArrayState","alert","speed","animate","animator","a","numbers","effect","barWidth","height","backgroundColor","width","margin","fontSize","createBars","disabled","min","max","name","SortingVisualiserPage","bars","PathfindingVisualiser","grid","setGrid","resetGrid","xNum","yNum","innerHeight","defaultItem","newGrid","newCol","x","boxClickHandler","pos","posX","posY","divGrid","itemx","idxx","divCol","idxy","onMouseDown","createDivGrid","indexVal","indexIdx","xVal","xPos","yVal","yPos","PathfindingVisualiserPage","AlgoriComputePage","Container","children","CHANGES_COLORS","Item","changes","ItemInfo","date","version","HomePage","isAllOpen","setIsAllOpen","isNewestFirst","setIsNewestFirst","changeLogItems","changeLogData","reverse","changeItems","dontDisplay","modifications","isNext","info","titleBgColor","titleTxtColor","infoBgColor","infoTxtColor","App","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.801069ad.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './style.css'\r\n\r\n\r\nfunction Menu(){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    \r\n    return (\r\n        <div>\r\n        <div className='hoverToOpen' onMouseEnter={() => {console.log(true)}}></div>\r\n        {isOpen ? <div className='background-layer' onClick = {() => {setIsOpen(false)}}></div> : null}\r\n        <div className={isOpen ? 'menuCard': 'menuCard closed'} onMouseEnter={() => {setIsOpen(true)}} onMouseLeave={() => {setIsOpen(false)}}>\r\n            \r\n            <br />\r\n            <br />\r\n            <button onClick={() => setIsOpen(!isOpen)} className='openMenuButton' >\r\n                {isOpen ? <i className=\"material-icons \">menu_open</i> : <i className=\"material-icons \">menu</i> }\r\n            </button>\r\n            {isOpen ? [<NavLink exact className='link' activeClassName='current' to='/'><span title='Home'><i className=\"material-icons item\">home</i></span></NavLink>,\r\n                       <NavLink className='link' activeClassName='current' to='/sort'><span title='Sorting Visualiser'><i className=\"material-icons item\">bar_chart</i></span></NavLink>,\r\n                       <NavLink className='link unavailable' activeClassName='current' to='/pathfind'><span title='Pathfinding Visualiser'><i className=\"material-icons item\">directions</i></span></NavLink>,\r\n                       <NavLink className='link unavailable' activeClassName='current' to='/compute'><span title='Algori Compute'><i className=\"material-icons item\">functions</i></span></NavLink>] \r\n                       : null}\r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","\r\n\r\n\r\n\r\nfunction sort(array: number[]): [number[],object[],number]{\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        \r\n        for (let j = 0; j < sortedArray.length - 1 - i; j++){\r\n            animations.push([\"setColor\", [j,j+1], \"$CHECKING\"])\r\n            if (sortedArray[j] > sortedArray[j+1]){\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j+1]\r\n                sortedArray[j+1] = tmp \r\n                animations.push([\"swap\",j,j+1])\r\n            }\r\n            animations.push([\"setColor\",[j,j+1],\"$BASE\"])\r\n        }\r\n        animations.push([\"setColor\",[sortedArray.length - 1 - i],\"$DONE\"])\r\n    }\r\n\r\n   \r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [0], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n    console.log(\"EXEC\")\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n\r\n}\r\n\r\nfunction bubbleSort(array: number[]): any{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return (command)\r\n}\r\n\r\n\r\nexport default bubbleSort","// FROM: https://levelup.gitconnected.com/heapsort-for-javascript-newbies-598d25477d55\r\n//TODO: Improve Animations\r\n\r\n\r\nfunction swap(array: number[], idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push({command: 'swap',id1: idx1, id2: idx2})\r\n}\r\n\r\n\r\nfunction heapify(array: number[], length: number, idx: number, animations: object[]){\r\n    let largest:number = idx\r\n    let left:number = idx * 2 + 1\r\n    let right:number = left + 1\r\n\r\n    animations.push({command: 'setColor',id: [left,right],color: '$BEING_CHECKED'})\r\n\r\n    if(left < length && array[left] > array[largest]) {\r\n        largest = left\r\n    }\r\n\r\n    if(right < length && array[right] > array[largest]){\r\n        largest = right\r\n    }\r\n\r\n    animations.push({command: 'setColor',id: [left,right],color: '$BASE'})\r\n\r\n    if(largest != idx){\r\n        swap(array, idx, largest, animations)\r\n        heapify(array, length, largest, animations)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sort(array: number[], animations: object[]){\r\n    let length = array.length\r\n    let idx = Math.floor(length / 2 - 1)\r\n    let k = length - 1;\r\n\r\n    while (idx >= 0) {\r\n        heapify(array, length, idx, animations)\r\n        idx--\r\n    }\r\n\r\n    while(k >= 0){\r\n        swap(array, 0, k, animations)\r\n        heapify(array, k, 0, animations)\r\n        //animations.push({command: 'setColor',id: [k],color: '$DONE'})\r\n        k--\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n\r\n\r\nfunction heapSort(array: number[]){\r\n    let startTime = performance.now()\r\n    var animations: object[] = [];\r\n    let sortedArray = sort(array, animations)\r\n\r\n    let endTime = performance.now()\r\n\r\n    let idxs:number[] = []\r\n    for (let i = 0; i < array.length; i++){\r\n        idxs.push(i)\r\n    }\r\n    animations.push({command: 'setColor',id: idxs, color: '$DONE'})\r\n\r\n\r\n    let runTime = endTime - startTime\r\n    return [animations, runTime]\r\n}\r\n\r\nexport default heapSort","\r\n\r\n\r\n\r\nfunction sort(array: number[]): [number[],object[],number]{\r\n    let startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n\r\n    for (let i = 0; i < sortedArray.length; i++){\r\n        for (let j = i; j > 0; j--){\r\n            animations.push({command: 'setColor',id: [j,j-1],color: '$BEING_CHECKED'})\r\n            if (sortedArray[j] < sortedArray[j-1]) {\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j-1]\r\n                sortedArray[j-1] = tmp\r\n                animations.push({command: 'swap',id1: j, id2: j-1})\r\n            } else {\r\n                animations.push({command: 'setColor',id: [j,j-1],color: '$BASE'})\r\n                break;\r\n            }\r\n            animations.push({command: 'setColor',id: [j,j-1],color: '$BASE'})\r\n        }\r\n    }\r\n\r\n    let posIdxs = []\r\n    for (let i = 0; i < sortedArray.length; i++){\r\n        posIdxs.push(i)\r\n        //animations.push({command: 'setColor',id: [i],color: '$DONE'})\r\n    }\r\n    animations.push({command: 'setColor',id: posIdxs,color: '$DONE'})\r\n    \r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n    console.log(sortedArray)\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction insertionSort(array: number[]): [object[],number]{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n    console.log(sortedArray)\r\n    return [animations,runTime]\r\n}\r\n\r\n\r\nexport default insertionSort","\r\nfunction sort(array: any, animations: any): any {\r\n    let sortedArray = array.slice()\r\n\r\n    for (let i = 0; i < Math.floor(sortedArray.length / 2); i++){\r\n        animations.push({command: 'setColor',id: [i,(sortedArray.length-1-i)],color: '$BEING_CHECKED'})\r\n        let tmp = sortedArray[i]\r\n        sortedArray[i] = sortedArray[sortedArray.length-1-i]\r\n        sortedArray[sortedArray.length-1-i] = tmp\r\n        animations.push({command: 'swap',id1: i, id2: (sortedArray.length-1-i)})\r\n        animations.push({command: 'setColor',id: [i,(sortedArray.length-1-i)],color: '$DONE'})\r\n    }\r\n\r\n    animations.push({command: 'setColor',id: [(Math.ceil(sortedArray.length / 2)) - 1],color: '$DONE'})\r\n\r\n    return [sortedArray, animations]\r\n\r\n\r\n}\r\n\r\nfunction reverseArray(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n\r\n    [sortedArray, animations] = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default reverseArray","const COLORS = {\r\n    CURRENT_MIN: '#3e09ba',\r\n}\r\n\r\n\r\nfunction sort(array: number[]): [number[],object[],number]{\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        let minValIdx = i\r\n        for (let j = i + 1; j < sortedArray.length; j++){\r\n            animations.push({command: 'setColor',id: [j],color: '$BEING_CHECKED'})\r\n            if (array[j] < array[minValIdx]){\r\n                animations.push({command: 'setColor',id: [minValIdx],color: '$BASE'})\r\n                minValIdx = j\r\n                animations.push({command: 'setColor',id: [j],color: COLORS.CURRENT_MIN})    \r\n            } else {\r\n                animations.push({command: 'setColor',id: [j,j+1],color: '$BASE'})\r\n            }  \r\n\r\n                      \r\n        }\r\n\r\n        let tmp = array[i]\r\n        array[i] = array[minValIdx]\r\n        array[minValIdx] = tmp\r\n        animations.push({command: 'swap',id1: i, id2: minValIdx})\r\n        animations.push({command: 'setColor',id: [i],color: '$DONE'})\r\n\r\n    }\r\n\r\n    animations.push({command: 'setColor',id: [sortedArray.length -1],color: '$DONE'})\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction selectionSort(array: number[]): [object[],number]{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n    console.log(sortedArray)\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default selectionSort;","import React, { useEffect, useState } from 'react'\r\nimport './style.css'\r\n\r\nfunction Console(props){\r\n    const [isOpen, setIsOpen] = useState(props.display)\r\n    const [textColor, setTextColor] = useState('white')\r\n    const [commandText, setCommandText] = useState('')\r\n    const [responseText, setResponseText] = useState('')\r\n\r\n    useEffect(() => {\r\n        setIsOpen(props.display)\r\n    }, [props.display])\r\n\r\n    function responseHandler(response) {\r\n        response[0] === 'ERROR' ? setTextColor('red') : setTextColor('green')\r\n        setResponseText(`${response[1]}`)\r\n        setTimeout(() => {\r\n            setResponseText('')\r\n        }, 1000)\r\n        console.log(response[1])\r\n    }\r\n\r\n    function handleConsole(e){\r\n        if (e.key != 'Enter') return\r\n        let command = commandText.replaceAll(\"'\",'\"')\r\n        console.log(`Command: ${command}`)\r\n        try {\r\n            let jsonCommand = JSON.parse(command)\r\n            let response = props.AnimateEngine(jsonCommand)\r\n            responseHandler(response)\r\n        } catch (error) {\r\n            console.log(error)\r\n            responseHandler([\"ERROR\", \"Invalid Syntax\"])\r\n        }\r\n    }\r\n\r\n    function consoleChangeHandler(e){\r\n        if (e.target.value.includes('cls')) {\r\n            setCommandText('')\r\n        } else {\r\n            setCommandText(e.target.value)\r\n        }\r\n        \r\n        setTextColor('white')\r\n    }\r\n\r\n    let terminal = (\r\n        <div className='consoleBox'>\r\n            <input placeholder='Console' value={commandText} onChange={consoleChangeHandler} style={{color: textColor}}className='console' onKeyDown={handleConsole}></input>\r\n            <p style={{color: textColor}}>{responseText}</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {isOpen ? terminal : null}\r\n        </div>\r\n        \r\n    )\r\n        \r\n}\r\n\r\nexport default Console","import React, { useState } from 'react'\r\nimport './style.css'\r\nimport data from '../../data/algorithmInfo.json'\r\n\r\n\r\nfunction InfoCard({algorithmType, algorithmID}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isOpenHover, setIsOpenHover] = useState(false)\r\n    \r\n\r\n    let title = 'No Information Available'\r\n    let avgTimeComplexity = ''\r\n    let worstTimeComplexity = ''\r\n    let bestTimeComplexity  = ''\r\n    let memoryComplexity = ''\r\n    let stable = ''\r\n    let descriptionArray = []\r\n    let creditText = ''\r\n    let credit = ''\r\n\r\n    if (data[algorithmType][algorithmID]){\r\n        title = data[algorithmType][algorithmID].title || 'Unknown'\r\n        avgTimeComplexity = data[algorithmType][algorithmID].avgTimeComplexity || 'Unknown'\r\n        worstTimeComplexity = data[algorithmType][algorithmID].worstTimeComplexity || 'Unknown'\r\n        bestTimeComplexity = data[algorithmType][algorithmID].bestTimeComplexity || 'Unknown'\r\n        memoryComplexity = data[algorithmType][algorithmID].memoryComplexity || 'Unknown'\r\n        stable = data[algorithmType][algorithmID].stable || 'Unknown'\r\n        descriptionArray = data[algorithmType][algorithmID].description.split('\\n')\r\n        creditText = data[algorithmType][algorithmID].creditText || 'Description From'\r\n        credit = data[algorithmType][algorithmID].credit\r\n    }\r\n    \r\n\r\n    let card = (<div className='card' onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}>\r\n                    <p className='title'>{title}</p>\r\n                    <hr></hr>\r\n                    <p className='meta'>{`Worst Case Time Complexity: ${worstTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Average Time Complexity: ${avgTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Best Case Time Complexity: ${bestTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Memory Complexity: ${memoryComplexity}`}</p>\r\n                    <p className='meta'>Stable: {stable} <i className={'material-icons help'} title='Whether the position of equal values stay the same relative to each other'>help</i></p>\r\n                    <hr></hr>\r\n                    {descriptionArray.map((item,idx) => <p className='description'>{item}</p>)}\r\n                    {credit ? <a className='credit' href={credit} >{`${creditText}: ${credit}`}</a> : null}     \r\n                </div>)\r\n    return (\r\n            <div className='card-container' onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)} >\r\n                {isOpen || isOpenHover ? card : null}\r\n                <button onClick={() => setIsOpen(!isOpen)} className='openCardButton' >\r\n                {isOpen ? <i className=\"material-icons \">close</i> : <i className=\"material-icons \">info</i> }\r\n                </button>  \r\n            </div>\r\n            )\r\n\r\n    }\r\n\r\nexport default InfoCard","import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport Console from '../Console'\r\nimport InfoCard from '../InfoCard'\r\nimport algoData from '../../data/algorithmInfo.json'\r\nimport './style.css'\r\n\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc', \r\n    CHECKING: 'red',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\nfunction SortingVisualiser(props){\r\n\r\n    //#region State Creation \r\n    const cookieData = document.cookie.replace(';','').replace(' ','').split(',')\r\n    let animationtype = cookieData[0]\r\n    let urlAnimation = useLocation().search.replace('?','')\r\n    if (urlAnimation && Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = urlAnimation\r\n    if(!Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = 'bubbleSort'\r\n    const [array, setArray] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [numBars, setNumBars] = useState(Math.round((window.innerWidth / 12) / 2))\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [swaps, setSwaps] = useState(0)\r\n    const [comparisons, setComparisons] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(animationtype || 'bubbleSort')\r\n    const [isTerminalOpen, setIsTerminalOpen] = useState(false)\r\n    const [activeTimeouts, setActiveTimeouts] = useState([])\r\n    const [activeIntervals, setActiveIntervals] = useState([])\r\n\r\n    //#endregion\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        AnimateEngine([\"resetArray\",numBars])\r\n    }, [])\r\n\r\n\r\n    function AnimateEngine(command){\r\n        try {\r\n            let commandCode = command[0]\r\n            \r\n            let response = [\"PENDING\", \"In progress\"]\r\n            switch(commandCode){\r\n                case 'setState':\r\n                        let indexArray = command[1]\r\n                        let type = command[2]\r\n                        let data = command[3]\r\n\r\n                        if (!indexArray || !Array.isArray(indexArray)) return [\"ERROR\", \"Invalid Indexs\"]\r\n                        if (!type || typeof type !== 'string') return [\"ERROR\", \"Invalid Type\"]\r\n                        \r\n                        type = type.toLowerCase()\r\n\r\n                        if (type === 'color'){\r\n                            if(typeof data !== 'string') return [\"ERROR\", \"Invalid Data\"]\r\n                            if (data.includes('$')) data = COLORS[data.replace('$','')]\r\n                        } else if (type === 'value'){\r\n                            if(typeof data !== 'number') return [\"ERROR\", \"Invalid Data\"]\r\n                        } else {\r\n                            return [\"ERROR\", \"Invalid Type\"]\r\n                        }\r\n\r\n\r\n                        setArray(prevState => {\r\n                            let newArray = prevState.slice()\r\n                            \r\n                            indexArray.forEach(idx => {\r\n                                if (typeof idx == \"number\" && idx >= 0 && idx < newArray.length){\r\n                                    newArray[idx][type] = data\r\n\r\n                                } if (typeof idx == \"number\" && idx < 0 && Math.abs(idx) <= newArray.length){\r\n                                    newArray[newArray.length - Math.abs(idx)][type] = data\r\n                                \r\n                                } else if (idx === '$ALL'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$LHALF'){\r\n                                    for (let y = 0; y < Math.ceil(newArray.length / 2); y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$RHALF'){\r\n                                    for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$ODD'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 0) newArray[y][type] = data\r\n                                        \r\n                                    }\r\n    \r\n                                } else if (idx === '$EVEN'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 1) newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$MID'){\r\n                                    newArray[Math.floor((newArray.length - 1) / 2)][type] = data\r\n                                    newArray[Math.ceil((newArray.length - 1) / 2)][type] = data\r\n    \r\n                                }\r\n                                \r\n                                \r\n                            });\r\n                            \r\n                            return newArray\r\n                        });\r\n                            \r\n\r\n                    break;\r\n                \r\n                case 'sc':\r\n                case 'setColor': // Sets color of bars. Syntax: [\"setColor\",[array of ids or $ALL, $LHALF, $RHALF], \"valid css color OR valid inbuilt variable prefixed with $\"]\r\n                    let idxes = command[1]\r\n                    let color = command[2]\r\n                    \r\n                    AnimateEngine([\"setState\", idxes, 'color', color])\r\n                    break;\r\n                \r\n                case 'swap':\r\n                    let id1 = command[1]\r\n                    let id2 = command[2]\r\n                    if (id1 == undefined || typeof id1 !== 'number') return [\"ERROR\", \"Invalid id1\"]\r\n                    if (id2 == undefined || typeof id2 !== 'number') return [\"ERROR\", \"Invalid id2\"]\r\n                    setArray(prevState => {\r\n                        id1 = command[1]\r\n                        id2 = command[2]\r\n                        let newArray = prevState.slice()\r\n\r\n                        if (id1 < 0) id1 = newArray.length - Math.abs(id1)\r\n                        if (id2 < 0) id2 = newArray.length - Math.abs(id2)\r\n                        \r\n                        if (id1 >= 0 && id1 < newArray.length && id2 >= 0 && id2 < newArray.length){\r\n                            const tmp1 = {...newArray[id1]}\r\n                            const tmp2 = {...newArray[id2]}\r\n                            newArray[id1] = tmp2\r\n                            newArray[id2] = tmp1\r\n                        }\r\n                        \r\n        \r\n                        return newArray\r\n                    })\r\n        \r\n                    break;\r\n                \r\n                case 'setValue':\r\n                    let idxs = command[1]\r\n                    let value = command[2]\r\n\r\n                    AnimateEngine([\"setState\", idxs, 'value', value])\r\n                    break;\r\n                \r\n                case 'setArray':\r\n                    let values = command[1]\r\n                    let colorCode = command[2]\r\n\r\n                    if (!values || !Array.isArray(values)) return [\"ERROR\", \"Invalid Values\"]\r\n                    if (!colorCode || typeof colorCode !== 'string') return [\"ERROR\", \"Invalid Color\"]\r\n                    setArray(prevState => {\r\n                        let newArray = []\r\n                        let color = command[2]\r\n                        if (color.includes('$')) color = COLORS[color.replace('$','')]\r\n        \r\n                        values.forEach(value => {\r\n                        if (typeof value == \"number\"){\r\n                                newArray.push({value: value, color: color})\r\n                            }\r\n                            \r\n                        });\r\n                        setNumBars(newArray.length)\r\n                        return newArray\r\n                    })\r\n                    break;\r\n                        \r\n                case 'do':\r\n                    let subCommands = command[1]\r\n                    let interval = command[2]\r\n\r\n                    if (!subCommands || !Array.isArray(subCommands)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!interval && interval != 0 || typeof interval !== 'number' && interval != '$userSet' || interval < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n                    if (interval == '$userSet') interval = animationSpeed\r\n                   \r\n                    if (interval == 0) {\r\n                        for (let i = 0; i < subCommands.length; i++){\r\n                            AnimateEngine(subCommands[i])\r\n                        }\r\n                        break; \r\n                    }\r\n\r\n\r\n                    \r\n\r\n                    AnimateEngine(subCommands[0])\r\n                    let currentCommandIdx = 1\r\n\r\n                    let intervalID = setInterval(() => {\r\n                        if (currentCommandIdx >= subCommands.length){\r\n                            clearInterval(intervalID)\r\n                            //AnimateEngine([\"clearLoop\", `${intervalID}`])\r\n                            return\r\n                        }\r\n\r\n                        AnimateEngine(subCommands[currentCommandIdx])\r\n                        currentCommandIdx++\r\n                    }, interval)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curIntervals = prevState.slice()\r\n                        curIntervals.push(intervalID)\r\n                        return curIntervals\r\n                    })\r\n                    break;\r\n                \r\n                case 'doFor':\r\n                    let commandsToRun = command[1]\r\n                    let repeats = command[2]\r\n                    let intervalBetweenEach = command[3]\r\n\r\n                    if (!commandsToRun || !Array.isArray(commandsToRun)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!repeats && repeats !== 0 || typeof repeats !== 'number' || repeats < 0) return [\"ERROR\", \"Invalid Repeats\"]\r\n                    if (!intervalBetweenEach && intervalBetweenEach !== 0 || (typeof intervalBetweenEach !== 'number' && intervalBetweenEach !== '$userSet') || intervalBetweenEach < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n\r\n                    if (intervalBetweenEach === '$userSet'){\r\n                        intervalBetweenEach = parseInt(animationSpeed)\r\n                    }\r\n                    \r\n                    let currentIteration = 1\r\n\r\n                    AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n                    \r\n                    let intervalIdentifier = setInterval(() => {\r\n                        if (currentIteration >= repeats && repeats !== 0) {\r\n                            clearInterval(intervalIdentifier)\r\n                            return;\r\n                        }\r\n\r\n                        AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n\r\n                        currentIteration++\r\n                    }, intervalBetweenEach * commandsToRun.length)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curAIntervals = prevState.slice()\r\n                        curAIntervals.push(intervalIdentifier)\r\n                        return curAIntervals\r\n                    })\r\n                    break;\r\n\r\n                case 'doSim':\r\n                    let toRunCommands = command[1]\r\n                    AnimateEngine([\"do\", toRunCommands, 0])\r\n                    break;\r\n\r\n                case 'doIn':\r\n                    let commandsToExecute = command[1]\r\n                    let waitFor = command[2]\r\n\r\n                    if (!commandsToExecute || !Array.isArray(commandsToExecute)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!waitFor || typeof waitFor !== 'number' || waitFor <= 0) return [\"ERROR\", \"Wait Time Invalid\"]\r\n                    let timeoutID = setTimeout(() => {\r\n                        command[1].forEach((value) => {\r\n                            console.log(value)\r\n                            AnimateEngine(value)\r\n                        })\r\n                    }, command[2] )\r\n\r\n                    setActiveTimeouts(prevState => {\r\n                        let curTimeouts = prevState.slice()\r\n                        curTimeouts.push(timeoutID)\r\n                        return curTimeouts\r\n                    })\r\n\r\n                    break;\r\n                \r\n                case 'ra':\r\n                case 'resetArray':\r\n                    \r\n                    let numOfBars = command[1]\r\n                    if (!numOfBars) numOfBars = numBars\r\n                    if (typeof numOfBars !== 'number') return [\"ERROR\", \"Invalid Number of bars\"]\r\n                    let Randvalues = []\r\n                    for (let i = 0; i < numOfBars; i++){\r\n                        Randvalues.push(Math.round(Math.random() * 60) + 8)\r\n                    }\r\n                    AnimateEngine([\"setArray\",Randvalues,\"$BASE\"])\r\n                    break;\r\n                \r\n                case 'setRunTimeDisplay':\r\n                    let newRuntime = command[1]\r\n                    if (!newRuntime) return [\"ERROR\", \"Invalid Runtime\"]\r\n                    setRunTime(newRuntime)\r\n                    break;\r\n\r\n                case 'setComparisonsDisplay':\r\n                    let newComparisons = command[1]\r\n                    if (!newComparisons) return [\"ERROR\", \"Invalid Comparisons\"]\r\n                    setComparisons(newComparisons)\r\n                    break;\r\n\r\n                case 'setSwapsDisplay':\r\n                    let newSwaps = command[1]\r\n                    if (!newSwaps) return [\"ERROR\", \"Invalid Swaps\"]\r\n                    setSwaps(newSwaps)\r\n                    break;\r\n\r\n                case 'startAnimation':\r\n                    setAnimationActive(true)\r\n                    break;\r\n\r\n                case 'endAnimation':\r\n                    setAnimationActive(false)\r\n                    break;\r\n\r\n                case 'clearLoop': //FIXME: Dosen't work\r\n                    let specificLoop = command[1]\r\n                    let activeLoops = activeIntervals.slice()\r\n                    if (specificLoop == undefined){\r\n                        let ALLen = activeLoops.length\r\n                        for (let i = 0; i < ALLen; i++){\r\n                            clearInterval(activeLoops.pop())\r\n                        }\r\n                    } else if (typeof specificLoop === 'number') {\r\n                        let loop = activeLoops.splice(specificLoop, 1)[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    } else if (typeof specificLoop === 'string'){\r\n                        let loop = activeLoops.indexOf(parseInt(specificLoop))[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    }\r\n\r\n                    setActiveIntervals(activeLoops)\r\n                    \r\n                    \r\n                    break;\r\n\r\n                case 'clearWaits': //FIXME: Dosen't work\r\n                    let activeWaits = activeTimeouts.slice()\r\n                    let AWLen = activeWaits.length\r\n                    for (let i = 0; i < AWLen; i++){\r\n                        clearTimeout(activeWaits.pop())\r\n                    }\r\n                    break;\r\n                \r\n                case 'ct':\r\n                case 'clearTimers': //FIXME: Dosen't work\r\n                    AnimateEngine([\"clearLoops\"])\r\n                    AnimateEngine([\"clearWaits\"])\r\n                    break;\r\n                \r\n                case 'r':\r\n                case 'reload':\r\n                    window.location.reload()\r\n                    break;\r\n                    \r\n                case 'executeInternalAnimation':\r\n                    let animationKey = command[1]\r\n                    console.log(animationKey)\r\n                    if (!animationKey || typeof animationKey !== 'string' ) return [\"ERROR\", \"Invalid Animation Key\"]\r\n                    let resultData = []\r\n                    let isLegacy = false\r\n                    switch(animationKey){\r\n                        case 'bubbleSort':\r\n                            resultData = bubbleSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'selectionSort':\r\n                            resultData = selectionSort(getNumbersFromArrayState())\r\n                            isLegacy = true\r\n                            break;\r\n                        case 'insertionSort':\r\n                            resultData = insertionSort(getNumbersFromArrayState())\r\n                            isLegacy = true\r\n                            break;\r\n                        case 'quickSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = quickSort(getNumbersFromArrayState())\r\n                            isLegacy = true\r\n                            break;\r\n                        case 'heapSort':\r\n                            resultData = heapSort(getNumbersFromArrayState())\r\n                            isLegacy = true\r\n                            break;\r\n                        case 'mergeSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = mergeSort(getNumbersFromArrayState())\r\n                            isLegacy = true\r\n                            break;\r\n                        case 'reverseArray':\r\n                            resultData = reverseArray(getNumbersFromArrayState())\r\n                            isLegacy = true\r\n                            break;\r\n                        default:\r\n                            return [\"ERROR\", \"Invalid Animation Key\"]\r\n                            break;\r\n                    }\r\n\r\n                    // Legacy\r\n                    if (isLegacy){\r\n                        let [animations,runTime] = resultData\r\n                        AnimateEngine([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n                        animator(animations,animationSpeed)\r\n                    } else {\r\n                        // NEW Animation System\r\n                        AnimateEngine([\"doSim\", [resultData]])\r\n                    }\r\n\r\n                    break;\r\n                \r\n                default:\r\n                    return [\"ERROR\", \"Unknown Command\"]\r\n                    break;\r\n            }\r\n\r\n            return [\"SUCCESS\", \"Exectuted Successfully\"]\r\n\r\n        } catch (error){\r\n            console.error(error)\r\n            return [\"ERROR\", \"Try Failed\"]\r\n        }\r\n    \r\n    }\r\n\r\n    function resetArray(numOfBars){ // LEGACY - DEPRECATED IN 0.10\r\n        AnimateEngine([\"resetArray\", numOfBars])\r\n    }\r\n    \r\n    async function animate(command){ // LEGACY - DEPRECATED IN 0.10\r\n        switch(command.command) {\r\n            case 'setColor':\r\n                AnimateEngine([\"setColor\",command.id,command.color.replace('$BEING_CHECKED', '$CHECKING')])\r\n                break;\r\n            case 'swap':\r\n                AnimateEngine([\"swap\",parseInt(command.id1),parseInt(command.id2)])\r\n                break;\r\n            case 'setArray':\r\n                AnimateEngine([\"setArray\",command.array,'$BASE'])\r\n                break;\r\n                \r\n        }\r\n    }\r\n\r\n    function animator(animations,speed){ // LEGACY - DEPRECATED IN 0.10\r\n        AnimateEngine([\"startAnimation\"])\r\n        let idx = 0\r\n\r\n        const intervalID = setInterval( () => {\r\n            if (idx > animations.length - 1) {\r\n                clearInterval(intervalID)\r\n                AnimateEngine([\"endAnimation\"])\r\n                return \r\n            }\r\n            animate(animations[idx])\r\n            idx++\r\n        }, speed)\r\n    }\r\n\r\n    function getNumbersFromArrayState(){\r\n        let numbers = []\r\n        for (let i = 0; i < array.length; i++){\r\n            numbers.push(array[i].value)\r\n        }\r\n\r\n        return numbers\r\n    }\r\n\r\n    function handleSortClick(){\r\n        if (animationActive) return false\r\n        console.log(AnimateEngine([\"executeInternalAnimation\", activeAlgorithm]))\r\n    }\r\n\r\n    function createBars(){\r\n        let barWidth = ((window.innerWidth / 100) * 90) / numBars\r\n\r\n        let barsDivs = array.map((item, idx) => {\r\n            let style = {\r\n                height: `${item.value}%`, \r\n                backgroundColor: `${item.color}`,\r\n                width: barWidth,\r\n                margin: barWidth / 4 > 20 ? 20 : barWidth / 4,\r\n                fontSize: barWidth > 20 ? barWidth / 3 : 0,\r\n                color: COLORS.TEXT  \r\n            }\r\n\r\n            return (<div key={idx} className='bar' style={style}>{item.value}</div>)\r\n        })\r\n\r\n        return barsDivs\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='bar-container'>\r\n                <div className='inner-bar-container'>\r\n                    {createBars()}\r\n                </div>\r\n                \r\n            </div>\r\n            <nav>\r\n            <i className='material-icons consoleButton' onClick={() => setIsTerminalOpen(!isTerminalOpen)}>code</i>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>Animation Time ({animationSpeed}ms) </p>\r\n                <input disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(parseInt(e.target.value)); \r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {resetArray(numBars)}}} className={!animationActive ? 'button reset' : 'button-disabled reset'}>Reset</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={!animationActive ? 'button sort' : 'button-disabled sort'}>Sort</button>\r\n                <select disabled={animationActive} value={activeAlgorithm} name={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option value='reverseArray'>(Other)Reverse Array</option>\r\n                </select>\r\n                \r\n                    <div className='sliderBox'>\r\n                        <p className={animationActive ? 'disabled' : ''}>Number of Bars ({numBars})</p>\r\n                        <input disabled={animationActive} type=\"range\" min=\"5\" max={`${Math.round(window.innerWidth / 12) - 10}`} value={numBars} onChange={e => {\r\n                            AnimateEngine([\"resetArray\",parseInt(e.target.value)])\r\n                        }}></input>\r\n                    </div>\r\n                    \r\n                    \r\n\r\n                <p title={`Swaps: ${swaps} \\nComparisons: ${comparisons}`} className={animationActive ? 'timeTaken disabled' : 'timeTaken'}>{runTime !== 0 ? `Time: ${runTime}ms`: `Time: N/A`}</p>\r\n                \r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n\r\n            <Console display={isTerminalOpen} AnimateEngine={AnimateEngine}/>\r\n \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualiser","import React from 'react'\r\nimport SortingVisualiser from '../components/SortingVisualiser/'\r\n\r\n\r\nfunction SortingVisualiserPage(){\r\n    return (\r\n        <SortingVisualiser bars={30} animations={[]}/>\r\n    )\r\n}\r\n\r\nexport default SortingVisualiserPage","import React, { useEffect, useState } from 'react'\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport PathfindingVisualiserPage from '../../pages/PathfindingVisualiserPage'\r\nimport Console from '../Console'\r\nimport InfoCard from '../InfoCard'\r\nimport './style.css'\r\n\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc', \r\n    CHECKING: 'red',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\nfunction PathfindingVisualiser(props){\r\n\r\n    //#region State Creation \r\n    const cookieData = document.cookie.replace(';','').replace(' ','').split(',')\r\n    const [grid, setGrid] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [swaps, setSwaps] = useState(0)\r\n    const [comparisons, setComparisons] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(cookieData[1] || 'bubbleSort')\r\n    const [isTerminalOpen, setIsTerminalOpen] = useState(false)\r\n    const [activeTimeouts, setActiveTimeouts] = useState([])\r\n    const [activeIntervals, setActiveIntervals] = useState([])\r\n\r\n    //#endregion\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        //AnimateEngine([\"resetArray\",numBars])\r\n        resetGrid()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    function AnimateEngine(command){\r\n        try {\r\n            let commandCode = command[0]\r\n            \r\n            let response = [\"PENDING\", \"In progress\"]\r\n            switch(commandCode){\r\n                case 'setState':\r\n                        let indexArray = command[1]\r\n                        let type = command[2]\r\n                        let data = command[3]\r\n\r\n                        if (!indexArray || !Array.isArray(indexArray)) return [\"ERROR\", \"Invalid Indexs\"]\r\n                        if (!type || typeof type !== 'string') return [\"ERROR\", \"Invalid Type\"]\r\n                        \r\n                        type = type.toLowerCase()\r\n\r\n                        if (type === 'color'){\r\n                            if(typeof data !== 'string') return [\"ERROR\", \"Invalid Data\"]\r\n                            if (data.includes('$')) data = COLORS[data.replace('$','')]\r\n                        } else if (type === 'value'){\r\n                            if(typeof data !== 'number') return [\"ERROR\", \"Invalid Data\"]\r\n                        } else {\r\n                            return [\"ERROR\", \"Invalid Type\"]\r\n                        }\r\n\r\n\r\n                        setGrid(prevState => {\r\n                            let newArray = prevState.slice()\r\n                            \r\n                            indexArray.forEach((idx) => {\r\n                                if (!Array.isArray(idx)) {\r\n                                    return newArray\r\n\r\n                                } else if (idx.length === 2 && (typeof idx[0] === 'number' || idx[0] === '$MID')&& (typeof idx[1] === 'number' || idx[1] === '$MID') && idx[0] < newArray.length && idx[1] < newArray.length){\r\n                                    idx.forEach((indexVal, indexIdx) => {\r\n                                        if (idx[indexIdx] < 0 && Math.abs(idx[indexIdx]) < newArray.length){\r\n                                            console.log(\"SUB0\")\r\n                                            if (indexIdx === 0) idx[indexIdx] = newArray.length - idx[indexIdx]\r\n                                            else if (indexIdx === 1) idx[indexIdx] = newArray[0].length - idx[indexIdx]\r\n                                            else console.log(\"TEST\")\r\n                                        } \r\n                                        else if (idx[indexIdx] === '$MID') idx[indexIdx] = Math.floor(newArray.length / 2)\r\n                                    })\r\n\r\n                                    newArray[idx[0]][idx[1]][type] = data\r\n                                } else if (idx === '$ALL'){\r\n                                    newArray.forEach((xVal, xPos) => {\r\n                                        newArray[xPos].forEach((yVal, yPos) => {\r\n                                            newArray[xPos][yPos][type] = data\r\n                                        })\r\n                                    })\r\n                                } else if (idx === '$QUAD1'){\r\n                                    for (let x = 0; x < Math.floor(newArray.length / 2); x++){\r\n                                        for (let y = 0; y < Math.floor(newArray.length / 2); y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                } else if (idx === '$QUAD2'){\r\n                                    for (let x = Math.floor(newArray.length / 2); x < newArray.length; x++){\r\n                                        for (let y = 0; y < Math.floor(newArray.length / 2); y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                } else if (idx === '$QUAD3'){\r\n                                    for (let x = 0; x < Math.floor(newArray.length / 2); x++){\r\n                                        for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                } else if (idx === '$QUAD4'){\r\n                                    for (let x = Math.floor(newArray.length / 2); x < newArray.length; x++){\r\n                                        for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //\r\n                                \r\n                            });\r\n                            \r\n                            return newArray\r\n                        });\r\n                            \r\n\r\n                    break;\r\n                \r\n                case 'sc':\r\n                case 'setColor': // Sets color of bars. Syntax: [\"setColor\",[array of ids or $ALL, $LHALF, $RHALF], \"valid css color OR valid inbuilt variable prefixed with $\"]\r\n                    let idxes = command[1]\r\n                    let color = command[2]\r\n                    \r\n                    AnimateEngine([\"setState\", idxes, 'color', color])\r\n                    break;\r\n                \r\n                case 'swap':\r\n                    let id1 = command[1]\r\n                    let id2 = command[2]\r\n                    if (!id1 && id1 !== 0 || typeof id1 !== 'number') return [\"ERROR\", \"Invalid id1\"]\r\n                    if (!id2 && id1 !== 0 || typeof id2 !== 'number') return [\"ERROR\", \"Invalid id2\"]\r\n                    setGrid(prevState => {\r\n                        id1 = command[1]\r\n                        id2 = command[2]\r\n                        let newArray = prevState.slice()\r\n\r\n                        if (id1 < 0) id1 = newArray.length - Math.abs(id1)\r\n                        if (id2 < 0) id2 = newArray.length - Math.abs(id2)\r\n                        \r\n                        if (id1 >= 0 && id1 < newArray.length && id2 >= 0 && id2 < newArray.length){\r\n                            const tmp1 = {...newArray[id1]}\r\n                            const tmp2 = {...newArray[id2]}\r\n                            newArray[id1] = tmp2\r\n                            newArray[id2] = tmp1\r\n                        }\r\n                        \r\n        \r\n                        return newArray\r\n                    })\r\n        \r\n                    break;\r\n                \r\n                case 'setValue':\r\n                    let idxs = command[1]\r\n                    let value = command[2]\r\n\r\n                    AnimateEngine([\"setState\", idxs, 'value', value])\r\n                    break;\r\n                \r\n                case 'setArray':\r\n                    let values = command[1]\r\n                    let colorCode = command[2]\r\n\r\n                    if (!values || !Array.isArray(values)) return [\"ERROR\", \"Invalid Values\"]\r\n                    if (!colorCode || typeof colorCode !== 'string') return [\"ERROR\", \"Invalid Color\"]\r\n                    setGrid(prevState => {\r\n                        let newArray = []\r\n                        let color = command[2]\r\n                        if (color.includes('$')) color = COLORS[color.replace('$','')]\r\n        \r\n                        values.forEach(value => {\r\n                        if (typeof value == \"number\"){\r\n                                newArray.push({value: value, color: color})\r\n                            }\r\n                            \r\n                        });\r\n                        return newArray\r\n                    })\r\n                    break;\r\n                        \r\n                case 'do':\r\n                    let subCommands = command[1]\r\n                    let interval = command[2]\r\n\r\n                    if (!subCommands || !Array.isArray(subCommands)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!interval && interval != 0 || typeof interval !== 'number' && interval != '$userSet' || interval < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n                    if (interval == '$userSet') interval = animationSpeed\r\n                   \r\n                    if (interval == 0) {\r\n                        for (let i = 0; i < subCommands.length; i++){\r\n                            AnimateEngine(subCommands[i])\r\n                        }\r\n                        break; \r\n                    }\r\n\r\n\r\n                    \r\n\r\n                    AnimateEngine(subCommands[0])\r\n                    let currentCommandIdx = 1\r\n\r\n                    let intervalID = setInterval(() => {\r\n                        if (currentCommandIdx >= subCommands.length){\r\n                            clearInterval(intervalID)\r\n                            //AnimateEngine([\"clearLoop\", `${intervalID}`])\r\n                            return\r\n                        }\r\n\r\n                        AnimateEngine(subCommands[currentCommandIdx])\r\n                        currentCommandIdx++\r\n                    }, interval)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curIntervals = prevState.slice()\r\n                        curIntervals.push(intervalID)\r\n                        return curIntervals\r\n                    })\r\n                    break;\r\n                \r\n                case 'doFor':\r\n                    let commandsToRun = command[1]\r\n                    let repeats = command[2]\r\n                    let intervalBetweenEach = command[3]\r\n\r\n                    if (!commandsToRun || !Array.isArray(commandsToRun)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!repeats && repeats !== 0 || typeof repeats !== 'number' || repeats < 0) return [\"ERROR\", \"Invalid Repeats\"]\r\n                    if (!intervalBetweenEach && intervalBetweenEach !== 0 || (typeof intervalBetweenEach !== 'number' && intervalBetweenEach !== '$userSet') || intervalBetweenEach < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n\r\n                    if (intervalBetweenEach === '$userSet'){\r\n                        intervalBetweenEach = parseInt(animationSpeed)\r\n                    }\r\n                    \r\n                    let currentIteration = 1\r\n\r\n                    AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n                    \r\n                    let intervalIdentifier = setInterval(() => {\r\n                        if (currentIteration >= repeats && repeats !== 0) {\r\n                            clearInterval(intervalIdentifier)\r\n                            return;\r\n                        }\r\n\r\n                        AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n\r\n                        currentIteration++\r\n                    }, intervalBetweenEach * commandsToRun.length)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curAIntervals = prevState.slice()\r\n                        curAIntervals.push(intervalIdentifier)\r\n                        return curAIntervals\r\n                    })\r\n                    break;\r\n\r\n                case 'doSim':\r\n                    let toRunCommands = command[1]\r\n                    AnimateEngine([\"do\", toRunCommands, 0])\r\n                    break;\r\n\r\n                case 'doIn':\r\n                    let commandsToExecute = command[1]\r\n                    let waitFor = command[2]\r\n\r\n                    if (!commandsToExecute || !Array.isArray(commandsToExecute)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!waitFor || typeof waitFor !== 'number' || waitFor <= 0) return [\"ERROR\", \"Wait Time Invalid\"]\r\n                    let timeoutID = setTimeout(() => {\r\n                        command[1].forEach((value) => {\r\n                            console.log(value)\r\n                            AnimateEngine(value)\r\n                        })\r\n                    }, command[2] )\r\n\r\n                    setActiveTimeouts(prevState => {\r\n                        let curTimeouts = prevState.slice()\r\n                        curTimeouts.push(timeoutID)\r\n                        return curTimeouts\r\n                    })\r\n\r\n                    break;\r\n                \r\n                case 'ra':\r\n                case 'resetArray':\r\n                    \r\n                    let numOfBars = command[1]\r\n                    //if (!numOfBars) numOfBars = numBars\r\n                    if (typeof numOfBars !== 'number') return [\"ERROR\", \"Invalid Number of bars\"]\r\n                    let Randvalues = []\r\n                    for (let i = 0; i < numOfBars; i++){\r\n                        Randvalues.push(Math.round(Math.random() * 60) + 8)\r\n                    }\r\n                    AnimateEngine([\"setArray\",Randvalues,\"$BASE\"])\r\n                    break;\r\n                \r\n                case 'setRunTimeDisplay':\r\n                    let newRuntime = command[1]\r\n                    if (!newRuntime) return [\"ERROR\", \"Invalid Runtime\"]\r\n                    setRunTime(newRuntime)\r\n                    break;\r\n\r\n                case 'setComparisonsDisplay':\r\n                    let newComparisons = command[1]\r\n                    if (!newComparisons) return [\"ERROR\", \"Invalid Comparisons\"]\r\n                    setComparisons(newComparisons)\r\n                    break;\r\n\r\n                case 'setSwapsDisplay':\r\n                    let newSwaps = command[1]\r\n                    if (!newSwaps) return [\"ERROR\", \"Invalid Swaps\"]\r\n                    setSwaps(newSwaps)\r\n                    break;\r\n\r\n                case 'startAnimation':\r\n                    setAnimationActive(true)\r\n                    break;\r\n\r\n                case 'endAnimation':\r\n                    setAnimationActive(false)\r\n                    break;\r\n\r\n                case 'clearLoop': //FIXME: Dosen't work\r\n                    let specificLoop = command[1]\r\n                    let activeLoops = activeIntervals.slice()\r\n                    if (!specificLoop && specificLoop !== 0){\r\n                        let ALLen = activeLoops.length\r\n                        for (let i = 0; i < ALLen; i++){\r\n                            clearInterval(activeLoops.pop())\r\n                        }\r\n                    } else if (typeof specificLoop === 'number') {\r\n                        let loop = activeLoops.splice(specificLoop, 1)[0]\r\n                        console.log(loop)\r\n                    } else if (typeof specificLoop === 'string'){\r\n                        let loop = activeLoops.indexOf(parseInt(specificLoop))\r\n                        console.log(loop)\r\n                    }\r\n\r\n                    setActiveIntervals(activeLoops)\r\n                    \r\n                    \r\n                    break;\r\n\r\n                case 'clearWaits': //FIXME: Dosen't work\r\n                    let activeWaits = activeTimeouts.slice()\r\n                    let AWLen = activeWaits.length\r\n                    for (let i = 0; i < AWLen; i++){\r\n                        clearTimeout(activeWaits.pop())\r\n                    }\r\n                    break;\r\n                \r\n                case 'ct':\r\n                case 'clearTimers': //FIXME: Dosen't work\r\n                    AnimateEngine([\"clearLoops\"])\r\n                    AnimateEngine([\"clearWaits\"])\r\n                    break;\r\n                \r\n                case 'r':\r\n                case 'reload':\r\n                    window.location.reload()\r\n                    break;\r\n                    \r\n                case 'executeInternalAnimation':\r\n                        break;\r\n                //     let animationKey = command[1]\r\n                //     console.log(animationKey)\r\n                //     if (!animationKey || typeof animationKey !== 'string' ) return [\"ERROR\", \"Invalid Animation Key\"]\r\n                //     let resultData = []\r\n                //     let isLegacy = false\r\n                //     switch(animationKey){\r\n                //         case 'bubbleSort':\r\n                //             resultData = bubbleSort(getNumbersFromArrayState())\r\n                //             break;\r\n                //         case 'selectionSort':\r\n                //             resultData = selectionSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'insertionSort':\r\n                //             resultData = insertionSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'quickSort':\r\n                //             return alert('Currently Unavailable')\r\n                //             resultData = quickSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'heapSort':\r\n                //             resultData = heapSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'mergeSort':\r\n                //             return alert('Currently Unavailable')\r\n                //             resultData = mergeSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'reverseArray':\r\n                //             resultData = reverseArray(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         default:\r\n                //             return [\"ERROR\", \"Invalid Animation Key\"]\r\n                //             break;\r\n                //     }\r\n\r\n                //     // Legacy\r\n                //     if (isLegacy){\r\n                //         let [animations,runTime] = resultData\r\n                //         AnimateEngine([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n                //         animator(animations,animationSpeed)\r\n                //     } else {\r\n                //         // NEW Animation System\r\n                //         AnimateEngine([\"doSim\", [resultData]])\r\n                //     }\r\n\r\n                //     break;\r\n                // default:\r\n                    return [\"ERROR\", \"Unknown Command\"]\r\n                    break;\r\n            }\r\n\r\n            return [\"SUCCESS\", \"Exectuted Successfully\"]\r\n\r\n        } catch (error){\r\n            console.error(error)\r\n            return [\"ERROR\", \"Try Failed\"]\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    function resetGrid(){\r\n        let boxSize = 20\r\n        let xNum = ((window.innerWidth - 30) / boxSize)\r\n        let yNum = ((window.innerHeight - 100) / boxSize)\r\n        let defaultItem = {color: 'black', value: '2'}\r\n\r\n        let newGrid = []\r\n        for (let y = 0; y < yNum; y++){\r\n            let newCol = []\r\n            for (let x = 0; x < xNum; x++){\r\n                let item = {\r\n                    color: 'white',\r\n                    type: 'OPEN'\r\n                }\r\n                newCol.push({...defaultItem})\r\n            }\r\n            newGrid.push(newCol)\r\n        }\r\n\r\n        return setGrid(newGrid)\r\n    }\r\n\r\n    function createDivGrid(){\r\n        let divGrid = []\r\n        let width = 40\r\n        let height = 40\r\n        try {\r\n            width = ((window.innerWidth - 30) / grid[0].length) - 1\r\n            height = ((window.innerHeight - 100) / grid.length) - 1\r\n        } catch {\r\n            console.log(\"No Grid Created\")\r\n        }\r\n        grid.forEach((itemx,idxx) => {\r\n            let col = grid[idxx]\r\n            let divCol = col.map((item, idxy) => {\r\n                return (<div onMouseDown={boxClickHandler} className='node' key={`${idxx}-${idxy}`} id={`${idxx}-${idxy}`} style={{backgroundColor: item.color, width: width, height: height}}></div>)\r\n            })\r\n\r\n            divGrid.push(<div className='row'>{divCol}</div>)\r\n        })\r\n        \r\n\r\n        return divGrid\r\n    }\r\n\r\n    function boxClickHandler(e){\r\n        console.log(\"FIRE\")\r\n        setGrid(prevState => {\r\n            console.log(e)\r\n            let newGrid = prevState.slice()\r\n            let pos = e.target.id.split('-')\r\n            let posX = parseInt(pos[0])\r\n            let posY = parseInt(pos[1])\r\n            console.log(pos)\r\n            if (newGrid[posX][posY].color === 'red') newGrid[posX][posY].color = 'red'\r\n            else newGrid[posX][posY].color = 'red'\r\n            console.log(newGrid)\r\n            return newGrid\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    function handleSortClick(){\r\n        return ''\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n        \r\n            <div className='grid-container'>\r\n                <div className=\"grid-container-inner\">\r\n                    {createDivGrid()}\r\n                </div>\r\n            </div>\r\n            <nav>\r\n            <i className='material-icons consoleButton' onClick={() => setIsTerminalOpen(!isTerminalOpen)}>code</i>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>Animation Time ({animationSpeed}ms) </p>\r\n                <input disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(parseInt(e.target.value)); \r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {resetGrid()}}} className={!animationActive ? 'button reset' : 'button-disabled reset'}>Reset</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={!animationActive ? 'button sort' : 'button-disabled sort'}>Sort</button>\r\n                <select disabled={animationActive} value={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option value='reverseArray'>(Other)Reverse Array</option>\r\n                </select>\r\n                <p title={`Swaps: ${swaps} \\nComparisons: ${comparisons}`} className={animationActive ? 'timeTaken disabled' : 'timeTaken'}>{runTime !== 0 ? `Time: ${runTime}ms`: `Time: N/A`}</p>\r\n\r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n\r\n            <Console display={isTerminalOpen} AnimateEngine={AnimateEngine}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default PathfindingVisualiser","import React from 'react'\r\nimport PathfindingVisualiser from '../components/PathfindingVisualiser'\r\n\r\nfunction PathfindingVisualiserPage(){\r\n    return (<PathfindingVisualiser />)\r\n}\r\n\r\n\r\nexport default PathfindingVisualiserPage","import React from 'react'\r\n\r\nfunction AlgoriComputePage(){\r\n    return (<p>Compute Page</p>)\r\n}\r\n\r\n\r\nexport default AlgoriComputePage","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction Container(props){\r\n    \r\n    return (\r\n        <div className='changelogContainer'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Container","import React, {useEffect, useState} from 'react'\r\nimport './style.css'\r\n\r\n\r\nconst CHANGES_COLORS = {\r\n    // Finished Changes\r\n    \"ADDED\": \"#1b9429\",\r\n    \"CHANGED\": \"#2b6bba\",\r\n    \"DEPRECATED\": \"#a6602b\",\r\n    \"REMOVED\": \"#a62b2b\",\r\n    \"FIXED\": \"#218f7c\",\r\n    // Planned Changes\r\n    \"ADD\": \"#1b9429\",\r\n    \"CHANGE\": \"#2b6bba\",\r\n    \"DEPRECATE\": \"#a6602b\",\r\n    \"REMOVE\": \"#a62b2b\",\r\n    \"FIX\": \"#218f7c\"\r\n}\r\n\r\nfunction Item(props){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setIsOpen(props.isOpen)\r\n    }, [props.isOpen])\r\n    \r\n\r\n\r\n    let changes = false\r\n\r\n    if (props.changes){\r\n        changes = props.changes.map((value, idx) => {\r\n            return (<li style={{color: `${CHANGES_COLORS[value[0]]}`}}>{value[0]} - {value[1]}</li>)\r\n        })\r\n    }\r\n\r\n    let ItemInfo = (\r\n        <div className='itemInfoContainer'>\r\n            {props.children}\r\n            {changes ? <ul className='changesList'>{changes}</ul> : null}\r\n            <p className='date'>{props.date || 'Unknown'}</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div onClick={() => setIsOpen(!isOpen)} className='fullItemContainer'>\r\n            <div className='TitleContainer' >\r\n                <p className='version'>{props.version}</p>\r\n                <p>{props.title}</p>\r\n            </div>\r\n            {isOpen ? ItemInfo : null}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Item","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Container from '../components/ChangeLog/Container'\r\nimport Item from '../components/ChangeLog/Item'\r\n\r\n\r\nimport changeLogData from '../data/changelogData.json'\r\n\r\n\r\nfunction HomePage(){\r\n    const [isAllOpen, setIsAllOpen] = useState(false)\r\n    const [isNewestFirst, setIsNewestFirst] = useState(true)\r\n    console.log(isAllOpen)\r\n\r\n    let changeLogItems = changeLogData.slice()\r\n    if (isNewestFirst) changeLogItems = changeLogItems.reverse()\r\n\r\n    let changeItems = changeLogItems.map((value, idx) => {\r\n        let dontDisplay = false\r\n        dontDisplay = value.dontDisplay\r\n        if (!dontDisplay) return <Item key={idx}  isOpen={isAllOpen} changes={value.modifications} date={value.isNext ? `Planned for ${value.date}` : value.date} version={value.isNext ? 'Next update' : value.version} title={value.title}> <p>{value.info}</p> </Item>\r\n    \r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className='changeLog'>\r\n            <div className='changeLogMenuItems'>\r\n                <div className='openAllChangesButton' onClick={() => setIsAllOpen(!isAllOpen)}>{isAllOpen ? 'Close All' : 'Open All'}</div>\r\n                <div className='openAllChangesButton' onClick={() => setIsNewestFirst(!isNewestFirst)}>{isNewestFirst ? 'Order Oldest to Newest' : 'Order Newest to Oldest'}</div>\r\n            </div>\r\n            <Container titleBgColor='' titleTxtColor='' infoBgColor='' infoTxtColor=''>\r\n                {changeItems}\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport SortingVisualiserPage from './pages/SortingVisualiserPage';\n\n\nimport {BrowserRouter as Router, Redirect, Route, Switch} from 'react-router-dom'\nimport PathfindingVisualiserPage from './pages/PathfindingVisualiserPage';\nimport AlgoriComputePage from './pages/AlgoriComputePage';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/sort'>\n            <SortingVisualiserPage />\n          </Route>\n          <Route path='/pathfind'>\n            <PathfindingVisualiserPage />\n          </Route>\n          <Route path='/compute'>\n            <AlgoriComputePage />\n          </Route>\n          <Route path='/'>\n            <HomePage />\n          </Route>\n        </Switch>\n        \n        <Menu/>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}