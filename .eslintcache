[{"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx":"1","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx":"2","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts":"3","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts":"4","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts":"5","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx":"6","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts":"7","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts":"8","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts":"9","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx":"10","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx":"11","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts":"12","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx":"13","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx":"14","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx":"15","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx":"16","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx":"17","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\LatestChangesCard\\index.jsx":"18","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.jsx":"19","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\UnavailablePage.jsx":"20","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\GridPage.jsx":"21","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\BarsPage.tsx":"22","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\DocsPage\\index.jsx":"23","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\data\\docs.js":"24"},{"size":235,"mtime":1614858547970,"results":"25","hashOfConfig":"26"},{"size":23942,"mtime":1615544422958,"results":"27","hashOfConfig":"26"},{"size":1596,"mtime":1615047217662,"results":"28","hashOfConfig":"26"},{"size":1780,"mtime":1615047248952,"results":"29","hashOfConfig":"26"},{"size":1561,"mtime":1615047232564,"results":"30","hashOfConfig":"26"},{"size":2964,"mtime":1615193797235,"results":"31","hashOfConfig":"26"},{"size":462,"mtime":1614872367345,"results":"32","hashOfConfig":"26"},{"size":2377,"mtime":1615047225513,"results":"33","hashOfConfig":"26"},{"size":1693,"mtime":1614872357091,"results":"34","hashOfConfig":"26"},{"size":2879,"mtime":1615192600547,"results":"35","hashOfConfig":"26"},{"size":2142,"mtime":1615191928826,"results":"36","hashOfConfig":"26"},{"size":1459,"mtime":1615047242467,"results":"37","hashOfConfig":"26"},{"size":67,"mtime":1611845343871,"results":"38","hashOfConfig":"26"},{"size":1585,"mtime":1615191897091,"results":"39","hashOfConfig":"26"},{"size":235,"mtime":1615069584116,"results":"40","hashOfConfig":"26"},{"size":2180,"mtime":1615221731669,"results":"41","hashOfConfig":"26"},{"size":406,"mtime":1615544429279,"results":"42","hashOfConfig":"26"},{"size":1612,"mtime":1615195716233,"results":"43","hashOfConfig":"26"},{"size":2561,"mtime":1615023306675,"results":"44","hashOfConfig":"26"},{"size":775,"mtime":1614951016918,"results":"45","hashOfConfig":"26"},{"size":234,"mtime":1614959868734,"results":"46","hashOfConfig":"26"},{"size":249,"mtime":1614960116447,"results":"47","hashOfConfig":"26"},{"size":5458,"mtime":1615559364660,"results":"48","hashOfConfig":"26"},{"size":41947,"mtime":1615559465597,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"17wj5ys",{"filePath":"53","messages":"54","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"67"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"67"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx",[],["112","113"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts",["136","137"],"function sort(array: number[]): [number[],object[],number]{\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        \r\n        for (let j = 0; j < sortedArray.length - 1 - i; j++){\r\n            animations.push([\"setColor\", [j,j+1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] > sortedArray[j+1]){\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j+1]\r\n                sortedArray[j+1] = tmp \r\n                animations.push([\"swap\",j,j+1])\r\n                swaps++\r\n            }\r\n            animations.push([\"setColor\",[j,j+1],\"$BASE\"])\r\n        }\r\n        animations.push([\"setColor\",[sortedArray.length - 1 - i],\"$DONE\"])\r\n    }\r\n\r\n   \r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [0], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n\r\n}\r\n\r\nfunction bubbleSort(array: number[]): any{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return (command)\r\n}\r\n\r\n\r\nexport default bubbleSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts",["138","139"],"const COLORS = {\r\n    CURRENT_MIN: '#3e09ba',\r\n}\r\n\r\n\r\nfunction sort(array: number[]) {\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        let minValIdx = i\r\n        for (let j = i + 1; j < sortedArray.length; j++){\r\n            animations.push([\"setColor\", [j], \"$CHECKING\"])\r\n            comparisons++\r\n            if (array[j] < array[minValIdx]){\r\n                animations.push([\"setColor\", [minValIdx], \"$BASE\"])\r\n                minValIdx = j\r\n                animations.push([\"setColor\", [j], COLORS.CURRENT_MIN])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j+1], \"$BASE\"])\r\n            }  \r\n\r\n                      \r\n        }\r\n        swaps++\r\n        let tmp = array[i]\r\n        array[i] = array[minValIdx]\r\n        array[minValIdx] = tmp\r\n        animations.push([\"swap\", i, minValIdx])\r\n        animations.push([\"setColor\", [i], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [-1], \"$DONE\"])\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction selectionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default selectionSort;","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts",["140","141"],"\r\n\r\n\r\n\r\nfunction sort(array: number[]){\r\n    let startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length; i++){\r\n        for (let j = i; j > 0; j--){\r\n            animations.push([\"setColor\", [j,j-1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] < sortedArray[j-1]) {\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j-1]\r\n                sortedArray[j-1] = tmp\r\n                swaps++\r\n                animations.push([\"swap\", j, j-1])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n                break;\r\n            }\r\n            animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n        }\r\n    }\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction insertionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default insertionSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx",["142"],"import React, { useState } from 'react'\r\nimport './style.css'\r\nimport data from '../../data/algorithmInfo.json'\r\n\r\n\r\nfunction InfoCard({algorithmType, algorithmID}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isOpenHover, setIsOpenHover] = useState(false)\r\n    \r\n\r\n    let title = 'No Information Available'\r\n    let avgTimeComplexity = ''\r\n    let worstTimeComplexity = ''\r\n    let bestTimeComplexity  = ''\r\n    let memoryComplexity = ''\r\n    let stable = ''\r\n    let descriptionArray = []\r\n    let creditText = ''\r\n    let credit = ''\r\n\r\n    if (data[algorithmType][algorithmID]){\r\n        title = data[algorithmType][algorithmID].title || 'Unknown'\r\n        avgTimeComplexity = data[algorithmType][algorithmID].avgTimeComplexity || 'Unknown'\r\n        worstTimeComplexity = data[algorithmType][algorithmID].worstTimeComplexity || 'Unknown'\r\n        bestTimeComplexity = data[algorithmType][algorithmID].bestTimeComplexity || 'Unknown'\r\n        memoryComplexity = data[algorithmType][algorithmID].memoryComplexity || 'Unknown'\r\n        stable = data[algorithmType][algorithmID].stable || 'Unknown'\r\n        descriptionArray = data[algorithmType][algorithmID].description.split('\\n')\r\n        creditText = data[algorithmType][algorithmID].creditText || 'Description From'\r\n        credit = data[algorithmType][algorithmID].credit\r\n    }\r\n    \r\n\r\n    let card = (<div className='card scrollable-bright' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/>\r\n                    <p className='title'>{title}</p>\r\n                    <hr></hr>\r\n                    <p className='meta'>{`Worst Case Time Complexity: ${worstTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Average Time Complexity: ${avgTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Best Case Time Complexity: ${bestTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Memory Complexity: ${memoryComplexity}`}</p>\r\n                    <p className='meta'>Stable: {stable} <i className={'material-icons help'} title='Whether the position of equal values stay the same relative to each other'>help</i></p>\r\n                    <hr></hr>\r\n                    {descriptionArray.map((item,idx) => <p className='description'>{item}</p>)}\r\n                    {credit ? <a className='credit' href={credit} >{`${creditText}: ${credit}`}</a> : null}     \r\n                </div>)\r\n    return (\r\n            <div className='card-container' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/ >\r\n                {isOpen || isOpenHover ? card : null}\r\n                <button onClick={() => setIsOpen(!isOpen)} className='openCardButton' >\r\n                {isOpen ? <i className=\"material-icons clickable dark\">close</i> : <i className=\"material-icons clickable dark\">info</i> }\r\n                </button>  \r\n            </div>\r\n            )\r\n\r\n    }\r\n\r\nexport default InfoCard",["143","144"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts",["145"],"function sort(array: any, animations: any): any {\r\n \r\n\r\n\r\n}\r\n\r\nfunction quickSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n\r\n\r\n    let sortedArray = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default quickSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts",["146"],"// FROM: https://levelup.gitconnected.com/heapsort-for-javascript-newbies-598d25477d55\r\n//TODO: Improve Animations\r\n\r\n\r\nfunction swap(array: number[], idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push([\"swap\", idx1, idx2])\r\n}\r\n\r\n\r\nfunction heapify(array: number[], length: number, idx: number, animations: object[], data: any){\r\n    let largest:number = idx\r\n    let left:number = idx * 2 + 1\r\n    let right:number = left + 1\r\n\r\n    animations.push([\"setColor\", [left,right], \"$CHECKING\"])\r\n    data.comparisons++\r\n    if(left < length && array[left] > array[largest]) {\r\n        largest = left\r\n    }\r\n    data.comparisons++\r\n    if(right < length && array[right] > array[largest]){\r\n        largest = right\r\n    }\r\n\r\n    animations.push([\"setColor\", [left,right], \"$BASE\"])\r\n\r\n    if(largest !== idx){\r\n        data.swaps++\r\n        swap(array, idx, largest, animations)\r\n        heapify(array, length, largest, animations, data)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction sort(array: number[], animations: object[], data: any){\r\n    let length = array.length\r\n    let idx = Math.floor(length / 2 - 1)\r\n    let k = length - 1;\r\n\r\n    while (idx >= 0) {\r\n        heapify(array, length, idx, animations, data)\r\n        idx--\r\n    }\r\n\r\n    while(k >= 0){\r\n        data.swaps++\r\n        swap(array, 0, k, animations)\r\n        heapify(array, k, 0, animations, data)\r\n        //animations.push({command: 'setColor',id: [k],color: '$DONE'})\r\n        k--\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n\r\n\r\nfunction heapSort(array: number[]){\r\n    let startTime = performance.now()\r\n    var animations: object[] = [];\r\n    var data = {\r\n        swaps: 0,\r\n        comparisons: 0\r\n    }\r\n    let sortedArray = sort(array, animations,data)\r\n\r\n    let endTime = performance.now()\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n\r\n    let runTime = endTime - startTime\r\n\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", data.comparisons])\r\n    endAni.push([\"setSwapsDisplay\", data.swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\nexport default heapSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts",["147"],"function mergeArrays(leftArray: any, rightArray: any, animations: any){\r\n    let leftIndex = 0 , rightIndex = 0\r\n\r\n    console.log(leftArray)\r\n\r\n    while(leftIndex < leftArray.length && rightIndex < rightArray.length){\r\n        animations.push({command: 'swap',id1: rightArray[rightIndex][0], id2: rightArray[rightIndex][0]})\r\n        let tmp = leftArray[leftIndex]\r\n        leftArray[leftIndex] = rightArray[rightIndex]\r\n        rightArray[rightIndex] = tmp\r\n        if (leftArray[leftIndex][1] < rightArray[rightIndex][1]){\r\n            leftIndex++\r\n        } else {\r\n            rightIndex++\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return \r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n    if (array.length <= 1) return array\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n\r\n    const left = array.slice(0,middle);\r\n    const right = array.slice(middle);\r\n\r\n    return mergeArrays(sort(left,animations), sort(right,animations),animations)\r\n\r\n}\r\n\r\n\r\nfunction createIndexedArray(array: number[]){\r\n    let indexedArray = []\r\n    for (let i = 0; i < array.length - 1; i++){\r\n        indexedArray.push([i,array[i]])\r\n    }\r\n\r\n    return indexedArray\r\n}\r\n\r\nfunction mergeSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n    let indexedArray: number[][] = createIndexedArray(array)\r\n\r\n\r\n    sortedArray = sort(indexedArray,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    console.log(animations)\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default mergeSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx",["148"],"import React, { useEffect, useState } from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './style.css'\r\nimport vars from '../../data/vars.json'\r\n\r\n\r\nfunction Menu(props){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    function handleScroll(){\r\n        setIsOpen(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        document.addEventListener('scroll',handleScroll)\r\n\r\n        return () => {\r\n            document.removeEventListener('scroll', handleScroll)\r\n        }\r\n    }, [])\r\n    \r\n    return (\r\n        <div>\r\n        {/* {<div className='hoverToOpen' onMouseEnter={() => {console.log(true)}}></div> */}\r\n        {isOpen ? <div className='background-layer' onScroll={() => {setIsOpen(false)}} onClick = {() => {setIsOpen(false)}}></div> : null}\r\n        <div className={isOpen ? 'menuCard': 'menuCard closed'} /*onMouseEnter={() => {setIsOpen(true)}} onMouseLeave={() => {setIsOpen(false)}}*/>\r\n            \r\n            <br />\r\n            <br />\r\n            <button onClick={() => setIsOpen(!isOpen)} className='openMenuButton' >\r\n                <i className=\"material-icons clickable dark\">{isOpen ? 'menu_open' : 'menu' }</i>\r\n            </button>\r\n            {isOpen ? [<NavLink exact className='link clickable homeButton' activeClassName='current' to='/'><span title='Home'><i className=\"material-icons item\">home</i></span></NavLink>,\r\n                       <NavLink className='link clickable' activeClassName='current' to='/bars'><span title='Bars'><i className=\"material-icons item\">bar_chart</i></span></NavLink>,\r\n                       <NavLink className='link clickable' activeClassName='current' to='/grid'><span title='Grid'><i className=\"material-icons item\">window</i></span></NavLink>,\r\n                       <NavLink className='link clickable unavailable' activeClassName='current' to='/logic'><span title='Logic'><i className=\"material-icons item\">device_hub</i></span></NavLink>,\r\n                       <NavLink className='link clickable unavailable' activeClassName='current' to='/learn'><span title='Learn'><i className=\"material-icons item\">class</i></span></NavLink>, \r\n                       <NavLink className='link clickable unavailable'  activeClassName='current' to='/puzzles'><span title='Puzzles'><i className=\"material-icons item\">extension</i></span></NavLink>] \r\n                       : null}\r\n\r\n            {isOpen && props.isLoggedIn ? <NavLink className='link unavailable' activeClassName='current' to='/settings'><span title='Settings & Logout'><i className=\"material-icons item\">settings</i></span></NavLink> : null}\r\n            {isOpen && !props.isLoggedIn ? <NavLink className='link unavailable' activeClassName='current' to='/login'><span className='login' title='Login'>Login</span></NavLink> : null}\r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx",["149","150"],"import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Container from '../components/ChangeLog/Container'\r\nimport Item from '../components/ChangeLog/Item'\r\nimport './HomePageStyle.css'\r\nimport icon from '../images/icon.png'\r\n\r\n\r\nimport changeLogData from '../data/changelogData.json'\r\n\r\n\r\nfunction HomePage(){\r\n    const [isAllOpen, setIsAllOpen] = useState(false)\r\n    const [isNewestFirst, setIsNewestFirst] = useState(true)\r\n    console.log(isAllOpen)\r\n\r\n    let changeLogItems = changeLogData.slice()\r\n    if (isNewestFirst) changeLogItems = changeLogItems.reverse()\r\n\r\n    let changeItems = changeLogItems.map((value, idx) => {\r\n        let dontDisplay = value.dontDisplay\r\n        let displayAfter = value.displayAfter\r\n        if (displayAfter) {\r\n            const [day, month, year] = displayAfter.split('/')\r\n            displayAfter = `${year}-${month}-${day}`\r\n            \r\n        }\r\n        let date = new Date().getTime()\r\n        let afterDate = Date.parse(displayAfter)\r\n        let timeUntil = afterDate - date\r\n        if ((!dontDisplay && !displayAfter) || (timeUntil <= 0)) return <Item key={idx}  isOpen={isAllOpen} changes={value.modifications} date={value.isNext ? `Planned for ${value.date}` : value.date} version={value.isNext ? 'Next update' : value.version} title={value.title}> <p>{value.info}</p> </Item>\r\n    })\r\n\r\n    return (\r\n        <div className='changeLog'>\r\n            <div className='changeLogMenuItems'>\r\n                <div className='openAllChangesButton clickable' onClick={() => setIsAllOpen(!isAllOpen)}>{isAllOpen ? 'Close All' : 'Open All'}</div>\r\n                <img className='homepage-img' src={icon} alt='AlgoV' width='100' height='50'/>\r\n                <div className='openAllChangesButton clickable' onClick={() => setIsNewestFirst(!isNewestFirst)}>{isNewestFirst ? 'Order Oldest to Newest' : 'Order Newest to Oldest'}</div>\r\n            </div>\r\n            <Container titleBgColor='' titleTxtColor='' infoBgColor='' infoTxtColor=''>\r\n                {changeItems}\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomePage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts",["151"],"\r\nfunction sort(array: any, animations: any): any {\r\n    let sortedArray = array.slice()\r\n    let swaps = 0\r\n\r\n    for (let i = 0; i < Math.floor(sortedArray.length / 2); i++){\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$CHECKING\"])\r\n        let tmp = sortedArray[i]\r\n        sortedArray[i] = sortedArray[sortedArray.length-1-i]\r\n        sortedArray[sortedArray.length-1-i] = tmp\r\n        swaps++\r\n        animations.push([\"swap\", i, (sortedArray.length-1-i)])\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [(Math.ceil(sortedArray.length / 2)) - 1], \"$DONE\"])\r\n\r\n    return [sortedArray, animations, swaps]\r\n\r\n\r\n}\r\n\r\nfunction reverseArray(array: number[]){\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n    let swaps:number\r\n\r\n\r\n    [sortedArray, animations, swaps] = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", 0])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default reverseArray","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx",["152","153"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\LatestChangesCard\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.jsx",["154","155","156"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport BarsPage from './pages/BarsPage';\n\n\nimport {HashRouter as Router, Redirect, Route, Switch, useHistory} from 'react-router-dom'\n\nimport GridPage from './pages/GridPage';\nimport HomePage from './pages/HomePage';\nimport UnavailablePage from './pages/UnavailablePage';\nimport changelogData from './data/changelogData.json'\nimport LatestChangesCard from './components/LatestChangesCard';\nimport vars from './data/vars.json'\nimport DocsPage from './pages/DocsPage';\nconst allowInDevPages = vars.devMode\nconst currentVersion = vars.versionNumber\nconst versionID = vars.lastestChangeID\n\nfunction App() {\n  const [showNewVersion, setShowNewVersion] = useState(false)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n    let version = document.cookie.split('; ').find(row => row.startsWith('version='))\n    if (!version || version == ''){\n      version = 0\n    } else {\n      version = version.split('=')[1].split('.')\n      if (version.length > 2) version.pop()\n      version = version.join('')\n      console.log(version)\n    }\n    console.log(version)\n    let curVer = currentVersion.split('.')\n    if (curVer.length > 2) curVer.pop()\n    curVer = curVer.join('')\n    console.log(curVer)\n    if (parseInt(curVer) > parseInt(version)){\n        setShowNewVersion(true)\n    }\n    document.cookie = `version=${currentVersion}`\n  },[])\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/bars'>\n            <BarsPage />\n          </Route>\n          <Route path='/sort'><Redirect to='/bars' /> </Route>\n\n          <Route path='/grid'>\n            {!allowInDevPages ? <UnavailablePage/> : null}\n            <GridPage />\n          </Route>\n          <Route path='/pathfind'><Redirect to='/grid' /> </Route>\n\n          <Route path='/docs'>\n            <DocsPage />\n          </Route>\n\n          <Route exact path='/'>\n            <HomePage />\n          </Route>\n\n          <Route>\n            <UnavailablePage/>\n          </Route>\n\n        </Switch>\n        \n        <Menu isLoggedIn={isLoggedIn}/>\n        {showNewVersion ? <LatestChangesCard closeFunc={setShowNewVersion} isOpen={true} changes={changelogData[versionID].modifications} date={changelogData[versionID].date} version={changelogData[versionID].version} title={changelogData[versionID].title}> <p>{changelogData[versionID].info}</p> </LatestChangesCard>: null}\n        \n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\UnavailablePage.jsx",["157"],"import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport './UnavailablePageStyle.css'\r\nfunction InDevPage(props){\r\n    let history = useHistory()\r\n    console.log(history)\r\n    return (\r\n        <div className='inDevPage'>\r\n            <div className='InDevDiv'>\r\n                <i className=\"material-icons no-icon\">not_interested</i>\r\n                <h1 className='inDevPageh1'>{`${history.location.pathname} is unavailable`}</h1>\r\n                <p className='inDevPagep'>This page does not exist or is under maintenance. Check back again later.</p>\r\n                <Link to='/'><span className='inDevGoHomeLink'>Go Home</span></Link>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InDevPage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\GridPage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\BarsPage.tsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\DocsPage\\index.jsx",["158"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\data\\docs.js",["159"],{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":31,"column":41,"nodeType":"166","messageId":"167","endLine":31,"endColumn":43},{"ruleId":"168","severity":1,"message":"169","line":62,"column":8,"nodeType":"170","endLine":62,"endColumn":10,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":70,"column":17,"nodeType":"174","messageId":"175","endLine":70,"endColumn":25},{"ruleId":"164","severity":1,"message":"165","line":153,"column":29,"nodeType":"166","messageId":"167","endLine":153,"endColumn":31},{"ruleId":"164","severity":1,"message":"165","line":154,"column":29,"nodeType":"166","messageId":"167","endLine":154,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":210,"column":35,"nodeType":"178","messageId":"179","endLine":210,"endColumn":37},{"ruleId":"164","severity":1,"message":"180","line":210,"column":47,"nodeType":"166","messageId":"167","endLine":210,"endColumn":49},{"ruleId":"176","severity":1,"message":"177","line":210,"column":52,"nodeType":"178","messageId":"179","endLine":210,"endColumn":54},{"ruleId":"176","severity":1,"message":"181","line":210,"column":52,"nodeType":"178","messageId":"179","endLine":210,"endColumn":54},{"ruleId":"176","severity":1,"message":"181","line":210,"column":84,"nodeType":"178","messageId":"179","endLine":210,"endColumn":86},{"ruleId":"164","severity":1,"message":"180","line":210,"column":96,"nodeType":"166","messageId":"167","endLine":210,"endColumn":98},{"ruleId":"164","severity":1,"message":"165","line":211,"column":34,"nodeType":"166","messageId":"167","endLine":211,"endColumn":36},{"ruleId":"164","severity":1,"message":"165","line":213,"column":34,"nodeType":"166","messageId":"167","endLine":213,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":250,"column":34,"nodeType":"178","messageId":"179","endLine":250,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":250,"column":51,"nodeType":"178","messageId":"179","endLine":250,"endColumn":53},{"ruleId":"176","severity":1,"message":"177","line":251,"column":46,"nodeType":"178","messageId":"179","endLine":251,"endColumn":48},{"ruleId":"176","severity":1,"message":"177","line":251,"column":75,"nodeType":"178","messageId":"179","endLine":251,"endColumn":77},{"ruleId":"164","severity":1,"message":"165","line":347,"column":38,"nodeType":"166","messageId":"167","endLine":347,"endColumn":40},{"ruleId":"182","severity":1,"message":"183","line":402,"column":29,"nodeType":"184","messageId":"185","endLine":403,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":409,"column":29,"nodeType":"184","messageId":"185","endLine":410,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":416,"column":29,"nodeType":"186","messageId":"185","endLine":416,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":436,"column":21,"nodeType":"186","messageId":"185","endLine":436,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":45,"column":10,"nodeType":"174","messageId":"175","endLine":45,"endColumn":21},{"ruleId":"187","severity":1,"message":"189","line":45,"column":35,"nodeType":"174","messageId":"175","endLine":45,"endColumn":42},{"ruleId":"187","severity":1,"message":"188","line":55,"column":10,"nodeType":"174","messageId":"175","endLine":55,"endColumn":21},{"ruleId":"187","severity":1,"message":"189","line":55,"column":35,"nodeType":"174","messageId":"175","endLine":55,"endColumn":42},{"ruleId":"187","severity":1,"message":"188","line":48,"column":10,"nodeType":"174","messageId":"175","endLine":48,"endColumn":21},{"ruleId":"187","severity":1,"message":"189","line":48,"column":35,"nodeType":"174","messageId":"175","endLine":48,"endColumn":42},{"ruleId":"172","severity":1,"message":"190","line":8,"column":25,"nodeType":"174","messageId":"175","endLine":8,"endColumn":39},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"187","severity":1,"message":"188","line":12,"column":9,"nodeType":"174","messageId":"175","endLine":12,"endColumn":20},{"ruleId":"187","severity":1,"message":"188","line":70,"column":9,"nodeType":"174","messageId":"175","endLine":70,"endColumn":20},{"ruleId":"187","severity":1,"message":"188","line":55,"column":5,"nodeType":"174","messageId":"175","endLine":55,"endColumn":16},{"ruleId":"172","severity":1,"message":"191","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":12},{"ruleId":"172","severity":1,"message":"192","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":18},{"ruleId":"193","severity":1,"message":"194","line":20,"column":55,"nodeType":"195","messageId":"196","endLine":20,"endColumn":57},{"ruleId":"187","severity":1,"message":"188","line":30,"column":6,"nodeType":"174","messageId":"175","endLine":30,"endColumn":17},{"ruleId":"172","severity":1,"message":"197","line":1,"column":8,"nodeType":"174","messageId":"175","endLine":1,"endColumn":13},{"ruleId":"172","severity":1,"message":"198","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"199","line":7,"column":56,"nodeType":"174","messageId":"175","endLine":7,"endColumn":66},{"ruleId":"172","severity":1,"message":"200","line":22,"column":22,"nodeType":"174","messageId":"175","endLine":22,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":26,"column":29,"nodeType":"166","messageId":"167","endLine":26,"endColumn":31},{"ruleId":"172","severity":1,"message":"198","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"201","severity":1,"message":"202","line":15,"column":19,"nodeType":"203","messageId":"204","endLine":15,"endColumn":40,"fix":"205"},{"ruleId":"206","severity":1,"message":"207","line":1392,"column":32,"nodeType":"170","messageId":"208","endLine":1392,"endColumn":35},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AnimateEngine' and 'numBars'. Either include them or remove the dependency array.","ArrayExpression",["211"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Expected '!==' and instead saw '!='.","Unexpected mix of '||' and '&&'.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","BreakStatement","@typescript-eslint/no-unused-vars","'sortedArray' is assigned a value but never used.","'runTime' is assigned a value but never used.","'setIsOpenHover' is assigned a value but never used.","'vars' is defined but never used.","'Redirect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","'setIsLoggedIn' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property search.","MemberExpression","unexpectedWhitespace",{"range":"212","text":"213"},"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},[381,383],".","Update the dependencies array to be: [AnimateEngine, numBars]",{"range":"216","text":"217"},[2462,2464],"[AnimateEngine, numBars]"]