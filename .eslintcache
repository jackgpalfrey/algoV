[{"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx":"1","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.tsx":"2","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\SortingVisualiserPage.tsx":"3","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx":"4","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts":"5","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts":"6","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts":"7","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx":"8","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts":"9","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts":"10","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts":"11","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx":"12","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\AlgoriComputePage.jsx":"13","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\PathfindingVisualiserPage.jsx":"14","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx":"15","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts":"16","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx":"17","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx":"18","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx":"19","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx":"20","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx":"21","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\InDevPage.jsx":"22"},{"size":231,"mtime":1611443855374,"results":"23","hashOfConfig":"24"},{"size":1224,"mtime":1614808438927,"results":"25","hashOfConfig":"24"},{"size":250,"mtime":1611423060434,"results":"26","hashOfConfig":"24"},{"size":24330,"mtime":1614815420153,"results":"27","hashOfConfig":"24"},{"size":1596,"mtime":1614812593244,"results":"28","hashOfConfig":"24"},{"size":1780,"mtime":1614813972509,"results":"29","hashOfConfig":"24"},{"size":1561,"mtime":1614813439524,"results":"30","hashOfConfig":"24"},{"size":2918,"mtime":1614809761040,"results":"31","hashOfConfig":"24"},{"size":563,"mtime":1611930831467,"results":"32","hashOfConfig":"24"},{"size":2376,"mtime":1614815718418,"results":"33","hashOfConfig":"24"},{"size":2072,"mtime":1611924758095,"results":"34","hashOfConfig":"24"},{"size":1727,"mtime":1614811032677,"results":"35","hashOfConfig":"24"},{"size":133,"mtime":1611570216976,"results":"36","hashOfConfig":"24"},{"size":228,"mtime":1612179415998,"results":"37","hashOfConfig":"24"},{"size":1605,"mtime":1612113771293,"results":"38","hashOfConfig":"24"},{"size":1459,"mtime":1614814731519,"results":"39","hashOfConfig":"24"},{"size":67,"mtime":1611845343871,"results":"40","hashOfConfig":"24"},{"size":1451,"mtime":1614802677799,"results":"41","hashOfConfig":"24"},{"size":235,"mtime":1611847446709,"results":"42","hashOfConfig":"24"},{"size":1876,"mtime":1612186167297,"results":"43","hashOfConfig":"24"},{"size":24762,"mtime":1614256789976,"results":"44","hashOfConfig":"24"},{"size":426,"mtime":1614811482834,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"17wj5ys",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx",[],["97","98"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.tsx",["99"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\SortingVisualiserPage.tsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts",["122","123"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts",["124","125"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts",["126","127"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx",["128"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts",["129","130"],"const COLORS = {\r\n    BASE: '#035efc',\r\n    BEING_CHECKED: '#fc0388',\r\n    DONE: '#15ba09'\r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n \r\n\r\n\r\n}\r\n\r\nfunction quickSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n\r\n\r\n    let sortedArray = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default quickSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts",["131","132"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts",["133","134","135","136"],"import { create } from \"domain\"\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc',\r\n    BEING_CHECKED: '#fc0388',\r\n    DONE: '#15ba09'\r\n}\r\n\r\nfunction swap(array: any, idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push({command: 'swap',id1: array[idx1][0], id2: array[idx2][0]})\r\n}\r\n\r\n\r\nfunction mergeArrays(leftArray: any, rightArray: any, animations: any){\r\n    let leftIndex = 0 , rightIndex = 0\r\n\r\n    console.log(leftArray)\r\n\r\n    while(leftIndex < leftArray.length && rightIndex < rightArray.length){\r\n        animations.push({command: 'swap',id1: rightArray[rightIndex][0], id2: rightArray[rightIndex][0]})\r\n        let tmp = leftArray[leftIndex]\r\n        leftArray[leftIndex] = rightArray[rightIndex]\r\n        rightArray[rightIndex] = tmp\r\n        if (leftArray[leftIndex][1] < rightArray[rightIndex][1]){\r\n            leftIndex++\r\n        } else {\r\n            rightIndex++\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return \r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n    if (array.length <= 1) return array\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n\r\n    const left = array.slice(0,middle);\r\n    const right = array.slice(middle);\r\n\r\n    return mergeArrays(sort(left,animations), sort(right,animations),animations)\r\n\r\n}\r\n\r\n\r\nfunction createIndexedArray(array: number[]){\r\n    let indexedArray = []\r\n    for (let i = 0; i < array.length - 1; i++){\r\n        indexedArray.push([i,array[i]])\r\n    }\r\n\r\n    return indexedArray\r\n}\r\n\r\nfunction mergeSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n    let indexedArray: number[][] = createIndexedArray(array)\r\n\r\n\r\n    sortedArray = sort(indexedArray,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    console.log(animations)\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default mergeSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\AlgoriComputePage.jsx",[],["137","138"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\PathfindingVisualiserPage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx",["139","140"],"import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Container from '../components/ChangeLog/Container'\r\nimport Item from '../components/ChangeLog/Item'\r\n\r\n\r\nimport changeLogData from '../data/changelogData.json'\r\n\r\n\r\nfunction HomePage(){\r\n    const [isAllOpen, setIsAllOpen] = useState(false)\r\n    const [isNewestFirst, setIsNewestFirst] = useState(true)\r\n    console.log(isAllOpen)\r\n\r\n    let changeLogItems = changeLogData.slice()\r\n    if (isNewestFirst) changeLogItems = changeLogItems.reverse()\r\n\r\n    let changeItems = changeLogItems.map((value, idx) => {\r\n        let dontDisplay = false\r\n        dontDisplay = value.dontDisplay\r\n        if (!dontDisplay) return <Item key={idx}  isOpen={isAllOpen} changes={value.modifications} date={value.isNext ? `Planned for ${value.date}` : value.date} version={value.isNext ? 'Next update' : value.version} title={value.title}> <p>{value.info}</p> </Item>\r\n    \r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className='changeLog'>\r\n            <div className='changeLogMenuItems'>\r\n                <div className='openAllChangesButton' onClick={() => setIsAllOpen(!isAllOpen)}>{isAllOpen ? 'Close All' : 'Open All'}</div>\r\n                <div className='openAllChangesButton' onClick={() => setIsNewestFirst(!isNewestFirst)}>{isNewestFirst ? 'Order Oldest to Newest' : 'Order Newest to Oldest'}</div>\r\n            </div>\r\n            <Container titleBgColor='' titleTxtColor='' infoBgColor='' infoTxtColor=''>\r\n                {changeItems}\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomePage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts",["141"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx",["142","143"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx",["144"],"import React, { useEffect, useState } from 'react'\r\nimport './style.css'\r\n\r\nfunction Console(props){\r\n    const [isOpen, setIsOpen] = useState(props.display)\r\n    const [textColor, setTextColor] = useState('white')\r\n    const [commandText, setCommandText] = useState('')\r\n    const [responseText, setResponseText] = useState('')\r\n\r\n    useEffect(() => {\r\n        setIsOpen(props.display)\r\n    }, [props.display])\r\n\r\n    function responseHandler(response) {\r\n        response[0] === 'ERROR' ? setTextColor('red') : setTextColor('green')\r\n        setResponseText(`${response[1]}`)\r\n        setTimeout(() => {\r\n            setResponseText('')\r\n        }, 1000)\r\n        console.log(response[1])\r\n    }\r\n\r\n    function handleConsole(e){\r\n        if (e.key != 'Enter') return\r\n        let command = commandText.replaceAll(\"'\",'\"')\r\n        console.log(`Command: ${command}`)\r\n        try {\r\n            let jsonCommand = JSON.parse(command)\r\n            let response = props.AnimateEngine(jsonCommand)\r\n            responseHandler(response)\r\n        } catch (error) {\r\n            console.log(error)\r\n            responseHandler([\"ERROR\", \"Invalid Syntax\"])\r\n        }\r\n    }\r\n\r\n    function consoleChangeHandler(e){\r\n        if (e.target.value.includes('cls')) {\r\n            setCommandText('')\r\n        } else {\r\n            setCommandText(e.target.value)\r\n        }\r\n        \r\n        setTextColor('white')\r\n    }\r\n\r\n    let terminal = (\r\n        <div className='consoleBox'>\r\n            <input placeholder='Console' value={commandText} onChange={consoleChangeHandler} style={{color: textColor}}className='console' onKeyDown={handleConsole}></input>\r\n            <p style={{color: textColor}}>{responseText}</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {isOpen ? terminal : null}\r\n        </div>\r\n        \r\n    )\r\n        \r\n}\r\n\r\nexport default Console","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172"],"import React, { useEffect, useState } from 'react'\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport PathfindingVisualiserPage from '../../pages/PathfindingVisualiserPage'\r\nimport Console from '../Console'\r\nimport InfoCard from '../InfoCard'\r\nimport './style.css'\r\n\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc', \r\n    CHECKING: 'red',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\nfunction PathfindingVisualiser(props){\r\n\r\n    //#region State Creation \r\n    const cookieData = document.cookie.replace(';','').replace(' ','').split(',')\r\n    const [grid, setGrid] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [swaps, setSwaps] = useState(0)\r\n    const [comparisons, setComparisons] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(cookieData[1] || 'bubbleSort')\r\n    const [isTerminalOpen, setIsTerminalOpen] = useState(false)\r\n    const [activeTimeouts, setActiveTimeouts] = useState([])\r\n    const [activeIntervals, setActiveIntervals] = useState([])\r\n\r\n    //#endregion\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        //AnimateEngine([\"resetArray\",numBars])\r\n        resetGrid()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    function AnimateEngine(command){\r\n        try {\r\n            let commandCode = command[0]\r\n            \r\n            let response = [\"PENDING\", \"In progress\"]\r\n            switch(commandCode){\r\n                case 'setState':\r\n                        let indexArray = command[1]\r\n                        let type = command[2]\r\n                        let data = command[3]\r\n\r\n                        if (!indexArray || !Array.isArray(indexArray)) return [\"ERROR\", \"Invalid Indexs\"]\r\n                        if (!type || typeof type !== 'string') return [\"ERROR\", \"Invalid Type\"]\r\n                        \r\n                        type = type.toLowerCase()\r\n\r\n                        if (type === 'color'){\r\n                            if(typeof data !== 'string') return [\"ERROR\", \"Invalid Data\"]\r\n                            if (data.includes('$')) data = COLORS[data.replace('$','')]\r\n                        } else if (type === 'value'){\r\n                            if(typeof data !== 'number') return [\"ERROR\", \"Invalid Data\"]\r\n                        } else {\r\n                            return [\"ERROR\", \"Invalid Type\"]\r\n                        }\r\n\r\n\r\n                        setGrid(prevState => {\r\n                            let newArray = prevState.slice()\r\n                            \r\n                            indexArray.forEach((idx) => {\r\n                                if (!Array.isArray(idx)) {\r\n                                    return newArray\r\n\r\n                                } else if (idx.length === 2 && (typeof idx[0] === 'number' || idx[0] === '$MID')&& (typeof idx[1] === 'number' || idx[1] === '$MID') && idx[0] < newArray.length && idx[1] < newArray.length){\r\n                                    idx.forEach((indexVal, indexIdx) => {\r\n                                        if (idx[indexIdx] < 0 && Math.abs(idx[indexIdx]) < newArray.length){\r\n                                            console.log(\"SUB0\")\r\n                                            if (indexIdx === 0) idx[indexIdx] = newArray.length - idx[indexIdx]\r\n                                            else if (indexIdx === 1) idx[indexIdx] = newArray[0].length - idx[indexIdx]\r\n                                            else console.log(\"TEST\")\r\n                                        } \r\n                                        else if (idx[indexIdx] === '$MID') idx[indexIdx] = Math.floor(newArray.length / 2)\r\n                                    })\r\n\r\n                                    newArray[idx[0]][idx[1]][type] = data\r\n                                } else if (idx === '$ALL'){\r\n                                    newArray.forEach((xVal, xPos) => {\r\n                                        newArray[xPos].forEach((yVal, yPos) => {\r\n                                            newArray[xPos][yPos][type] = data\r\n                                        })\r\n                                    })\r\n                                } else if (idx === '$QUAD1'){\r\n                                    for (let x = 0; x < Math.floor(newArray.length / 2); x++){\r\n                                        for (let y = 0; y < Math.floor(newArray.length / 2); y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                } else if (idx === '$QUAD2'){\r\n                                    for (let x = Math.floor(newArray.length / 2); x < newArray.length; x++){\r\n                                        for (let y = 0; y < Math.floor(newArray.length / 2); y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                } else if (idx === '$QUAD3'){\r\n                                    for (let x = 0; x < Math.floor(newArray.length / 2); x++){\r\n                                        for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                } else if (idx === '$QUAD4'){\r\n                                    for (let x = Math.floor(newArray.length / 2); x < newArray.length; x++){\r\n                                        for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                            newArray[x][y][type] = data\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //\r\n                                \r\n                            });\r\n                            \r\n                            return newArray\r\n                        });\r\n                            \r\n\r\n                    break;\r\n                \r\n                case 'sc':\r\n                case 'setColor': // Sets color of bars. Syntax: [\"setColor\",[array of ids or $ALL, $LHALF, $RHALF], \"valid css color OR valid inbuilt variable prefixed with $\"]\r\n                    let idxes = command[1]\r\n                    let color = command[2]\r\n                    \r\n                    AnimateEngine([\"setState\", idxes, 'color', color])\r\n                    break;\r\n                \r\n                case 'swap':\r\n                    let id1 = command[1]\r\n                    let id2 = command[2]\r\n                    if (!id1 && id1 !== 0 || typeof id1 !== 'number') return [\"ERROR\", \"Invalid id1\"]\r\n                    if (!id2 && id1 !== 0 || typeof id2 !== 'number') return [\"ERROR\", \"Invalid id2\"]\r\n                    setGrid(prevState => {\r\n                        id1 = command[1]\r\n                        id2 = command[2]\r\n                        let newArray = prevState.slice()\r\n\r\n                        if (id1 < 0) id1 = newArray.length - Math.abs(id1)\r\n                        if (id2 < 0) id2 = newArray.length - Math.abs(id2)\r\n                        \r\n                        if (id1 >= 0 && id1 < newArray.length && id2 >= 0 && id2 < newArray.length){\r\n                            const tmp1 = {...newArray[id1]}\r\n                            const tmp2 = {...newArray[id2]}\r\n                            newArray[id1] = tmp2\r\n                            newArray[id2] = tmp1\r\n                        }\r\n                        \r\n        \r\n                        return newArray\r\n                    })\r\n        \r\n                    break;\r\n                \r\n                case 'setValue':\r\n                    let idxs = command[1]\r\n                    let value = command[2]\r\n\r\n                    AnimateEngine([\"setState\", idxs, 'value', value])\r\n                    break;\r\n                \r\n                case 'setArray':\r\n                    let values = command[1]\r\n                    let colorCode = command[2]\r\n\r\n                    if (!values || !Array.isArray(values)) return [\"ERROR\", \"Invalid Values\"]\r\n                    if (!colorCode || typeof colorCode !== 'string') return [\"ERROR\", \"Invalid Color\"]\r\n                    setGrid(prevState => {\r\n                        let newArray = []\r\n                        let color = command[2]\r\n                        if (color.includes('$')) color = COLORS[color.replace('$','')]\r\n        \r\n                        values.forEach(value => {\r\n                        if (typeof value == \"number\"){\r\n                                newArray.push({value: value, color: color})\r\n                            }\r\n                            \r\n                        });\r\n                        return newArray\r\n                    })\r\n                    break;\r\n                        \r\n                case 'do':\r\n                    let subCommands = command[1]\r\n                    let interval = command[2]\r\n\r\n                    if (!subCommands || !Array.isArray(subCommands)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!interval && interval != 0 || typeof interval !== 'number' && interval != '$userSet' || interval < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n                    if (interval == '$userSet') interval = animationSpeed\r\n                   \r\n                    if (interval == 0) {\r\n                        for (let i = 0; i < subCommands.length; i++){\r\n                            AnimateEngine(subCommands[i])\r\n                        }\r\n                        break; \r\n                    }\r\n\r\n\r\n                    \r\n\r\n                    AnimateEngine(subCommands[0])\r\n                    let currentCommandIdx = 1\r\n\r\n                    let intervalID = setInterval(() => {\r\n                        if (currentCommandIdx >= subCommands.length){\r\n                            clearInterval(intervalID)\r\n                            //AnimateEngine([\"clearLoop\", `${intervalID}`])\r\n                            return\r\n                        }\r\n\r\n                        AnimateEngine(subCommands[currentCommandIdx])\r\n                        currentCommandIdx++\r\n                    }, interval)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curIntervals = prevState.slice()\r\n                        curIntervals.push(intervalID)\r\n                        return curIntervals\r\n                    })\r\n                    break;\r\n                \r\n                case 'doFor':\r\n                    let commandsToRun = command[1]\r\n                    let repeats = command[2]\r\n                    let intervalBetweenEach = command[3]\r\n\r\n                    if (!commandsToRun || !Array.isArray(commandsToRun)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!repeats && repeats !== 0 || typeof repeats !== 'number' || repeats < 0) return [\"ERROR\", \"Invalid Repeats\"]\r\n                    if (!intervalBetweenEach && intervalBetweenEach !== 0 || (typeof intervalBetweenEach !== 'number' && intervalBetweenEach !== '$userSet') || intervalBetweenEach < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n\r\n                    if (intervalBetweenEach === '$userSet'){\r\n                        intervalBetweenEach = parseInt(animationSpeed)\r\n                    }\r\n                    \r\n                    let currentIteration = 1\r\n\r\n                    AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n                    \r\n                    let intervalIdentifier = setInterval(() => {\r\n                        if (currentIteration >= repeats && repeats !== 0) {\r\n                            clearInterval(intervalIdentifier)\r\n                            return;\r\n                        }\r\n\r\n                        AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n\r\n                        currentIteration++\r\n                    }, intervalBetweenEach * commandsToRun.length)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curAIntervals = prevState.slice()\r\n                        curAIntervals.push(intervalIdentifier)\r\n                        return curAIntervals\r\n                    })\r\n                    break;\r\n\r\n                case 'doSim':\r\n                    let toRunCommands = command[1]\r\n                    AnimateEngine([\"do\", toRunCommands, 0])\r\n                    break;\r\n\r\n                case 'doIn':\r\n                    let commandsToExecute = command[1]\r\n                    let waitFor = command[2]\r\n\r\n                    if (!commandsToExecute || !Array.isArray(commandsToExecute)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!waitFor || typeof waitFor !== 'number' || waitFor <= 0) return [\"ERROR\", \"Wait Time Invalid\"]\r\n                    let timeoutID = setTimeout(() => {\r\n                        command[1].forEach((value) => {\r\n                            console.log(value)\r\n                            AnimateEngine(value)\r\n                        })\r\n                    }, command[2] )\r\n\r\n                    setActiveTimeouts(prevState => {\r\n                        let curTimeouts = prevState.slice()\r\n                        curTimeouts.push(timeoutID)\r\n                        return curTimeouts\r\n                    })\r\n\r\n                    break;\r\n                \r\n                case 'ra':\r\n                case 'resetArray':\r\n                    \r\n                    let numOfBars = command[1]\r\n                    //if (!numOfBars) numOfBars = numBars\r\n                    if (typeof numOfBars !== 'number') return [\"ERROR\", \"Invalid Number of bars\"]\r\n                    let Randvalues = []\r\n                    for (let i = 0; i < numOfBars; i++){\r\n                        Randvalues.push(Math.round(Math.random() * 60) + 8)\r\n                    }\r\n                    AnimateEngine([\"setArray\",Randvalues,\"$BASE\"])\r\n                    break;\r\n                \r\n                case 'setRunTimeDisplay':\r\n                    let newRuntime = command[1]\r\n                    if (!newRuntime) return [\"ERROR\", \"Invalid Runtime\"]\r\n                    setRunTime(newRuntime)\r\n                    break;\r\n\r\n                case 'setComparisonsDisplay':\r\n                    let newComparisons = command[1]\r\n                    if (!newComparisons) return [\"ERROR\", \"Invalid Comparisons\"]\r\n                    setComparisons(newComparisons)\r\n                    break;\r\n\r\n                case 'setSwapsDisplay':\r\n                    let newSwaps = command[1]\r\n                    if (!newSwaps) return [\"ERROR\", \"Invalid Swaps\"]\r\n                    setSwaps(newSwaps)\r\n                    break;\r\n\r\n                case 'startAnimation':\r\n                    setAnimationActive(true)\r\n                    break;\r\n\r\n                case 'endAnimation':\r\n                    setAnimationActive(false)\r\n                    break;\r\n\r\n                case 'clearLoop': //FIXME: Dosen't work\r\n                    let specificLoop = command[1]\r\n                    let activeLoops = activeIntervals.slice()\r\n                    if (!specificLoop && specificLoop !== 0){\r\n                        let ALLen = activeLoops.length\r\n                        for (let i = 0; i < ALLen; i++){\r\n                            clearInterval(activeLoops.pop())\r\n                        }\r\n                    } else if (typeof specificLoop === 'number') {\r\n                        let loop = activeLoops.splice(specificLoop, 1)[0]\r\n                        console.log(loop)\r\n                    } else if (typeof specificLoop === 'string'){\r\n                        let loop = activeLoops.indexOf(parseInt(specificLoop))\r\n                        console.log(loop)\r\n                    }\r\n\r\n                    setActiveIntervals(activeLoops)\r\n                    \r\n                    \r\n                    break;\r\n\r\n                case 'clearWaits': //FIXME: Dosen't work\r\n                    let activeWaits = activeTimeouts.slice()\r\n                    let AWLen = activeWaits.length\r\n                    for (let i = 0; i < AWLen; i++){\r\n                        clearTimeout(activeWaits.pop())\r\n                    }\r\n                    break;\r\n                \r\n                case 'ct':\r\n                case 'clearTimers': //FIXME: Dosen't work\r\n                    AnimateEngine([\"clearLoops\"])\r\n                    AnimateEngine([\"clearWaits\"])\r\n                    break;\r\n                \r\n                case 'r':\r\n                case 'reload':\r\n                    window.location.reload()\r\n                    break;\r\n                    \r\n                case 'executeInternalAnimation':\r\n                        break;\r\n                //     let animationKey = command[1]\r\n                //     console.log(animationKey)\r\n                //     if (!animationKey || typeof animationKey !== 'string' ) return [\"ERROR\", \"Invalid Animation Key\"]\r\n                //     let resultData = []\r\n                //     let isLegacy = false\r\n                //     switch(animationKey){\r\n                //         case 'bubbleSort':\r\n                //             resultData = bubbleSort(getNumbersFromArrayState())\r\n                //             break;\r\n                //         case 'selectionSort':\r\n                //             resultData = selectionSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'insertionSort':\r\n                //             resultData = insertionSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'quickSort':\r\n                //             return alert('Currently Unavailable')\r\n                //             resultData = quickSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'heapSort':\r\n                //             resultData = heapSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'mergeSort':\r\n                //             return alert('Currently Unavailable')\r\n                //             resultData = mergeSort(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         case 'reverseArray':\r\n                //             resultData = reverseArray(getNumbersFromArrayState())\r\n                //             isLegacy = true\r\n                //             break;\r\n                //         default:\r\n                //             return [\"ERROR\", \"Invalid Animation Key\"]\r\n                //             break;\r\n                //     }\r\n\r\n                //     // Legacy\r\n                //     if (isLegacy){\r\n                //         let [animations,runTime] = resultData\r\n                //         AnimateEngine([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n                //         animator(animations,animationSpeed)\r\n                //     } else {\r\n                //         // NEW Animation System\r\n                //         AnimateEngine([\"doSim\", [resultData]])\r\n                //     }\r\n\r\n                //     break;\r\n                // default:\r\n                    return [\"ERROR\", \"Unknown Command\"]\r\n                    break;\r\n            }\r\n\r\n            return [\"SUCCESS\", \"Exectuted Successfully\"]\r\n\r\n        } catch (error){\r\n            console.error(error)\r\n            return [\"ERROR\", \"Try Failed\"]\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    function resetGrid(){\r\n        let boxSize = 20\r\n        let xNum = ((window.innerWidth - 30) / boxSize)\r\n        let yNum = ((window.innerHeight - 100) / boxSize)\r\n        let defaultItem = {color: 'black', value: '2'}\r\n\r\n        let newGrid = []\r\n        for (let y = 0; y < yNum; y++){\r\n            let newCol = []\r\n            for (let x = 0; x < xNum; x++){\r\n                let item = {\r\n                    color: 'white',\r\n                    type: 'OPEN'\r\n                }\r\n                newCol.push({...defaultItem})\r\n            }\r\n            newGrid.push(newCol)\r\n        }\r\n\r\n        return setGrid(newGrid)\r\n    }\r\n\r\n    function createDivGrid(){\r\n        let divGrid = []\r\n        let width = 40\r\n        let height = 40\r\n        try {\r\n            width = ((window.innerWidth - 30) / grid[0].length) - 1\r\n            height = ((window.innerHeight - 100) / grid.length) - 1\r\n        } catch {\r\n            console.log(\"No Grid Created\")\r\n        }\r\n        grid.forEach((itemx,idxx) => {\r\n            let col = grid[idxx]\r\n            let divCol = col.map((item, idxy) => {\r\n                return (<div onMouseDown={boxClickHandler} className='node' key={`${idxx}-${idxy}`} id={`${idxx}-${idxy}`} style={{backgroundColor: item.color, width: width, height: height}}></div>)\r\n            })\r\n\r\n            divGrid.push(<div className='row'>{divCol}</div>)\r\n        })\r\n        \r\n\r\n        return divGrid\r\n    }\r\n\r\n    function boxClickHandler(e){\r\n        console.log(\"FIRE\")\r\n        setGrid(prevState => {\r\n            console.log(e)\r\n            let newGrid = prevState.slice()\r\n            let pos = e.target.id.split('-')\r\n            let posX = parseInt(pos[0])\r\n            let posY = parseInt(pos[1])\r\n            console.log(pos)\r\n            if (newGrid[posX][posY].color === 'red') newGrid[posX][posY].color = 'red'\r\n            else newGrid[posX][posY].color = 'red'\r\n            console.log(newGrid)\r\n            return newGrid\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    function handleSortClick(){\r\n        return ''\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n        \r\n            <div className='grid-container'>\r\n                <div className=\"grid-container-inner\">\r\n                    {createDivGrid()}\r\n                </div>\r\n            </div>\r\n            <nav>\r\n            <i className='material-icons consoleButton' onClick={() => setIsTerminalOpen(!isTerminalOpen)}>code</i>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>Animation Time ({animationSpeed}ms) </p>\r\n                <input disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(parseInt(e.target.value)); \r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {resetGrid()}}} className={!animationActive ? 'button reset' : 'button-disabled reset'}>Reset</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={!animationActive ? 'button sort' : 'button-disabled sort'}>Sort</button>\r\n                <select disabled={animationActive} value={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option value='reverseArray'>(Other)Reverse Array</option>\r\n                </select>\r\n                <p title={`Swaps: ${swaps} \\nComparisons: ${comparisons}`} className={animationActive ? 'timeTaken disabled' : 'timeTaken'}>{runTime !== 0 ? `Time: ${runTime}ms`: `Time: N/A`}</p>\r\n\r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n\r\n            <Console display={isTerminalOpen} AnimateEngine={AnimateEngine}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default PathfindingVisualiser","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\InDevPage.jsx",["173"],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":7,"column":56,"nodeType":"180","messageId":"181","endLine":7,"endColumn":66},{"ruleId":"182","severity":1,"message":"183","line":54,"column":8,"nodeType":"184","endLine":54,"endColumn":10,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":61,"column":17,"nodeType":"180","messageId":"181","endLine":61,"endColumn":25},{"ruleId":"188","severity":1,"message":"189","line":144,"column":29,"nodeType":"190","messageId":"191","endLine":144,"endColumn":31},{"ruleId":"188","severity":1,"message":"189","line":145,"column":29,"nodeType":"190","messageId":"191","endLine":145,"endColumn":31},{"ruleId":"192","severity":1,"message":"193","line":201,"column":35,"nodeType":"194","messageId":"195","endLine":201,"endColumn":37},{"ruleId":"188","severity":1,"message":"196","line":201,"column":47,"nodeType":"190","messageId":"191","endLine":201,"endColumn":49},{"ruleId":"192","severity":1,"message":"193","line":201,"column":52,"nodeType":"194","messageId":"195","endLine":201,"endColumn":54},{"ruleId":"192","severity":1,"message":"197","line":201,"column":52,"nodeType":"194","messageId":"195","endLine":201,"endColumn":54},{"ruleId":"192","severity":1,"message":"197","line":201,"column":84,"nodeType":"194","messageId":"195","endLine":201,"endColumn":86},{"ruleId":"188","severity":1,"message":"196","line":201,"column":96,"nodeType":"190","messageId":"191","endLine":201,"endColumn":98},{"ruleId":"188","severity":1,"message":"189","line":202,"column":34,"nodeType":"190","messageId":"191","endLine":202,"endColumn":36},{"ruleId":"188","severity":1,"message":"189","line":204,"column":34,"nodeType":"190","messageId":"191","endLine":204,"endColumn":36},{"ruleId":"192","severity":1,"message":"193","line":241,"column":34,"nodeType":"194","messageId":"195","endLine":241,"endColumn":36},{"ruleId":"192","severity":1,"message":"193","line":241,"column":51,"nodeType":"194","messageId":"195","endLine":241,"endColumn":53},{"ruleId":"192","severity":1,"message":"193","line":242,"column":46,"nodeType":"194","messageId":"195","endLine":242,"endColumn":48},{"ruleId":"192","severity":1,"message":"193","line":242,"column":75,"nodeType":"194","messageId":"195","endLine":242,"endColumn":77},{"ruleId":"188","severity":1,"message":"189","line":338,"column":38,"nodeType":"190","messageId":"191","endLine":338,"endColumn":40},{"ruleId":"198","severity":1,"message":"199","line":395,"column":29,"nodeType":"200","messageId":"201","endLine":396,"endColumn":35},{"ruleId":"198","severity":1,"message":"199","line":402,"column":29,"nodeType":"200","messageId":"201","endLine":403,"endColumn":35},{"ruleId":"198","severity":1,"message":"199","line":409,"column":29,"nodeType":"202","messageId":"201","endLine":409,"endColumn":35},{"ruleId":"198","severity":1,"message":"199","line":426,"column":21,"nodeType":"202","messageId":"201","endLine":426,"endColumn":27},{"ruleId":"203","severity":1,"message":"204","line":443,"column":9,"nodeType":"205","messageId":"206","endLine":454,"endColumn":10},{"ruleId":"178","severity":1,"message":"207","line":45,"column":10,"nodeType":"180","messageId":"181","endLine":45,"endColumn":21},{"ruleId":"178","severity":1,"message":"208","line":45,"column":35,"nodeType":"180","messageId":"181","endLine":45,"endColumn":42},{"ruleId":"178","severity":1,"message":"207","line":55,"column":10,"nodeType":"180","messageId":"181","endLine":55,"endColumn":21},{"ruleId":"178","severity":1,"message":"208","line":55,"column":35,"nodeType":"180","messageId":"181","endLine":55,"endColumn":42},{"ruleId":"178","severity":1,"message":"207","line":48,"column":10,"nodeType":"180","messageId":"181","endLine":48,"endColumn":21},{"ruleId":"178","severity":1,"message":"208","line":48,"column":35,"nodeType":"180","messageId":"181","endLine":48,"endColumn":42},{"ruleId":"186","severity":1,"message":"209","line":8,"column":25,"nodeType":"180","messageId":"181","endLine":8,"endColumn":39},{"ruleId":"178","severity":1,"message":"210","line":1,"column":7,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"207","line":20,"column":9,"nodeType":"180","messageId":"181","endLine":20,"endColumn":20},{"ruleId":"188","severity":1,"message":"196","line":30,"column":16,"nodeType":"190","messageId":"191","endLine":30,"endColumn":18},{"ruleId":"178","severity":1,"message":"207","line":70,"column":9,"nodeType":"180","messageId":"181","endLine":70,"endColumn":20},{"ruleId":"178","severity":1,"message":"211","line":1,"column":10,"nodeType":"180","messageId":"181","endLine":1,"endColumn":16},{"ruleId":"178","severity":1,"message":"210","line":3,"column":7,"nodeType":"180","messageId":"181","endLine":3,"endColumn":13},{"ruleId":"178","severity":1,"message":"212","line":9,"column":10,"nodeType":"180","messageId":"181","endLine":9,"endColumn":14},{"ruleId":"178","severity":1,"message":"207","line":71,"column":5,"nodeType":"180","messageId":"181","endLine":71,"endColumn":16},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"186","severity":1,"message":"213","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":18},{"ruleId":"214","severity":1,"message":"215","line":18,"column":55,"nodeType":"216","messageId":"217","endLine":18,"endColumn":57},{"ruleId":"178","severity":1,"message":"207","line":30,"column":6,"nodeType":"180","messageId":"181","endLine":30,"endColumn":17},{"ruleId":"186","severity":1,"message":"218","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"186","severity":1,"message":"219","line":1,"column":17,"nodeType":"180","messageId":"181","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"196","line":24,"column":19,"nodeType":"190","messageId":"191","endLine":24,"endColumn":21},{"ruleId":"186","severity":1,"message":"220","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":18},{"ruleId":"186","severity":1,"message":"221","line":3,"column":8,"nodeType":"180","messageId":"181","endLine":3,"endColumn":16},{"ruleId":"186","severity":1,"message":"222","line":4,"column":8,"nodeType":"180","messageId":"181","endLine":4,"endColumn":21},{"ruleId":"186","severity":1,"message":"223","line":5,"column":8,"nodeType":"180","messageId":"181","endLine":5,"endColumn":17},{"ruleId":"186","severity":1,"message":"224","line":6,"column":8,"nodeType":"180","messageId":"181","endLine":6,"endColumn":17},{"ruleId":"186","severity":1,"message":"225","line":7,"column":8,"nodeType":"180","messageId":"181","endLine":7,"endColumn":20},{"ruleId":"186","severity":1,"message":"226","line":8,"column":8,"nodeType":"180","messageId":"181","endLine":8,"endColumn":21},{"ruleId":"186","severity":1,"message":"227","line":9,"column":8,"nodeType":"180","messageId":"181","endLine":9,"endColumn":33},{"ruleId":"186","severity":1,"message":"187","line":57,"column":17,"nodeType":"180","messageId":"181","endLine":57,"endColumn":25},{"ruleId":"203","severity":1,"message":"204","line":58,"column":13,"nodeType":"205","messageId":"206","endLine":436,"endColumn":14},{"ruleId":"192","severity":1,"message":"193","line":150,"column":30,"nodeType":"194","messageId":"195","endLine":150,"endColumn":32},{"ruleId":"192","severity":1,"message":"193","line":150,"column":43,"nodeType":"194","messageId":"195","endLine":150,"endColumn":45},{"ruleId":"192","severity":1,"message":"193","line":151,"column":30,"nodeType":"194","messageId":"195","endLine":151,"endColumn":32},{"ruleId":"192","severity":1,"message":"193","line":151,"column":43,"nodeType":"194","messageId":"195","endLine":151,"endColumn":45},{"ruleId":"192","severity":1,"message":"193","line":206,"column":35,"nodeType":"194","messageId":"195","endLine":206,"endColumn":37},{"ruleId":"188","severity":1,"message":"196","line":206,"column":47,"nodeType":"190","messageId":"191","endLine":206,"endColumn":49},{"ruleId":"192","severity":1,"message":"193","line":206,"column":52,"nodeType":"194","messageId":"195","endLine":206,"endColumn":54},{"ruleId":"192","severity":1,"message":"197","line":206,"column":52,"nodeType":"194","messageId":"195","endLine":206,"endColumn":54},{"ruleId":"192","severity":1,"message":"197","line":206,"column":84,"nodeType":"194","messageId":"195","endLine":206,"endColumn":86},{"ruleId":"188","severity":1,"message":"196","line":206,"column":96,"nodeType":"190","messageId":"191","endLine":206,"endColumn":98},{"ruleId":"188","severity":1,"message":"189","line":207,"column":34,"nodeType":"190","messageId":"191","endLine":207,"endColumn":36},{"ruleId":"188","severity":1,"message":"189","line":209,"column":34,"nodeType":"190","messageId":"191","endLine":209,"endColumn":36},{"ruleId":"192","severity":1,"message":"193","line":246,"column":34,"nodeType":"194","messageId":"195","endLine":246,"endColumn":36},{"ruleId":"192","severity":1,"message":"193","line":246,"column":51,"nodeType":"194","messageId":"195","endLine":246,"endColumn":53},{"ruleId":"192","severity":1,"message":"193","line":247,"column":46,"nodeType":"194","messageId":"195","endLine":247,"endColumn":48},{"ruleId":"192","severity":1,"message":"193","line":247,"column":75,"nodeType":"194","messageId":"195","endLine":247,"endColumn":77},{"ruleId":"198","severity":1,"message":"199","line":434,"column":21,"nodeType":"228","messageId":"201","endLine":435,"endColumn":27},{"ruleId":"186","severity":1,"message":"229","line":458,"column":21,"nodeType":"180","messageId":"181","endLine":458,"endColumn":25},{"ruleId":"186","severity":1,"message":"219","line":1,"column":17,"nodeType":"180","messageId":"181","endLine":1,"endColumn":25},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"@typescript-eslint/no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AnimateEngine' and 'numBars'. Either include them or remove the dependency array.","ArrayExpression",["232"],"no-unused-vars","'response' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Expected '!==' and instead saw '!='.","Unexpected mix of '||' and '&&'.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","BreakStatement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'sortedArray' is assigned a value but never used.","'runTime' is assigned a value but never used.","'setIsOpenHover' is assigned a value but never used.","'COLORS' is assigned a value but never used.","'create' is defined but never used.","'swap' is defined but never used.","'Redirect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","'useState' is defined but never used.","'bubbleSort' is defined but never used.","'heapSort' is defined but never used.","'insertionSort' is defined but never used.","'mergeSort' is defined but never used.","'quickSort' is defined but never used.","'reverseArray' is defined but never used.","'selectionSort' is defined but never used.","'PathfindingVisualiserPage' is defined but never used.","ReturnStatement","'item' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"233","fix":"234"},"Update the dependencies array to be: [AnimateEngine, numBars]",{"range":"235","text":"236"},[2216,2218],"[AnimateEngine, numBars]"]