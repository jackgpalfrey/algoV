[{"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx":"1","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\SortingVisualiserPage.tsx":"2","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx":"3","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts":"4","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts":"5","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts":"6","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx":"7","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts":"8","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts":"9","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts":"10","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx":"11","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\AlgoriComputePage.jsx":"12","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\PathfindingVisualiserPage.jsx":"13","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx":"14","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts":"15","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx":"16","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx":"17","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx":"18","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx":"19","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx":"20","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\LatestChangesCard\\index.jsx":"21","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.jsx":"22","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index-depr.jsx":"23","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\UnavailablePage.jsx":"24"},{"size":235,"mtime":1614858547970,"results":"25","hashOfConfig":"26"},{"size":250,"mtime":1611423060434,"results":"27","hashOfConfig":"26"},{"size":23526,"mtime":1614949885238,"results":"28","hashOfConfig":"26"},{"size":1596,"mtime":1614812593244,"results":"29","hashOfConfig":"26"},{"size":1780,"mtime":1614813972509,"results":"30","hashOfConfig":"26"},{"size":1561,"mtime":1614813439524,"results":"31","hashOfConfig":"26"},{"size":2917,"mtime":1614860059466,"results":"32","hashOfConfig":"26"},{"size":462,"mtime":1614872367345,"results":"33","hashOfConfig":"26"},{"size":2377,"mtime":1614872309764,"results":"34","hashOfConfig":"26"},{"size":1693,"mtime":1614872357091,"results":"35","hashOfConfig":"26"},{"size":1727,"mtime":1614861657832,"results":"36","hashOfConfig":"26"},{"size":133,"mtime":1611570216976,"results":"37","hashOfConfig":"26"},{"size":234,"mtime":1614872625389,"results":"38","hashOfConfig":"26"},{"size":1987,"mtime":1614851068037,"results":"39","hashOfConfig":"26"},{"size":1459,"mtime":1614814731519,"results":"40","hashOfConfig":"26"},{"size":67,"mtime":1611845343871,"results":"41","hashOfConfig":"26"},{"size":1451,"mtime":1614802677799,"results":"42","hashOfConfig":"26"},{"size":235,"mtime":1611847446709,"results":"43","hashOfConfig":"26"},{"size":1877,"mtime":1614872381537,"results":"44","hashOfConfig":"26"},{"size":184,"mtime":1614894992295,"results":"45","hashOfConfig":"26"},{"size":1500,"mtime":1614860349917,"results":"46","hashOfConfig":"26"},{"size":2458,"mtime":1614950671829,"results":"47","hashOfConfig":"26"},{"size":24105,"mtime":1614872520044,"results":"48","hashOfConfig":"26"},{"size":775,"mtime":1614951016918,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"17wj5ys",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx",[],["112","113"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\SortingVisualiserPage.tsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport Console from '../Console'\r\nimport InfoCard from '../InfoCard'\r\nimport algoData from '../../data/algorithmInfo.json'\r\nimport './style.css'\r\n\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc', \r\n    CHECKING: 'red',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\n\r\n\r\nfunction SortingVisualiser(props){\r\n\r\n    //#region State Creation \r\n    let sortingCookie = document.cookie.split('; ').find(row => row.startsWith('sort='))\r\n    if (!sortingCookie || sortingCookie == ''){\r\n        sortingCookie = \"100,bubbleSort\"\r\n    } else {\r\n        sortingCookie = sortingCookie.split('=')[1]\r\n    }\r\n    const cookieData = sortingCookie.replace(' ','').split(',')\r\n    let animationtype = cookieData[0]\r\n    let urlAnimation = useLocation().search.replace('?','')\r\n    if (urlAnimation && Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = urlAnimation\r\n    if(!Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = 'bubbleSort'\r\n    const [array, setArray] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [numBars, setNumBars] = useState(Math.round((window.innerWidth / 12) / 2))\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [swaps, setSwaps] = useState(0)\r\n    const [comparisons, setComparisons] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(animationtype || 'bubbleSort')\r\n    const [isTerminalOpen, setIsTerminalOpen] = useState(false)\r\n    const [activeTimeouts, setActiveTimeouts] = useState([])\r\n    const [activeIntervals, setActiveIntervals] = useState([])\r\n\r\n    //#endregion\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `sort=${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        AnimateEngine([\"resetArray\",numBars])\r\n    }, [])\r\n\r\n\r\n    function AnimateEngine(command){\r\n        try {\r\n            let commandCode = command[0]\r\n            \r\n            let response = [\"PENDING\", \"In progress\"]\r\n            console.log(`Command: ${commandCode}`)\r\n            switch(commandCode){\r\n                case 'setState':\r\n                        let indexArray = command[1]\r\n                        let type = command[2]\r\n                        let data = command[3]\r\n\r\n                        if (!indexArray || !Array.isArray(indexArray)) return [\"ERROR\", \"Invalid Indexs\"]\r\n                        if (!type || typeof type !== 'string') return [\"ERROR\", \"Invalid Type\"]\r\n                        \r\n                        type = type.toLowerCase()\r\n\r\n                        if (type === 'color'){\r\n                            if(typeof data !== 'string') return [\"ERROR\", \"Invalid Data\"]\r\n                            if (data.includes('$')) data = COLORS[data.replace('$','')]\r\n                        } else if (type === 'value'){\r\n                            if(typeof data !== 'number') return [\"ERROR\", \"Invalid Data\"]\r\n                        } else {\r\n                            return [\"ERROR\", \"Invalid Type\"]\r\n                        }\r\n\r\n\r\n                        setArray(prevState => {\r\n                            let newArray = prevState.slice()\r\n                            \r\n                            indexArray.forEach(idx => {\r\n                                if (typeof idx == \"number\" && idx >= 0 && idx < newArray.length){\r\n                                    newArray[idx][type] = data\r\n\r\n                                } if (typeof idx == \"number\" && idx < 0 && Math.abs(idx) <= newArray.length){\r\n                                    newArray[newArray.length - Math.abs(idx)][type] = data\r\n                                \r\n                                } else if (idx === '$ALL'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$LHALF'){\r\n                                    for (let y = 0; y < Math.ceil(newArray.length / 2); y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$RHALF'){\r\n                                    for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$ODD'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 0) newArray[y][type] = data\r\n                                        \r\n                                    }\r\n    \r\n                                } else if (idx === '$EVEN'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 1) newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$MID'){\r\n                                    newArray[Math.floor((newArray.length - 1) / 2)][type] = data\r\n                                    newArray[Math.ceil((newArray.length - 1) / 2)][type] = data\r\n    \r\n                                }\r\n                                \r\n                                \r\n                            });\r\n                            \r\n                            return newArray\r\n                        });\r\n                            \r\n\r\n                    break;\r\n                \r\n                case 'sc':\r\n                case 'setColor': // Sets color of bars. Syntax: [\"setColor\",[array of ids or $ALL, $LHALF, $RHALF], \"valid css color OR valid inbuilt variable prefixed with $\"]\r\n                    let idxes = command[1]\r\n                    let color = command[2]\r\n                    \r\n                    AnimateEngine([\"setState\", idxes, 'color', color])\r\n                    break;\r\n                \r\n                case 'swap':\r\n                    let id1 = command[1]\r\n                    let id2 = command[2]\r\n                    if (id1 == undefined || typeof id1 !== 'number') return [\"ERROR\", \"Invalid id1\"]\r\n                    if (id2 == undefined || typeof id2 !== 'number') return [\"ERROR\", \"Invalid id2\"]\r\n                    setArray(prevState => {\r\n                        id1 = command[1]\r\n                        id2 = command[2]\r\n                        let newArray = prevState.slice()\r\n\r\n                        if (id1 < 0) id1 = newArray.length - Math.abs(id1)\r\n                        if (id2 < 0) id2 = newArray.length - Math.abs(id2)\r\n                        \r\n                        if (id1 >= 0 && id1 < newArray.length && id2 >= 0 && id2 < newArray.length){\r\n                            const tmp1 = {...newArray[id1]}\r\n                            const tmp2 = {...newArray[id2]}\r\n                            newArray[id1] = tmp2\r\n                            newArray[id2] = tmp1\r\n                        }\r\n                        \r\n        \r\n                        return newArray\r\n                    })\r\n        \r\n                    break;\r\n                \r\n                case 'setValue':\r\n                    let idxs = command[1]\r\n                    let value = command[2]\r\n\r\n                    AnimateEngine([\"setState\", idxs, 'value', value])\r\n                    break;\r\n                \r\n                case 'setArray':\r\n                    let values = command[1]\r\n                    let colorCode = command[2]\r\n\r\n                    if (!values || !Array.isArray(values)) return [\"ERROR\", \"Invalid Values\"]\r\n                    if (!colorCode || typeof colorCode !== 'string') return [\"ERROR\", \"Invalid Color\"]\r\n                    setArray(prevState => {\r\n                        let newArray = []\r\n                        let color = command[2]\r\n                        if (color.includes('$')) color = COLORS[color.replace('$','')]\r\n        \r\n                        values.forEach(value => {\r\n                        if (typeof value == \"number\"){\r\n                                newArray.push({value: value, color: color})\r\n                            }\r\n                            \r\n                        });\r\n                        setNumBars(newArray.length)\r\n                        return newArray\r\n                    })\r\n                    break;\r\n                        \r\n                case 'do':\r\n                    let subCommands = command[1]\r\n                    let interval = command[2]\r\n\r\n                    if (!subCommands || !Array.isArray(subCommands)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!interval && interval != 0 || typeof interval !== 'number' && interval != '$userSet' || interval < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n                    if (interval == '$userSet') interval = animationSpeed\r\n                   \r\n                    if (interval == 0) {\r\n                        for (let i = 0; i < subCommands.length; i++){\r\n                            AnimateEngine(subCommands[i])\r\n                        }\r\n                        break; \r\n                    }\r\n\r\n\r\n                    \r\n\r\n                    AnimateEngine(subCommands[0])\r\n                    let currentCommandIdx = 1\r\n\r\n                    let intervalID = setInterval(() => {\r\n                        if (currentCommandIdx >= subCommands.length){\r\n                            clearInterval(intervalID)\r\n                            //AnimateEngine([\"clearLoop\", `${intervalID}`])\r\n                            return\r\n                        }\r\n\r\n                        AnimateEngine(subCommands[currentCommandIdx])\r\n                        currentCommandIdx++\r\n                    }, interval)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curIntervals = prevState.slice()\r\n                        curIntervals.push(intervalID)\r\n                        return curIntervals\r\n                    })\r\n                    break;\r\n                \r\n                case 'doFor':\r\n                    let commandsToRun = command[1]\r\n                    let repeats = command[2]\r\n                    let intervalBetweenEach = command[3]\r\n\r\n                    if (!commandsToRun || !Array.isArray(commandsToRun)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!repeats && repeats !== 0 || typeof repeats !== 'number' || repeats < 0) return [\"ERROR\", \"Invalid Repeats\"]\r\n                    if (!intervalBetweenEach && intervalBetweenEach !== 0 || (typeof intervalBetweenEach !== 'number' && intervalBetweenEach !== '$userSet') || intervalBetweenEach < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n\r\n                    if (intervalBetweenEach === '$userSet'){\r\n                        intervalBetweenEach = parseInt(animationSpeed)\r\n                    }\r\n                    \r\n                    let currentIteration = 1\r\n\r\n                    AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n                    \r\n                    let intervalIdentifier = setInterval(() => {\r\n                        if (currentIteration >= repeats && repeats !== 0) {\r\n                            clearInterval(intervalIdentifier)\r\n                            return;\r\n                        }\r\n\r\n                        AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n\r\n                        currentIteration++\r\n                    }, intervalBetweenEach * commandsToRun.length)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curAIntervals = prevState.slice()\r\n                        curAIntervals.push(intervalIdentifier)\r\n                        return curAIntervals\r\n                    })\r\n                    break;\r\n\r\n                case 'doSim':\r\n                    let toRunCommands = command[1]\r\n                    AnimateEngine([\"do\", toRunCommands, 0])\r\n                    break;\r\n\r\n                case 'doIn':\r\n                    let commandsToExecute = command[1]\r\n                    let waitFor = command[2]\r\n\r\n                    if (!commandsToExecute || !Array.isArray(commandsToExecute)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!waitFor || typeof waitFor !== 'number' || waitFor <= 0) return [\"ERROR\", \"Wait Time Invalid\"]\r\n                    let timeoutID = setTimeout(() => {\r\n                        command[1].forEach((value) => {\r\n                            console.log(value)\r\n                            AnimateEngine(value)\r\n                        })\r\n                    }, command[2] )\r\n\r\n                    setActiveTimeouts(prevState => {\r\n                        let curTimeouts = prevState.slice()\r\n                        curTimeouts.push(timeoutID)\r\n                        return curTimeouts\r\n                    })\r\n\r\n                    break;\r\n                \r\n                case 'ra':\r\n                case 'resetArray':\r\n                    \r\n                    let numOfBars = command[1]\r\n                    if (!numOfBars) numOfBars = numBars\r\n                    if (typeof numOfBars !== 'number') return [\"ERROR\", \"Invalid Number of bars\"]\r\n                    let Randvalues = []\r\n                    for (let i = 0; i < numOfBars; i++){\r\n                        Randvalues.push(Math.round(Math.random() * 60) + 13)\r\n                    }\r\n                    AnimateEngine([\"setArray\",Randvalues,\"$BASE\"])\r\n                    break;\r\n                \r\n                case 'setRunTimeDisplay':\r\n                    let newRuntime = command[1]\r\n                    if (!newRuntime) return [\"ERROR\", \"Invalid Runtime\"]\r\n                    setRunTime(newRuntime)\r\n                    break;\r\n\r\n                case 'setComparisonsDisplay':\r\n                    let newComparisons = command[1]\r\n                    if (!newComparisons) return [\"ERROR\", \"Invalid Comparisons\"]\r\n                    setComparisons(newComparisons)\r\n                    break;\r\n\r\n                case 'setSwapsDisplay':\r\n                    let newSwaps = command[1]\r\n                    if (!newSwaps) return [\"ERROR\", \"Invalid Swaps\"]\r\n                    setSwaps(newSwaps)\r\n                    break;\r\n\r\n                case 'startAnimation':\r\n                    setAnimationActive(true)\r\n                    break;\r\n\r\n                case 'endAnimation':\r\n                    setAnimationActive(false)\r\n                    break;\r\n\r\n                case 'clearLoop': //FIXME: Dosen't work\r\n                    let specificLoop = command[1]\r\n                    let activeLoops = activeIntervals.slice()\r\n                    if (specificLoop == undefined){\r\n                        let ALLen = activeLoops.length\r\n                        for (let i = 0; i < ALLen; i++){\r\n                            clearInterval(activeLoops.pop())\r\n                        }\r\n                    } else if (typeof specificLoop === 'number') {\r\n                        let loop = activeLoops.splice(specificLoop, 1)[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    } else if (typeof specificLoop === 'string'){\r\n                        let loop = activeLoops.indexOf(parseInt(specificLoop))[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    }\r\n\r\n                    setActiveIntervals(activeLoops)\r\n                    \r\n                    \r\n                    break;\r\n\r\n                case 'clearWaits': //FIXME: Dosen't work\r\n                    let activeWaits = activeTimeouts.slice()\r\n                    let AWLen = activeWaits.length\r\n                    for (let i = 0; i < AWLen; i++){\r\n                        clearTimeout(activeWaits.pop())\r\n                    }\r\n                    break;\r\n                \r\n                case 'ct':\r\n                case 'clearTimers': //FIXME: Dosen't work\r\n                    AnimateEngine([\"clearLoops\"])\r\n                    AnimateEngine([\"clearWaits\"])\r\n                    break;\r\n                \r\n                case 'r':\r\n                case 'reload':\r\n                    window.location.reload()\r\n                    break;\r\n                    \r\n                case 'executeInternalAnimation':\r\n                    let animationKey = command[1]\r\n                    if (!animationKey || typeof animationKey !== 'string' ) return [\"ERROR\", \"Invalid Animation Key\"]\r\n                    let resultData = []\r\n                    switch(animationKey){\r\n                        case 'bubbleSort':\r\n                            resultData = bubbleSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'selectionSort':\r\n                            resultData = selectionSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'insertionSort':\r\n                            resultData = insertionSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'quickSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = quickSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'heapSort':\r\n                            resultData = heapSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'mergeSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = mergeSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'reverseArray':\r\n                            resultData = reverseArray(getNumbersFromArrayState())\r\n                            break;\r\n                        default:\r\n                            return [\"ERROR\", \"Invalid Animation Key\"]\r\n                            break;\r\n                    }\r\n\r\n                    AnimateEngine([\"doSim\", [resultData]])\r\n                    break;\r\n\r\n                case 'version':\r\n                    let version = document.cookie.split('; ').find(row => row.startsWith('version=')).split('=')[1]\r\n                    alert(`Version: ${version}`)\r\n                    break;\r\n                \r\n                default:\r\n                    return [\"ERROR\", \"Unknown Command\"]\r\n                    break;\r\n            }\r\n\r\n            return [\"SUCCESS\", \"Exectuted Successfully\"]\r\n\r\n        } catch (error){\r\n            console.error(error)\r\n            return [\"ERROR\", \"Try Failed\"]\r\n        }\r\n    \r\n    }\r\n\r\n    function getNumbersFromArrayState(){\r\n        let numbers = []\r\n        for (let i = 0; i < array.length; i++){\r\n            numbers.push(array[i].value)\r\n        }\r\n\r\n        return numbers\r\n    }\r\n\r\n    function handleSortClick(){\r\n        if (animationActive) return false\r\n        console.log(AnimateEngine([\"executeInternalAnimation\", activeAlgorithm]))\r\n    }\r\n\r\n    function createBars(){\r\n        let barWidth = ((window.innerWidth / 100) * 90) / numBars\r\n        \r\n        let barsDivs = array.map((item, idx) => {\r\n            let style = {\r\n                height: `${item.value}%`, \r\n                backgroundColor: `${item.color}`,\r\n                width: barWidth,\r\n                margin: barWidth / 4 > 20 ? 20 : barWidth / 4,\r\n                fontSize: barWidth > 20 ? barWidth / 3 : 0,\r\n                color: COLORS.TEXT  \r\n            }\r\n\r\n            return (<div key={idx} title={item.value}className='bar' style={style}>{item.value}</div>)\r\n        })\r\n\r\n        return barsDivs\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='bar-container'>\r\n                <div className='inner-bar-container'>\r\n                    {createBars()}\r\n                </div>\r\n                \r\n            </div>\r\n            <nav>\r\n            <i className='material-icons consoleButton' title={isTerminalOpen ? 'Close Terminal': 'Open Terminal'} onClick={() => setIsTerminalOpen(!isTerminalOpen)}>{isTerminalOpen ? 'code_off': 'code'}</i>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>Animation Time ({animationSpeed}ms) </p>\r\n                <input disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(parseInt(e.target.value)); \r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {AnimateEngine([\"resetArray\", numBars])}}} className={!animationActive ? 'button reset' : 'button-disabled reset'}>Reset</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={!animationActive ? 'button sort' : 'button-disabled sort'}>Sort</button>\r\n                <select disabled={animationActive} value={activeAlgorithm} name={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                <option disabled className='algorithmsTitle' value='otherTitle'>Sorting Algorithms</option>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option disabled className='algorithmsTitle' value='otherTitle'>Other Algorithms</option>\r\n                    <option value='reverseArray'>Reverse Array</option>\r\n                </select>\r\n                \r\n                    <div className='sliderBox'>\r\n                        <p className={animationActive ? 'disabled' : ''}>Number of Bars ({numBars})</p>\r\n                        <input disabled={animationActive} type=\"range\" min=\"5\" max={`${Math.round(window.innerWidth / 12) - 10}`} value={numBars} onChange={e => {\r\n                            AnimateEngine([\"resetArray\",parseInt(e.target.value)])\r\n                        }}></input>\r\n                    </div>\r\n                    \r\n                    \r\n\r\n                <p title={`Swaps: ${swaps} \\nComparisons: ${comparisons}`} className={animationActive ? 'timeTaken disabled' : 'timeTaken'}>{runTime !== 0 ? `Time: ${runTime}ms`: `Time: N/A`}</p>\r\n                \r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n\r\n            <Console display={isTerminalOpen} AnimateEngine={AnimateEngine}/>\r\n \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualiser",["136","137"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts",["138","139"],"function sort(array: number[]): [number[],object[],number]{\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        \r\n        for (let j = 0; j < sortedArray.length - 1 - i; j++){\r\n            animations.push([\"setColor\", [j,j+1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] > sortedArray[j+1]){\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j+1]\r\n                sortedArray[j+1] = tmp \r\n                animations.push([\"swap\",j,j+1])\r\n                swaps++\r\n            }\r\n            animations.push([\"setColor\",[j,j+1],\"$BASE\"])\r\n        }\r\n        animations.push([\"setColor\",[sortedArray.length - 1 - i],\"$DONE\"])\r\n    }\r\n\r\n   \r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [0], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n\r\n}\r\n\r\nfunction bubbleSort(array: number[]): any{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return (command)\r\n}\r\n\r\n\r\nexport default bubbleSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts",["140","141"],"const COLORS = {\r\n    CURRENT_MIN: '#3e09ba',\r\n}\r\n\r\n\r\nfunction sort(array: number[]) {\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        let minValIdx = i\r\n        for (let j = i + 1; j < sortedArray.length; j++){\r\n            animations.push([\"setColor\", [j], \"$CHECKING\"])\r\n            comparisons++\r\n            if (array[j] < array[minValIdx]){\r\n                animations.push([\"setColor\", [minValIdx], \"$BASE\"])\r\n                minValIdx = j\r\n                animations.push([\"setColor\", [j], COLORS.CURRENT_MIN])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j+1], \"$BASE\"])\r\n            }  \r\n\r\n                      \r\n        }\r\n        swaps++\r\n        let tmp = array[i]\r\n        array[i] = array[minValIdx]\r\n        array[minValIdx] = tmp\r\n        animations.push([\"swap\", i, minValIdx])\r\n        animations.push([\"setColor\", [i], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [-1], \"$DONE\"])\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction selectionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default selectionSort;","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts",["142","143"],"\r\n\r\n\r\n\r\nfunction sort(array: number[]){\r\n    let startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length; i++){\r\n        for (let j = i; j > 0; j--){\r\n            animations.push([\"setColor\", [j,j-1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] < sortedArray[j-1]) {\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j-1]\r\n                sortedArray[j-1] = tmp\r\n                swaps++\r\n                animations.push([\"swap\", j, j-1])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n                break;\r\n            }\r\n            animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n        }\r\n    }\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction insertionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default insertionSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx",["144"],"import React, { useState } from 'react'\r\nimport './style.css'\r\nimport data from '../../data/algorithmInfo.json'\r\n\r\n\r\nfunction InfoCard({algorithmType, algorithmID}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isOpenHover, setIsOpenHover] = useState(false)\r\n    \r\n\r\n    let title = 'No Information Available'\r\n    let avgTimeComplexity = ''\r\n    let worstTimeComplexity = ''\r\n    let bestTimeComplexity  = ''\r\n    let memoryComplexity = ''\r\n    let stable = ''\r\n    let descriptionArray = []\r\n    let creditText = ''\r\n    let credit = ''\r\n\r\n    if (data[algorithmType][algorithmID]){\r\n        title = data[algorithmType][algorithmID].title || 'Unknown'\r\n        avgTimeComplexity = data[algorithmType][algorithmID].avgTimeComplexity || 'Unknown'\r\n        worstTimeComplexity = data[algorithmType][algorithmID].worstTimeComplexity || 'Unknown'\r\n        bestTimeComplexity = data[algorithmType][algorithmID].bestTimeComplexity || 'Unknown'\r\n        memoryComplexity = data[algorithmType][algorithmID].memoryComplexity || 'Unknown'\r\n        stable = data[algorithmType][algorithmID].stable || 'Unknown'\r\n        descriptionArray = data[algorithmType][algorithmID].description.split('\\n')\r\n        creditText = data[algorithmType][algorithmID].creditText || 'Description From'\r\n        credit = data[algorithmType][algorithmID].credit\r\n    }\r\n    \r\n\r\n    let card = (<div className='card' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/>\r\n                    <p className='title'>{title}</p>\r\n                    <hr></hr>\r\n                    <p className='meta'>{`Worst Case Time Complexity: ${worstTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Average Time Complexity: ${avgTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Best Case Time Complexity: ${bestTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Memory Complexity: ${memoryComplexity}`}</p>\r\n                    <p className='meta'>Stable: {stable} <i className={'material-icons help'} title='Whether the position of equal values stay the same relative to each other'>help</i></p>\r\n                    <hr></hr>\r\n                    {descriptionArray.map((item,idx) => <p className='description'>{item}</p>)}\r\n                    {credit ? <a className='credit' href={credit} >{`${creditText}: ${credit}`}</a> : null}     \r\n                </div>)\r\n    return (\r\n            <div className='card-container' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/ >\r\n                {isOpen || isOpenHover ? card : null}\r\n                <button onClick={() => setIsOpen(!isOpen)} className='openCardButton' >\r\n                {isOpen ? <i className=\"material-icons\">close</i> : <i className=\"material-icons \">info</i> }\r\n                </button>  \r\n            </div>\r\n            )\r\n\r\n    }\r\n\r\nexport default InfoCard","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts",["145"],"function sort(array: any, animations: any): any {\r\n \r\n\r\n\r\n}\r\n\r\nfunction quickSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n\r\n\r\n    let sortedArray = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default quickSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts",["146"],"// FROM: https://levelup.gitconnected.com/heapsort-for-javascript-newbies-598d25477d55\r\n//TODO: Improve Animations\r\n\r\n\r\nfunction swap(array: number[], idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push([\"swap\", idx1, idx2])\r\n}\r\n\r\n\r\nfunction heapify(array: number[], length: number, idx: number, animations: object[], data: any){\r\n    let largest:number = idx\r\n    let left:number = idx * 2 + 1\r\n    let right:number = left + 1\r\n\r\n    animations.push([\"setColor\", [left,right], \"$CHECKING\"])\r\n    data.comparisons++\r\n    if(left < length && array[left] > array[largest]) {\r\n        largest = left\r\n    }\r\n    data.comparisons++\r\n    if(right < length && array[right] > array[largest]){\r\n        largest = right\r\n    }\r\n\r\n    animations.push([\"setColor\", [left,right], \"$BASE\"])\r\n\r\n    if(largest !== idx){\r\n        data.swaps++\r\n        swap(array, idx, largest, animations)\r\n        heapify(array, length, largest, animations, data)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction sort(array: number[], animations: object[], data: any){\r\n    let length = array.length\r\n    let idx = Math.floor(length / 2 - 1)\r\n    let k = length - 1;\r\n\r\n    while (idx >= 0) {\r\n        heapify(array, length, idx, animations, data)\r\n        idx--\r\n    }\r\n\r\n    while(k >= 0){\r\n        data.swaps++\r\n        swap(array, 0, k, animations)\r\n        heapify(array, k, 0, animations, data)\r\n        //animations.push({command: 'setColor',id: [k],color: '$DONE'})\r\n        k--\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n\r\n\r\nfunction heapSort(array: number[]){\r\n    let startTime = performance.now()\r\n    var animations: object[] = [];\r\n    var data = {\r\n        swaps: 0,\r\n        comparisons: 0\r\n    }\r\n    let sortedArray = sort(array, animations,data)\r\n\r\n    let endTime = performance.now()\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n\r\n    let runTime = endTime - startTime\r\n\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", data.comparisons])\r\n    endAni.push([\"setSwapsDisplay\", data.swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\nexport default heapSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts",["147"],"function mergeArrays(leftArray: any, rightArray: any, animations: any){\r\n    let leftIndex = 0 , rightIndex = 0\r\n\r\n    console.log(leftArray)\r\n\r\n    while(leftIndex < leftArray.length && rightIndex < rightArray.length){\r\n        animations.push({command: 'swap',id1: rightArray[rightIndex][0], id2: rightArray[rightIndex][0]})\r\n        let tmp = leftArray[leftIndex]\r\n        leftArray[leftIndex] = rightArray[rightIndex]\r\n        rightArray[rightIndex] = tmp\r\n        if (leftArray[leftIndex][1] < rightArray[rightIndex][1]){\r\n            leftIndex++\r\n        } else {\r\n            rightIndex++\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return \r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n    if (array.length <= 1) return array\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n\r\n    const left = array.slice(0,middle);\r\n    const right = array.slice(middle);\r\n\r\n    return mergeArrays(sort(left,animations), sort(right,animations),animations)\r\n\r\n}\r\n\r\n\r\nfunction createIndexedArray(array: number[]){\r\n    let indexedArray = []\r\n    for (let i = 0; i < array.length - 1; i++){\r\n        indexedArray.push([i,array[i]])\r\n    }\r\n\r\n    return indexedArray\r\n}\r\n\r\nfunction mergeSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n    let indexedArray: number[][] = createIndexedArray(array)\r\n\r\n\r\n    sortedArray = sort(indexedArray,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    console.log(animations)\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default mergeSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\AlgoriComputePage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\PathfindingVisualiserPage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx",["148","149"],"import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Container from '../components/ChangeLog/Container'\r\nimport Item from '../components/ChangeLog/Item'\r\nimport './HomePageStyle.css'\r\n\r\n\r\nimport changeLogData from '../data/changelogData.json'\r\n\r\n\r\nfunction HomePage(){\r\n    const [isAllOpen, setIsAllOpen] = useState(false)\r\n    const [isNewestFirst, setIsNewestFirst] = useState(true)\r\n    console.log(isAllOpen)\r\n\r\n    let changeLogItems = changeLogData.slice()\r\n    if (isNewestFirst) changeLogItems = changeLogItems.reverse()\r\n\r\n    let changeItems = changeLogItems.map((value, idx) => {\r\n        let dontDisplay = value.dontDisplay\r\n        let displayAfter = value.displayAfter\r\n        if (displayAfter) {\r\n            const [day, month, year] = displayAfter.split('/')\r\n            displayAfter = `${year}-${month}-${day}`\r\n            \r\n        }\r\n        let date = new Date().getTime()\r\n        let afterDate = Date.parse(displayAfter)\r\n        let timeUntil = afterDate - date\r\n        if ((!dontDisplay && !displayAfter) || (timeUntil <= 0)) return <Item key={idx}  isOpen={isAllOpen} changes={value.modifications} date={value.isNext ? `Planned for ${value.date}` : value.date} version={value.isNext ? 'Next update' : value.version} title={value.title}> <p>{value.info}</p> </Item>\r\n    })\r\n\r\n    return (\r\n        <div className='changeLog'>\r\n            <div className='changeLogMenuItems'>\r\n                <div className='openAllChangesButton' onClick={() => setIsAllOpen(!isAllOpen)}>{isAllOpen ? 'Close All' : 'Open All'}</div>\r\n                <div className='openAllChangesButton' onClick={() => setIsNewestFirst(!isNewestFirst)}>{isNewestFirst ? 'Order Oldest to Newest' : 'Order Newest to Oldest'}</div>\r\n            </div>\r\n            <Container titleBgColor='' titleTxtColor='' infoBgColor='' infoTxtColor=''>\r\n                {changeItems}\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomePage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts",["150"],"\r\nfunction sort(array: any, animations: any): any {\r\n    let sortedArray = array.slice()\r\n    let swaps = 0\r\n\r\n    for (let i = 0; i < Math.floor(sortedArray.length / 2); i++){\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$CHECKING\"])\r\n        let tmp = sortedArray[i]\r\n        sortedArray[i] = sortedArray[sortedArray.length-1-i]\r\n        sortedArray[sortedArray.length-1-i] = tmp\r\n        swaps++\r\n        animations.push([\"swap\", i, (sortedArray.length-1-i)])\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [(Math.ceil(sortedArray.length / 2)) - 1], \"$DONE\"])\r\n\r\n    return [sortedArray, animations, swaps]\r\n\r\n\r\n}\r\n\r\nfunction reverseArray(array: number[]){\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n    let swaps:number\r\n\r\n\r\n    [sortedArray, animations, swaps] = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", 0])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default reverseArray","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx",["151","152"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\LatestChangesCard\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.jsx",["153","154","155"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport SortingVisualiserPage from './pages/SortingVisualiserPage';\n\n\nimport {HashRouter as Router, Redirect, Route, Switch, useHistory} from 'react-router-dom'\n\nimport PathfindingVisualiserPage from './pages/PathfindingVisualiserPage';\nimport AlgoriComputePage from './pages/AlgoriComputePage';\nimport HomePage from './pages/HomePage';\nimport UnavailablePage from './pages/UnavailablePage';\nimport changelogData from './data/changelogData.json'\nimport LatestChangesCard from './components/LatestChangesCard';\nconst allowInDevPages = false\nconst currentVersion = \"1.10.1\"\nconst versionID = 13\n\nfunction App() {\n  const [showNewVersion, setShowNewVersion] = useState(false)\n  useEffect(() => {\n    let version = document.cookie.split('; ').find(row => row.startsWith('version='))\n    if (!version || version == ''){\n      version = 0\n    } else {\n      version = version.split('=')[1].split('.')\n      if (version.length > 2) version.pop()\n      version = version.join('')\n      console.log(version)\n    }\n    console.log(version)\n    let curVer = currentVersion.split('.')\n    if (curVer.length > 2) curVer.pop()\n    curVer = curVer.join('')\n    console.log(curVer)\n    if (parseInt(curVer) > parseInt(version)){\n        setShowNewVersion(true)\n    }\n    document.cookie = `version=${currentVersion}`\n  },[])\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/sort'>\n            <SortingVisualiserPage />\n          </Route>\n          <Route path='/pathfind'>\n            {!allowInDevPages ? <UnavailablePage/> : null}\n            <PathfindingVisualiserPage />\n          </Route>\n          <Route path='/compute'>\n            {!allowInDevPages ? <UnavailablePage/> : null}\n            <AlgoriComputePage />\n          </Route>\n          <Route exact path='/'>\n            <HomePage />\n          </Route>\n          <Route>\n            <UnavailablePage/>\n          </Route>\n        </Switch>\n        \n        <Menu/>\n        {showNewVersion ? <LatestChangesCard closeFunc={setShowNewVersion} isOpen={true} changes={changelogData[versionID].modifications} date={changelogData[versionID].date} version={changelogData[versionID].version} title={changelogData[versionID].title}> <p>{changelogData[versionID].info}</p> </LatestChangesCard>: null}\n        \n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index-depr.jsx",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\UnavailablePage.jsx",["176"],"import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport './UnavailablePageStyle.css'\r\nfunction InDevPage(props){\r\n    let history = useHistory()\r\n    console.log(history)\r\n    return (\r\n        <div className='inDevPage'>\r\n            <div className='InDevDiv'>\r\n                <i className=\"material-icons no-icon\">not_interested</i>\r\n                <h1 className='inDevPageh1'>{`${history.location.pathname} is unavailable`}</h1>\r\n                <p className='inDevPagep'>This page does not exist or is under maintenance. Check back again later.</p>\r\n                <Link to='/'><span className='inDevGoHomeLink'>Go Home</span></Link>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InDevPage",{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":31,"column":41,"nodeType":"183","messageId":"184","endLine":31,"endColumn":43},{"ruleId":"185","severity":1,"message":"186","line":62,"column":8,"nodeType":"187","endLine":62,"endColumn":10,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":69,"column":17,"nodeType":"191","messageId":"192","endLine":69,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":152,"column":29,"nodeType":"183","messageId":"184","endLine":152,"endColumn":31},{"ruleId":"181","severity":1,"message":"182","line":153,"column":29,"nodeType":"183","messageId":"184","endLine":153,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":209,"column":35,"nodeType":"195","messageId":"196","endLine":209,"endColumn":37},{"ruleId":"181","severity":1,"message":"197","line":209,"column":47,"nodeType":"183","messageId":"184","endLine":209,"endColumn":49},{"ruleId":"193","severity":1,"message":"194","line":209,"column":52,"nodeType":"195","messageId":"196","endLine":209,"endColumn":54},{"ruleId":"193","severity":1,"message":"198","line":209,"column":52,"nodeType":"195","messageId":"196","endLine":209,"endColumn":54},{"ruleId":"193","severity":1,"message":"198","line":209,"column":84,"nodeType":"195","messageId":"196","endLine":209,"endColumn":86},{"ruleId":"181","severity":1,"message":"197","line":209,"column":96,"nodeType":"183","messageId":"184","endLine":209,"endColumn":98},{"ruleId":"181","severity":1,"message":"182","line":210,"column":34,"nodeType":"183","messageId":"184","endLine":210,"endColumn":36},{"ruleId":"181","severity":1,"message":"182","line":212,"column":34,"nodeType":"183","messageId":"184","endLine":212,"endColumn":36},{"ruleId":"193","severity":1,"message":"194","line":249,"column":34,"nodeType":"195","messageId":"196","endLine":249,"endColumn":36},{"ruleId":"193","severity":1,"message":"194","line":249,"column":51,"nodeType":"195","messageId":"196","endLine":249,"endColumn":53},{"ruleId":"193","severity":1,"message":"194","line":250,"column":46,"nodeType":"195","messageId":"196","endLine":250,"endColumn":48},{"ruleId":"193","severity":1,"message":"194","line":250,"column":75,"nodeType":"195","messageId":"196","endLine":250,"endColumn":77},{"ruleId":"181","severity":1,"message":"182","line":346,"column":38,"nodeType":"183","messageId":"184","endLine":346,"endColumn":40},{"ruleId":"199","severity":1,"message":"200","line":401,"column":29,"nodeType":"201","messageId":"202","endLine":402,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":408,"column":29,"nodeType":"201","messageId":"202","endLine":409,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":415,"column":29,"nodeType":"203","messageId":"202","endLine":415,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":428,"column":21,"nodeType":"203","messageId":"202","endLine":428,"endColumn":27},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"204","severity":1,"message":"205","line":45,"column":10,"nodeType":"191","messageId":"192","endLine":45,"endColumn":21},{"ruleId":"204","severity":1,"message":"206","line":45,"column":35,"nodeType":"191","messageId":"192","endLine":45,"endColumn":42},{"ruleId":"204","severity":1,"message":"205","line":55,"column":10,"nodeType":"191","messageId":"192","endLine":55,"endColumn":21},{"ruleId":"204","severity":1,"message":"206","line":55,"column":35,"nodeType":"191","messageId":"192","endLine":55,"endColumn":42},{"ruleId":"204","severity":1,"message":"205","line":48,"column":10,"nodeType":"191","messageId":"192","endLine":48,"endColumn":21},{"ruleId":"204","severity":1,"message":"206","line":48,"column":35,"nodeType":"191","messageId":"192","endLine":48,"endColumn":42},{"ruleId":"189","severity":1,"message":"207","line":8,"column":25,"nodeType":"191","messageId":"192","endLine":8,"endColumn":39},{"ruleId":"204","severity":1,"message":"205","line":12,"column":9,"nodeType":"191","messageId":"192","endLine":12,"endColumn":20},{"ruleId":"204","severity":1,"message":"205","line":70,"column":9,"nodeType":"191","messageId":"192","endLine":70,"endColumn":20},{"ruleId":"204","severity":1,"message":"205","line":55,"column":5,"nodeType":"191","messageId":"192","endLine":55,"endColumn":16},{"ruleId":"189","severity":1,"message":"208","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":19,"column":55,"nodeType":"211","messageId":"212","endLine":19,"endColumn":57},{"ruleId":"204","severity":1,"message":"205","line":30,"column":6,"nodeType":"191","messageId":"192","endLine":30,"endColumn":17},{"ruleId":"189","severity":1,"message":"213","line":1,"column":8,"nodeType":"191","messageId":"192","endLine":1,"endColumn":13},{"ruleId":"189","severity":1,"message":"214","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":25},{"ruleId":"189","severity":1,"message":"208","line":7,"column":31,"nodeType":"191","messageId":"192","endLine":7,"endColumn":39},{"ruleId":"189","severity":1,"message":"215","line":7,"column":56,"nodeType":"191","messageId":"192","endLine":7,"endColumn":66},{"ruleId":"181","severity":1,"message":"182","line":23,"column":29,"nodeType":"183","messageId":"184","endLine":23,"endColumn":31},{"ruleId":"189","severity":1,"message":"190","line":45,"column":17,"nodeType":"191","messageId":"192","endLine":45,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":46,"column":13,"nodeType":"218","messageId":"219","endLine":424,"endColumn":14},{"ruleId":"193","severity":1,"message":"194","line":138,"column":30,"nodeType":"195","messageId":"196","endLine":138,"endColumn":32},{"ruleId":"193","severity":1,"message":"194","line":138,"column":43,"nodeType":"195","messageId":"196","endLine":138,"endColumn":45},{"ruleId":"193","severity":1,"message":"194","line":139,"column":30,"nodeType":"195","messageId":"196","endLine":139,"endColumn":32},{"ruleId":"193","severity":1,"message":"194","line":139,"column":43,"nodeType":"195","messageId":"196","endLine":139,"endColumn":45},{"ruleId":"193","severity":1,"message":"194","line":194,"column":35,"nodeType":"195","messageId":"196","endLine":194,"endColumn":37},{"ruleId":"181","severity":1,"message":"197","line":194,"column":47,"nodeType":"183","messageId":"184","endLine":194,"endColumn":49},{"ruleId":"193","severity":1,"message":"194","line":194,"column":52,"nodeType":"195","messageId":"196","endLine":194,"endColumn":54},{"ruleId":"193","severity":1,"message":"198","line":194,"column":52,"nodeType":"195","messageId":"196","endLine":194,"endColumn":54},{"ruleId":"193","severity":1,"message":"198","line":194,"column":84,"nodeType":"195","messageId":"196","endLine":194,"endColumn":86},{"ruleId":"181","severity":1,"message":"197","line":194,"column":96,"nodeType":"183","messageId":"184","endLine":194,"endColumn":98},{"ruleId":"181","severity":1,"message":"182","line":195,"column":34,"nodeType":"183","messageId":"184","endLine":195,"endColumn":36},{"ruleId":"181","severity":1,"message":"182","line":197,"column":34,"nodeType":"183","messageId":"184","endLine":197,"endColumn":36},{"ruleId":"193","severity":1,"message":"194","line":234,"column":34,"nodeType":"195","messageId":"196","endLine":234,"endColumn":36},{"ruleId":"193","severity":1,"message":"194","line":234,"column":51,"nodeType":"195","messageId":"196","endLine":234,"endColumn":53},{"ruleId":"193","severity":1,"message":"194","line":235,"column":46,"nodeType":"195","messageId":"196","endLine":235,"endColumn":48},{"ruleId":"193","severity":1,"message":"194","line":235,"column":75,"nodeType":"195","messageId":"196","endLine":235,"endColumn":77},{"ruleId":"199","severity":1,"message":"200","line":422,"column":21,"nodeType":"220","messageId":"202","endLine":423,"endColumn":27},{"ruleId":"189","severity":1,"message":"221","line":446,"column":21,"nodeType":"191","messageId":"192","endLine":446,"endColumn":25},{"ruleId":"189","severity":1,"message":"214","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":25},"no-native-reassign",["222"],"no-negated-in-lhs",["223"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AnimateEngine' and 'numBars'. Either include them or remove the dependency array.","ArrayExpression",["224"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Expected '!==' and instead saw '!='.","Unexpected mix of '||' and '&&'.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","BreakStatement","@typescript-eslint/no-unused-vars","'sortedArray' is assigned a value but never used.","'runTime' is assigned a value but never used.","'setIsOpenHover' is assigned a value but never used.","'Redirect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","ReturnStatement","'item' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},"Update the dependencies array to be: [AnimateEngine, numBars]",{"range":"227","text":"228"},[2462,2464],"[AnimateEngine, numBars]"]