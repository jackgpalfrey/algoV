{"version":3,"sources":["components/Menu/index.jsx","algoithms/sorting/bubbleSort.ts","algoithms/sorting/heapSort.ts","algoithms/sorting/insertionSort.ts","algoithms/sorting/reverseArray.ts","algoithms/sorting/selectionSort.ts","components/Console/index.jsx","components/InfoCard/index.jsx","components/SortingVisualiser/index.jsx","pages/SortingVisualiserPage.tsx","components/PathfindingVisualiser/index.jsx","pages/PathfindingVisualiserPage.jsx","pages/AlgoriComputePage.jsx","components/ChangeLog/Container.jsx","components/ChangeLog/Item.jsx","pages/HomePage.jsx","pages/UnavailablePage.jsx","components/LatestChangesCard/index.jsx","App.jsx","index.tsx"],"names":["Menu","useState","isOpen","setIsOpen","className","onClick","exact","activeClassName","to","title","bubbleSort","array","startTime","performance","now","sortedArray","animations","swaps","comparisons","i","length","j","push","tmp","runTime","endAni","Math","round","unshift","sort","swap","idx1","idx2","heapify","idx","data","largest","left","right","heapSort","endTime","floor","k","insertionSort","reverseArray","slice","ceil","COLORS","selectionSort","minValIdx","Console","props","display","textColor","setTextColor","commandText","setCommandText","responseText","setResponseText","responseHandler","response","setTimeout","console","log","useEffect","terminal","placeholder","value","onChange","e","target","includes","style","color","onKeyDown","key","command","replaceAll","jsonCommand","JSON","parse","AnimateEngine","error","InfoCard","algorithmType","algorithmID","isOpenHover","avgTimeComplexity","worstTimeComplexity","bestTimeComplexity","memoryComplexity","stable","descriptionArray","creditText","credit","description","split","card","map","item","href","BASE","CHECKING","DONE","TEXT","SortingVisualiser","sortingCookie","document","cookie","find","row","startsWith","cookieData","replace","animationtype","urlAnimation","useLocation","search","Object","keys","algoData","setArray","animationSpeed","setAnimationSpeed","window","innerWidth","numBars","setNumBars","setRunTime","setSwaps","setComparisons","animationActive","setAnimationActive","activeAlgorithm","setActiveAlgorithm","isTerminalOpen","setIsTerminalOpen","activeTimeouts","setActiveTimeouts","activeIntervals","setActiveIntervals","commandCode","indexArray","type","Array","isArray","toLowerCase","prevState","newArray","forEach","abs","y","id1","id2","undefined","tmp1","tmp2","values","colorCode","subCommands","interval","currentCommandIdx","intervalID","setInterval","clearInterval","curIntervals","commandsToRun","repeats","intervalBetweenEach","parseInt","currentIteration","intervalIdentifier","curAIntervals","commandsToExecute","waitFor","timeoutID","curTimeouts","numOfBars","Randvalues","random","newRuntime","newComparisons","newSwaps","specificLoop","activeLoops","ALLen","pop","loop","splice","indexOf","activeWaits","AWLen","clearTimeout","location","reload","animationKey","resultData","getNumbersFromArrayState","alert","version","codeForColor","colorForCode","numbers","effect","barWidth","height","backgroundColor","width","margin","fontSize","createBars","disabled","min","max","name","SortingVisualiserPage","bars","PathfindingVisualiser","PathfindingVisualiserPage","AlgoriComputePage","Container","children","CHANGES_COLORS","Item","changes","ItemInfo","date","HomePage","isAllOpen","setIsAllOpen","isNewestFirst","setIsNewestFirst","changeLogItems","changeLogData","reverse","changeItems","dontDisplay","displayAfter","day","month","year","Date","getTime","afterDate","modifications","isNext","info","titleBgColor","titleTxtColor","infoBgColor","infoTxtColor","InDevPage","history","useHistory","pathname","LatestChangesCard","closeFunc","allowInDevPages","vars","devMode","currentVersion","versionNumber","versionID","lastestChangeID","App","showNewVersion","setShowNewVersion","join","curVer","path","UnavailablePage","changelogData","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.750a278e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './style.css'\r\n\r\n\r\nfunction Menu(){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    \r\n    return (\r\n        <div>\r\n        {/* {<div className='hoverToOpen' onMouseEnter={() => {console.log(true)}}></div> */}\r\n        {isOpen ? <div className='background-layer' onClick = {() => {setIsOpen(false)}}></div> : null}\r\n        <div className={isOpen ? 'menuCard': 'menuCard closed'} /*onMouseEnter={() => {setIsOpen(true)}} onMouseLeave={() => {setIsOpen(false)}}*/>\r\n            \r\n            <br />\r\n            <br />\r\n            <button onClick={() => setIsOpen(!isOpen)} className='openMenuButton' >\r\n                {isOpen ? <i className=\"material-icons \">menu_open</i> : <i className=\"material-icons \">menu</i> }\r\n            </button>\r\n            {isOpen ? [<NavLink exact className='link' activeClassName='current' to='/'><span title='Home'><i className=\"material-icons item\">home</i></span></NavLink>,\r\n                       <NavLink className='link' activeClassName='current' to='/sort'><span title='Sorting Visualiser'><i className=\"material-icons item\">bar_chart</i></span></NavLink>,\r\n                       <NavLink className='link unavailable' activeClassName='current' to='/pathfind'><span title='Pathfinding Visualiser'><i className=\"material-icons item\">directions</i></span></NavLink>,\r\n                       <NavLink className='link unavailable' activeClassName='current' to='/compute'><span title='Algori Compute'><i className=\"material-icons item\">functions</i></span></NavLink>] \r\n                       : null}\r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","function sort(array: number[]): [number[],object[],number]{\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        \r\n        for (let j = 0; j < sortedArray.length - 1 - i; j++){\r\n            animations.push([\"setColor\", [j,j+1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] > sortedArray[j+1]){\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j+1]\r\n                sortedArray[j+1] = tmp \r\n                animations.push([\"swap\",j,j+1])\r\n                swaps++\r\n            }\r\n            animations.push([\"setColor\",[j,j+1],\"$BASE\"])\r\n        }\r\n        animations.push([\"setColor\",[sortedArray.length - 1 - i],\"$DONE\"])\r\n    }\r\n\r\n   \r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [0], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n\r\n}\r\n\r\nfunction bubbleSort(array: number[]): any{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return (command)\r\n}\r\n\r\n\r\nexport default bubbleSort","// FROM: https://levelup.gitconnected.com/heapsort-for-javascript-newbies-598d25477d55\r\n//TODO: Improve Animations\r\n\r\n\r\nfunction swap(array: number[], idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push([\"swap\", idx1, idx2])\r\n}\r\n\r\n\r\nfunction heapify(array: number[], length: number, idx: number, animations: object[], data: any){\r\n    let largest:number = idx\r\n    let left:number = idx * 2 + 1\r\n    let right:number = left + 1\r\n\r\n    animations.push([\"setColor\", [left,right], \"$CHECKING\"])\r\n    data.comparisons++\r\n    if(left < length && array[left] > array[largest]) {\r\n        largest = left\r\n    }\r\n    data.comparisons++\r\n    if(right < length && array[right] > array[largest]){\r\n        largest = right\r\n    }\r\n\r\n    animations.push([\"setColor\", [left,right], \"$BASE\"])\r\n\r\n    if(largest !== idx){\r\n        data.swaps++\r\n        swap(array, idx, largest, animations)\r\n        heapify(array, length, largest, animations, data)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction sort(array: number[], animations: object[], data: any){\r\n    let length = array.length\r\n    let idx = Math.floor(length / 2 - 1)\r\n    let k = length - 1;\r\n\r\n    while (idx >= 0) {\r\n        heapify(array, length, idx, animations, data)\r\n        idx--\r\n    }\r\n\r\n    while(k >= 0){\r\n        data.swaps++\r\n        swap(array, 0, k, animations)\r\n        heapify(array, k, 0, animations, data)\r\n        //animations.push({command: 'setColor',id: [k],color: '$DONE'})\r\n        k--\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n\r\n\r\nfunction heapSort(array: number[]){\r\n    let startTime = performance.now()\r\n    var animations: object[] = [];\r\n    var data = {\r\n        swaps: 0,\r\n        comparisons: 0\r\n    }\r\n    let sortedArray = sort(array, animations,data)\r\n\r\n    let endTime = performance.now()\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n\r\n    let runTime = endTime - startTime\r\n\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", data.comparisons])\r\n    endAni.push([\"setSwapsDisplay\", data.swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\nexport default heapSort","\r\n\r\n\r\n\r\nfunction sort(array: number[]){\r\n    let startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length; i++){\r\n        for (let j = i; j > 0; j--){\r\n            animations.push([\"setColor\", [j,j-1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] < sortedArray[j-1]) {\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j-1]\r\n                sortedArray[j-1] = tmp\r\n                swaps++\r\n                animations.push([\"swap\", j, j-1])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n                break;\r\n            }\r\n            animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n        }\r\n    }\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction insertionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default insertionSort","\r\nfunction sort(array: any, animations: any): any {\r\n    let sortedArray = array.slice()\r\n    let swaps = 0\r\n\r\n    for (let i = 0; i < Math.floor(sortedArray.length / 2); i++){\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$CHECKING\"])\r\n        let tmp = sortedArray[i]\r\n        sortedArray[i] = sortedArray[sortedArray.length-1-i]\r\n        sortedArray[sortedArray.length-1-i] = tmp\r\n        swaps++\r\n        animations.push([\"swap\", i, (sortedArray.length-1-i)])\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [(Math.ceil(sortedArray.length / 2)) - 1], \"$DONE\"])\r\n\r\n    return [sortedArray, animations, swaps]\r\n\r\n\r\n}\r\n\r\nfunction reverseArray(array: number[]){\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n    let swaps:number\r\n\r\n\r\n    [sortedArray, animations, swaps] = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", 0])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default reverseArray","const COLORS = {\r\n    CURRENT_MIN: '#3e09ba',\r\n}\r\n\r\n\r\nfunction sort(array: number[]) {\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        let minValIdx = i\r\n        for (let j = i + 1; j < sortedArray.length; j++){\r\n            animations.push([\"setColor\", [j], \"$CHECKING\"])\r\n            comparisons++\r\n            if (array[j] < array[minValIdx]){\r\n                animations.push([\"setColor\", [minValIdx], \"$BASE\"])\r\n                minValIdx = j\r\n                animations.push([\"setColor\", [j], COLORS.CURRENT_MIN])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j+1], \"$BASE\"])\r\n            }  \r\n\r\n                      \r\n        }\r\n        swaps++\r\n        let tmp = array[i]\r\n        array[i] = array[minValIdx]\r\n        array[minValIdx] = tmp\r\n        animations.push([\"swap\", i, minValIdx])\r\n        animations.push([\"setColor\", [i], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [-1], \"$DONE\"])\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRunTimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction selectionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default selectionSort;","import React, { useEffect, useState } from 'react'\r\nimport './style.css'\r\n\r\nfunction Console(props){\r\n    const [isOpen, setIsOpen] = useState(props.display)\r\n    const [textColor, setTextColor] = useState('white')\r\n    const [commandText, setCommandText] = useState('')\r\n    const [responseText, setResponseText] = useState('')\r\n\r\n    useEffect(() => {\r\n        setIsOpen(props.display)\r\n    }, [props.display])\r\n\r\n    function responseHandler(response) {\r\n        response[0] === 'ERROR' ? setTextColor('red') : setTextColor('green')\r\n        setResponseText(`${response[1]}`)\r\n        setTimeout(() => {\r\n            setResponseText('')\r\n        }, 1000)\r\n        console.log(response[1])\r\n    }\r\n\r\n    function handleConsole(e){\r\n        if (e.key !== 'Enter') return\r\n        let command = commandText.replaceAll(\"'\",'\"')\r\n        console.log(`Command: ${command}`)\r\n        try {\r\n            let jsonCommand = JSON.parse(command)\r\n            let response = props.AnimateEngine(jsonCommand)\r\n            responseHandler(response)\r\n        } catch (error) {\r\n            console.log(error)\r\n            responseHandler([\"ERROR\", \"Invalid Syntax\"])\r\n        }\r\n    }\r\n\r\n    function consoleChangeHandler(e){\r\n        if (e.target.value.includes('cls')) {\r\n            setCommandText('')\r\n        } else {\r\n            setCommandText(e.target.value)\r\n        }\r\n        \r\n        setTextColor('white')\r\n    }\r\n\r\n    let terminal = (\r\n        <div className='consoleBox'>\r\n            <input placeholder='Console' value={commandText} onChange={consoleChangeHandler} style={{color: textColor}}className='console' onKeyDown={handleConsole}></input>\r\n            <p style={{color: textColor}}>{responseText}</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {isOpen ? terminal : null}\r\n        </div>\r\n        \r\n    )\r\n        \r\n}\r\n\r\nexport default Console","import React, { useState } from 'react'\r\nimport './style.css'\r\nimport data from '../../data/algorithmInfo.json'\r\n\r\n\r\nfunction InfoCard({algorithmType, algorithmID}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isOpenHover, setIsOpenHover] = useState(false)\r\n    \r\n\r\n    let title = 'No Information Available'\r\n    let avgTimeComplexity = ''\r\n    let worstTimeComplexity = ''\r\n    let bestTimeComplexity  = ''\r\n    let memoryComplexity = ''\r\n    let stable = ''\r\n    let descriptionArray = []\r\n    let creditText = ''\r\n    let credit = ''\r\n\r\n    if (data[algorithmType][algorithmID]){\r\n        title = data[algorithmType][algorithmID].title || 'Unknown'\r\n        avgTimeComplexity = data[algorithmType][algorithmID].avgTimeComplexity || 'Unknown'\r\n        worstTimeComplexity = data[algorithmType][algorithmID].worstTimeComplexity || 'Unknown'\r\n        bestTimeComplexity = data[algorithmType][algorithmID].bestTimeComplexity || 'Unknown'\r\n        memoryComplexity = data[algorithmType][algorithmID].memoryComplexity || 'Unknown'\r\n        stable = data[algorithmType][algorithmID].stable || 'Unknown'\r\n        descriptionArray = data[algorithmType][algorithmID].description.split('\\n')\r\n        creditText = data[algorithmType][algorithmID].creditText || 'Description From'\r\n        credit = data[algorithmType][algorithmID].credit\r\n    }\r\n    \r\n\r\n    let card = (<div className='card' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/>\r\n                    <p className='title'>{title}</p>\r\n                    <hr></hr>\r\n                    <p className='meta'>{`Worst Case Time Complexity: ${worstTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Average Time Complexity: ${avgTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Best Case Time Complexity: ${bestTimeComplexity}`}</p>\r\n                    <p className='meta'>{`Memory Complexity: ${memoryComplexity}`}</p>\r\n                    <p className='meta'>Stable: {stable} <i className={'material-icons help'} title='Whether the position of equal values stay the same relative to each other'>help</i></p>\r\n                    <hr></hr>\r\n                    {descriptionArray.map((item,idx) => <p className='description'>{item}</p>)}\r\n                    {credit ? <a className='credit' href={credit} >{`${creditText}: ${credit}`}</a> : null}     \r\n                </div>)\r\n    return (\r\n            <div className='card-container' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/ >\r\n                {isOpen || isOpenHover ? card : null}\r\n                <button onClick={() => setIsOpen(!isOpen)} className='openCardButton' >\r\n                {isOpen ? <i className=\"material-icons\">close</i> : <i className=\"material-icons \">info</i> }\r\n                </button>  \r\n            </div>\r\n            )\r\n\r\n    }\r\n\r\nexport default InfoCard","import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport Console from '../Console'\r\nimport InfoCard from '../InfoCard'\r\nimport algoData from '../../data/algorithmInfo.json'\r\nimport './style.css'\r\n\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc', \r\n    CHECKING: 'red',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\n\r\n\r\nfunction SortingVisualiser(props){\r\n\r\n    //#region State Creation \r\n    let sortingCookie = document.cookie.split('; ').find(row => row.startsWith('sort='))\r\n    if (!sortingCookie || sortingCookie == ''){\r\n        sortingCookie = \"100,bubbleSort\"\r\n    } else {\r\n        sortingCookie = sortingCookie.split('=')[1]\r\n    }\r\n    const cookieData = sortingCookie.replace(' ','').split(',')\r\n    let animationtype = cookieData[0]\r\n    let urlAnimation = useLocation().search.replace('?','')\r\n    if (urlAnimation && Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = urlAnimation\r\n    if(!Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = 'bubbleSort'\r\n    const [array, setArray] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [numBars, setNumBars] = useState(Math.round((window.innerWidth / 12) / 2))\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [swaps, setSwaps] = useState(0)\r\n    const [comparisons, setComparisons] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(animationtype || 'bubbleSort')\r\n    const [isTerminalOpen, setIsTerminalOpen] = useState(false)\r\n    const [activeTimeouts, setActiveTimeouts] = useState([])\r\n    const [activeIntervals, setActiveIntervals] = useState([])\r\n\r\n    //#endregion\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `sort=${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        AnimateEngine([\"resetArray\",numBars])\r\n    }, [])\r\n\r\n\r\n    function AnimateEngine(command){\r\n        try {\r\n            let commandCode = command[0]\r\n            \r\n            let response = [\"PENDING\", \"In progress\"]\r\n            console.log(`Command: ${commandCode}`)\r\n            switch(commandCode){\r\n                case 'setState':\r\n                        let indexArray = command[1]\r\n                        let type = command[2]\r\n                        let data = command[3]\r\n\r\n                        if (!indexArray || !Array.isArray(indexArray)) return [\"ERROR\", \"Invalid Indexs\"]\r\n                        if (!type || typeof type !== 'string') return [\"ERROR\", \"Invalid Type\"]\r\n                        \r\n                        type = type.toLowerCase()\r\n\r\n                        if (type === 'color'){\r\n                            if(typeof data !== 'string') return [\"ERROR\", \"Invalid Data\"]\r\n                            if (data.includes('$')) data = COLORS[data.replace('$','')]\r\n                        } else if (type === 'value'){\r\n                            if(typeof data !== 'number') return [\"ERROR\", \"Invalid Data\"]\r\n                        } else {\r\n                            return [\"ERROR\", \"Invalid Type\"]\r\n                        }\r\n\r\n\r\n                        setArray(prevState => {\r\n                            let newArray = prevState.slice()\r\n                            \r\n                            indexArray.forEach(idx => {\r\n                                if (typeof idx == \"number\" && idx >= 0 && idx < newArray.length){\r\n                                    newArray[idx][type] = data\r\n\r\n                                } if (typeof idx == \"number\" && idx < 0 && Math.abs(idx) <= newArray.length){\r\n                                    newArray[newArray.length - Math.abs(idx)][type] = data\r\n                                \r\n                                } else if (idx === '$ALL'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$LHALF'){\r\n                                    for (let y = 0; y < Math.ceil(newArray.length / 2); y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$RHALF'){\r\n                                    for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$ODD'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 0) newArray[y][type] = data\r\n                                        \r\n                                    }\r\n    \r\n                                } else if (idx === '$EVEN'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 1) newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$MID'){\r\n                                    newArray[Math.floor((newArray.length - 1) / 2)][type] = data\r\n                                    newArray[Math.ceil((newArray.length - 1) / 2)][type] = data\r\n    \r\n                                }\r\n                                \r\n                                \r\n                            });\r\n                            \r\n                            return newArray\r\n                        });\r\n                            \r\n\r\n                    break;\r\n                \r\n                case 'sc':\r\n                case 'setColor': // Sets color of bars. Syntax: [\"setColor\",[array of ids or $ALL, $LHALF, $RHALF], \"valid css color OR valid inbuilt variable prefixed with $\"]\r\n                    let idxes = command[1]\r\n                    let color = command[2]\r\n                    \r\n                    AnimateEngine([\"setState\", idxes, 'color', color])\r\n                    break;\r\n                \r\n                case 'swap':\r\n                    let id1 = command[1]\r\n                    let id2 = command[2]\r\n                    if (id1 == undefined || typeof id1 !== 'number') return [\"ERROR\", \"Invalid id1\"]\r\n                    if (id2 == undefined || typeof id2 !== 'number') return [\"ERROR\", \"Invalid id2\"]\r\n                    setArray(prevState => {\r\n                        id1 = command[1]\r\n                        id2 = command[2]\r\n                        let newArray = prevState.slice()\r\n\r\n                        if (id1 < 0) id1 = newArray.length - Math.abs(id1)\r\n                        if (id2 < 0) id2 = newArray.length - Math.abs(id2)\r\n                        \r\n                        if (id1 >= 0 && id1 < newArray.length && id2 >= 0 && id2 < newArray.length){\r\n                            const tmp1 = {...newArray[id1]}\r\n                            const tmp2 = {...newArray[id2]}\r\n                            newArray[id1] = tmp2\r\n                            newArray[id2] = tmp1\r\n                        }\r\n                        \r\n        \r\n                        return newArray\r\n                    })\r\n        \r\n                    break;\r\n                \r\n                case 'setValue':\r\n                    let idxs = command[1]\r\n                    let value = command[2]\r\n\r\n                    AnimateEngine([\"setState\", idxs, 'value', value])\r\n                    break;\r\n                \r\n                case 'setArray':\r\n                    let values = command[1]\r\n                    let colorCode = command[2]\r\n\r\n                    if (!values || !Array.isArray(values)) return [\"ERROR\", \"Invalid Values\"]\r\n                    if (!colorCode || typeof colorCode !== 'string') return [\"ERROR\", \"Invalid Color\"]\r\n                    setArray(prevState => {\r\n                        let newArray = []\r\n                        let color = command[2]\r\n                        if (color.includes('$')) color = COLORS[color.replace('$','')]\r\n        \r\n                        values.forEach(value => {\r\n                        if (typeof value == \"number\"){\r\n                                newArray.push({value: value, color: color})\r\n                            }\r\n                            \r\n                        });\r\n                        setNumBars(newArray.length)\r\n                        return newArray\r\n                    })\r\n                    break;\r\n                        \r\n                case 'do':\r\n                    let subCommands = command[1]\r\n                    let interval = command[2]\r\n\r\n                    if (!subCommands || !Array.isArray(subCommands)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!interval && interval != 0 || typeof interval !== 'number' && interval != '$userSet' || interval < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n                    if (interval == '$userSet') interval = animationSpeed\r\n                   \r\n                    if (interval == 0) {\r\n                        for (let i = 0; i < subCommands.length; i++){\r\n                            AnimateEngine(subCommands[i])\r\n                        }\r\n                        break; \r\n                    }\r\n\r\n\r\n                    \r\n\r\n                    AnimateEngine(subCommands[0])\r\n                    let currentCommandIdx = 1\r\n\r\n                    let intervalID = setInterval(() => {\r\n                        if (currentCommandIdx >= subCommands.length){\r\n                            clearInterval(intervalID)\r\n                            //AnimateEngine([\"clearLoop\", `${intervalID}`])\r\n                            return\r\n                        }\r\n\r\n                        AnimateEngine(subCommands[currentCommandIdx])\r\n                        currentCommandIdx++\r\n                    }, interval)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curIntervals = prevState.slice()\r\n                        curIntervals.push(intervalID)\r\n                        return curIntervals\r\n                    })\r\n                    break;\r\n                \r\n                case 'doFor':\r\n                    let commandsToRun = command[1]\r\n                    let repeats = command[2]\r\n                    let intervalBetweenEach = command[3]\r\n\r\n                    if (!commandsToRun || !Array.isArray(commandsToRun)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!repeats && repeats !== 0 || typeof repeats !== 'number' || repeats < 0) return [\"ERROR\", \"Invalid Repeats\"]\r\n                    if (!intervalBetweenEach && intervalBetweenEach !== 0 || (typeof intervalBetweenEach !== 'number' && intervalBetweenEach !== '$userSet') || intervalBetweenEach < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n\r\n                    if (intervalBetweenEach === '$userSet'){\r\n                        intervalBetweenEach = parseInt(animationSpeed)\r\n                    }\r\n                    \r\n                    let currentIteration = 1\r\n\r\n                    AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n                    \r\n                    let intervalIdentifier = setInterval(() => {\r\n                        if (currentIteration >= repeats && repeats !== 0) {\r\n                            clearInterval(intervalIdentifier)\r\n                            return;\r\n                        }\r\n\r\n                        AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n\r\n                        currentIteration++\r\n                    }, intervalBetweenEach * commandsToRun.length)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curAIntervals = prevState.slice()\r\n                        curAIntervals.push(intervalIdentifier)\r\n                        return curAIntervals\r\n                    })\r\n                    break;\r\n\r\n                case 'doSim':\r\n                    let toRunCommands = command[1]\r\n                    AnimateEngine([\"do\", toRunCommands, 0])\r\n                    break;\r\n\r\n                case 'doIn':\r\n                    let commandsToExecute = command[1]\r\n                    let waitFor = command[2]\r\n\r\n                    if (!commandsToExecute || !Array.isArray(commandsToExecute)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!waitFor || typeof waitFor !== 'number' || waitFor <= 0) return [\"ERROR\", \"Wait Time Invalid\"]\r\n                    let timeoutID = setTimeout(() => {\r\n                        command[1].forEach((value) => {\r\n                            console.log(value)\r\n                            AnimateEngine(value)\r\n                        })\r\n                    }, command[2] )\r\n\r\n                    setActiveTimeouts(prevState => {\r\n                        let curTimeouts = prevState.slice()\r\n                        curTimeouts.push(timeoutID)\r\n                        return curTimeouts\r\n                    })\r\n\r\n                    break;\r\n                \r\n                case 'ra':\r\n                case 'resetArray':\r\n                    \r\n                    let numOfBars = command[1]\r\n                    if (!numOfBars) numOfBars = numBars\r\n                    if (typeof numOfBars !== 'number') return [\"ERROR\", \"Invalid Number of bars\"]\r\n                    let Randvalues = []\r\n                    for (let i = 0; i < numOfBars; i++){\r\n                        Randvalues.push(Math.round(Math.random() * 60) + 13)\r\n                    }\r\n                    AnimateEngine([\"setArray\",Randvalues,\"$BASE\"])\r\n                    break;\r\n                \r\n                case 'setRunTimeDisplay':\r\n                    let newRuntime = command[1]\r\n                    if (!newRuntime) return [\"ERROR\", \"Invalid Runtime\"]\r\n                    setRunTime(newRuntime)\r\n                    break;\r\n\r\n                case 'setComparisonsDisplay':\r\n                    let newComparisons = command[1]\r\n                    if (!newComparisons) return [\"ERROR\", \"Invalid Comparisons\"]\r\n                    setComparisons(newComparisons)\r\n                    break;\r\n\r\n                case 'setSwapsDisplay':\r\n                    let newSwaps = command[1]\r\n                    if (!newSwaps) return [\"ERROR\", \"Invalid Swaps\"]\r\n                    setSwaps(newSwaps)\r\n                    break;\r\n\r\n                case 'startAnimation':\r\n                    setAnimationActive(true)\r\n                    break;\r\n\r\n                case 'endAnimation':\r\n                    setAnimationActive(false)\r\n                    break;\r\n\r\n                case 'clearLoop': //FIXME: Dosen't work\r\n                    let specificLoop = command[1]\r\n                    let activeLoops = activeIntervals.slice()\r\n                    if (specificLoop == undefined){\r\n                        let ALLen = activeLoops.length\r\n                        for (let i = 0; i < ALLen; i++){\r\n                            clearInterval(activeLoops.pop())\r\n                        }\r\n                    } else if (typeof specificLoop === 'number') {\r\n                        let loop = activeLoops.splice(specificLoop, 1)[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    } else if (typeof specificLoop === 'string'){\r\n                        let loop = activeLoops.indexOf(parseInt(specificLoop))[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    }\r\n\r\n                    setActiveIntervals(activeLoops)\r\n                    \r\n                    \r\n                    break;\r\n\r\n                case 'clearWaits': //FIXME: Dosen't work\r\n                    let activeWaits = activeTimeouts.slice()\r\n                    let AWLen = activeWaits.length\r\n                    for (let i = 0; i < AWLen; i++){\r\n                        clearTimeout(activeWaits.pop())\r\n                    }\r\n                    break;\r\n                \r\n                case 'ct':\r\n                case 'clearTimers': //FIXME: Dosen't work\r\n                    AnimateEngine([\"clearLoops\"])\r\n                    AnimateEngine([\"clearWaits\"])\r\n                    break;\r\n                \r\n                case 'r':\r\n                case 'reload':\r\n                    window.location.reload()\r\n                    break;\r\n                    \r\n                case 'executeInternalAnimation':\r\n                    let animationKey = command[1]\r\n                    if (!animationKey || typeof animationKey !== 'string' ) return [\"ERROR\", \"Invalid Animation Key\"]\r\n                    let resultData = []\r\n                    switch(animationKey){\r\n                        case 'bubbleSort':\r\n                            resultData = bubbleSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'selectionSort':\r\n                            resultData = selectionSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'insertionSort':\r\n                            resultData = insertionSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'quickSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = quickSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'heapSort':\r\n                            resultData = heapSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'mergeSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = mergeSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'reverseArray':\r\n                            resultData = reverseArray(getNumbersFromArrayState())\r\n                            break;\r\n                        default:\r\n                            return [\"ERROR\", \"Invalid Animation Key\"]\r\n                            break;\r\n                    }\r\n\r\n                    AnimateEngine([\"doSim\", [resultData]])\r\n                    break;\r\n\r\n                case 'version':\r\n                    let version = document.cookie.split('; ').find(row => row.startsWith('version=')).split('=')[1]\r\n                    alert(`Version: ${version}`)\r\n                    break;\r\n\r\n\r\n                case 'defaultColor':\r\n                    let codeForColor = command[1]\r\n                    let colorForCode = command[2]\r\n                    COLORS[codeForColor] = colorForCode\r\n                    break;\r\n                \r\n                default:\r\n                    return [\"ERROR\", \"Unknown Command\"]\r\n                    break;\r\n            }\r\n\r\n            return [\"SUCCESS\", \"Exectuted Successfully\"]\r\n\r\n        } catch (error){\r\n            console.error(error)\r\n            return [\"ERROR\", \"Try Failed\"]\r\n        }\r\n    \r\n    }\r\n\r\n    function getNumbersFromArrayState(){\r\n        let numbers = []\r\n        for (let i = 0; i < array.length; i++){\r\n            numbers.push(array[i].value)\r\n        }\r\n\r\n        return numbers\r\n    }\r\n\r\n    function handleSortClick(){\r\n        if (animationActive) return false\r\n        console.log(AnimateEngine([\"executeInternalAnimation\", activeAlgorithm]))\r\n    }\r\n\r\n    function createBars(){\r\n        let barWidth = ((window.innerWidth / 100) * 90) / numBars\r\n        \r\n        let barsDivs = array.map((item, idx) => {\r\n            let style = {\r\n                height: `${item.value}%`, \r\n                backgroundColor: `${item.color}`,\r\n                width: barWidth,\r\n                margin: barWidth / 4 > 20 ? 20 : barWidth / 4,\r\n                fontSize: barWidth > 20 ? barWidth / 3 : 0,\r\n                color: COLORS.TEXT  \r\n            }\r\n\r\n            return (<div key={idx} title={item.value}className='bar' style={style}>{item.value}</div>)\r\n        })\r\n\r\n        return barsDivs\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='bar-container'>\r\n                <div className='inner-bar-container'>\r\n                    {createBars()}\r\n                </div>\r\n                \r\n            </div>\r\n            <nav>\r\n            <i className='material-icons consoleButton' title={isTerminalOpen ? 'Close Terminal': 'Open Terminal'} onClick={() => setIsTerminalOpen(!isTerminalOpen)}>{isTerminalOpen ? 'code_off': 'code'}</i>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>Animation Time ({animationSpeed}ms) </p>\r\n                <input disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(parseInt(e.target.value)); \r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {AnimateEngine([\"resetArray\", numBars])}}} className={!animationActive ? 'button reset' : 'button-disabled reset'}>Reset</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={!animationActive ? 'button sort' : 'button-disabled sort'}>Sort</button>\r\n                <select disabled={animationActive} value={activeAlgorithm} name={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                <option disabled className='algorithmsTitle' value='otherTitle'>Sorting Algorithms</option>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option disabled className='algorithmsTitle' value='otherTitle'>Other Algorithms</option>\r\n                    <option value='reverseArray'>Reverse Array</option>\r\n                </select>\r\n                \r\n                    <div className='sliderBox'>\r\n                        <p className={animationActive ? 'disabled' : ''}>Number of Bars ({numBars})</p>\r\n                        <input disabled={animationActive} type=\"range\" min=\"5\" max={`${Math.round(window.innerWidth / 12) - 10}`} value={numBars} onChange={e => {\r\n                            AnimateEngine([\"resetArray\",parseInt(e.target.value)])\r\n                        }}></input>\r\n                    </div>\r\n                    \r\n                    \r\n\r\n                <p title={`Swaps: ${swaps} \\nComparisons: ${comparisons}`} className={animationActive ? 'timeTaken disabled' : 'timeTaken'}>{runTime !== 0 ? `Time: ${runTime}ms`: `Time: N/A`}</p>\r\n                \r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n\r\n            <Console display={isTerminalOpen} AnimateEngine={AnimateEngine}/>\r\n \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualiser","import React from 'react'\r\nimport SortingVisualiser from '../components/SortingVisualiser/'\r\n\r\n\r\nfunction SortingVisualiserPage(){\r\n    return (\r\n        <SortingVisualiser bars={30} animations={[]}/>\r\n    )\r\n}\r\n\r\nexport default SortingVisualiserPage","import React from 'react'\r\n\r\n\r\nfunction PathfindingVisualiser(){\r\n    return (\r\n        <div>\r\n            <p>Test</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PathfindingVisualiser","import React from 'react'\r\nimport PathfindingVisualiser from '../components/PathfindingVisualiser/index'\r\n\r\nfunction PathfindingVisualiserPage(){\r\n    return (<PathfindingVisualiser />)\r\n}\r\n\r\n\r\nexport default PathfindingVisualiserPage","import React from 'react'\r\n\r\nfunction AlgoriComputePage(){\r\n    return (<p>Compute Page</p>)\r\n}\r\n\r\n\r\nexport default AlgoriComputePage","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction Container(props){\r\n    \r\n    return (\r\n        <div className='changelogContainer'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Container","import React, {useEffect, useState} from 'react'\r\nimport './style.css'\r\n\r\n\r\nconst CHANGES_COLORS = {\r\n    // Finished Changes\r\n    \"ADDED\": \"#1b9429\",\r\n    \"CHANGED\": \"#2b6bba\",\r\n    \"DEPRECATED\": \"#a6602b\",\r\n    \"REMOVED\": \"#a62b2b\",\r\n    \"FIXED\": \"#218f7c\",\r\n    \"GENERAL\": \"#e0b53d\",\r\n    // Planned Changes\r\n    \"ADD\": \"#1b9429\",\r\n    \"CHANGE\": \"#2b6bba\",\r\n    \"DEPRECATE\": \"#a6602b\",\r\n    \"REMOVE\": \"#a62b2b\",\r\n    \"FIX\": \"#218f7c\"\r\n}\r\n\r\nfunction Item(props){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setIsOpen(props.isOpen)\r\n    }, [props.isOpen])\r\n    \r\n\r\n\r\n    let changes = false\r\n\r\n    if (props.changes){\r\n        changes = props.changes.map((value, idx) => {\r\n            return (<li style={{color: `${CHANGES_COLORS[value[0]]}`}}>{value[0]} - {value[1]}</li>)\r\n        })\r\n    }\r\n\r\n    let ItemInfo = (\r\n        <div className='itemInfoContainer'>\r\n            {props.children}\r\n            {changes ? <ul className='changesList'>{changes}</ul> : null}\r\n            <p className='date'>{props.date || 'Unknown'}</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div onClick={() => setIsOpen(!isOpen)} className='fullItemContainer'>\r\n            <div className='TitleContainer' >\r\n                <p className='version'>{props.version}</p>\r\n                <p>{props.title}</p>\r\n            </div>\r\n            {isOpen ? ItemInfo : null}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Item","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Container from '../components/ChangeLog/Container'\r\nimport Item from '../components/ChangeLog/Item'\r\nimport './HomePageStyle.css'\r\n\r\n\r\nimport changeLogData from '../data/changelogData.json'\r\n\r\n\r\nfunction HomePage(){\r\n    const [isAllOpen, setIsAllOpen] = useState(false)\r\n    const [isNewestFirst, setIsNewestFirst] = useState(true)\r\n    console.log(isAllOpen)\r\n\r\n    let changeLogItems = changeLogData.slice()\r\n    if (isNewestFirst) changeLogItems = changeLogItems.reverse()\r\n\r\n    let changeItems = changeLogItems.map((value, idx) => {\r\n        let dontDisplay = value.dontDisplay\r\n        let displayAfter = value.displayAfter\r\n        if (displayAfter) {\r\n            const [day, month, year] = displayAfter.split('/')\r\n            displayAfter = `${year}-${month}-${day}`\r\n            \r\n        }\r\n        let date = new Date().getTime()\r\n        let afterDate = Date.parse(displayAfter)\r\n        let timeUntil = afterDate - date\r\n        if ((!dontDisplay && !displayAfter) || (timeUntil <= 0)) return <Item key={idx}  isOpen={isAllOpen} changes={value.modifications} date={value.isNext ? `Planned for ${value.date}` : value.date} version={value.isNext ? 'Next update' : value.version} title={value.title}> <p>{value.info}</p> </Item>\r\n    })\r\n\r\n    return (\r\n        <div className='changeLog'>\r\n            <div className='changeLogMenuItems'>\r\n                <div className='openAllChangesButton' onClick={() => setIsAllOpen(!isAllOpen)}>{isAllOpen ? 'Close All' : 'Open All'}</div>\r\n                <div className='openAllChangesButton' onClick={() => setIsNewestFirst(!isNewestFirst)}>{isNewestFirst ? 'Order Oldest to Newest' : 'Order Newest to Oldest'}</div>\r\n            </div>\r\n            <Container titleBgColor='' titleTxtColor='' infoBgColor='' infoTxtColor=''>\r\n                {changeItems}\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomePage","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport './UnavailablePageStyle.css'\r\nfunction InDevPage(props){\r\n    let history = useHistory()\r\n    console.log(history)\r\n    return (\r\n        <div className='inDevPage'>\r\n            <div className='InDevDiv'>\r\n                <i className=\"material-icons no-icon\">not_interested</i>\r\n                <h1 className='inDevPageh1'>{`${history.location.pathname} is unavailable`}</h1>\r\n                <p className='inDevPagep'>This page does not exist or is under maintenance. Check back again later.</p>\r\n                <Link to='/'><span className='inDevGoHomeLink'>Go Home</span></Link>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InDevPage","import React from 'react'\r\nimport './style.css'\r\n\r\nconst CHANGES_COLORS = {\r\n    // Finished Changes\r\n    \"ADDED\": \"#1b9429\",\r\n    \"CHANGED\": \"#2b6bba\",\r\n    \"DEPRECATED\": \"#a6602b\",\r\n    \"REMOVED\": \"#a62b2b\",\r\n    \"FIXED\": \"#218f7c\",\r\n    \"GENERAL\": \"#e0b53d\",\r\n    // Planned Changes\r\n    \"ADD\": \"#1b9429\",\r\n    \"CHANGE\": \"#2b6bba\",\r\n    \"DEPRECATE\": \"#a6602b\",\r\n    \"REMOVE\": \"#a62b2b\",\r\n    \"FIX\": \"#218f7c\"\r\n}\r\n\r\n\r\nfunction LatestChangesCard(props){\r\n    let changes = false\r\n    if (props.changes){\r\n        changes = props.changes.map((value, idx) => {\r\n            return (<li style={{color: `${CHANGES_COLORS[value[0]]}`}}>{value[0]} - {value[1]}</li>)\r\n        })\r\n    }\r\n\r\n    let ItemInfo = (\r\n        <div className='latest-itemInfoContainer'>\r\n            {props.children}\r\n            {changes ? <ul className='changesList'>{changes}</ul> : null}\r\n            <p className='date'>{props.date || 'Unknown'}</p>\r\n        </div>\r\n    )\r\n\r\n\r\n    return (\r\n        <div className='latest-background' onClick={() => props.closeFunc(false)}>\r\n            <div className='latest-fullItemContainer'>\r\n                <div className='latest-TitleContainer' >\r\n                    <p className='version'>{`${props.version}  -  ${props.title}`}</p>\r\n                    <i onClick={() => {props.closeFunc(false)}} className=\"material-icons latest-close\">close</i>\r\n                </div>\r\n                {ItemInfo}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LatestChangesCard","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport SortingVisualiserPage from './pages/SortingVisualiserPage';\n\n\nimport {HashRouter as Router, Redirect, Route, Switch, useHistory} from 'react-router-dom'\n\nimport PathfindingVisualiserPage from './pages/PathfindingVisualiserPage';\nimport AlgoriComputePage from './pages/AlgoriComputePage';\nimport HomePage from './pages/HomePage';\nimport UnavailablePage from './pages/UnavailablePage';\nimport changelogData from './data/changelogData.json'\nimport LatestChangesCard from './components/LatestChangesCard';\nimport vars from './data/vars.json'\nconst allowInDevPages = vars.devMode\nconst currentVersion = vars.versionNumber\nconst versionID = vars.lastestChangeID\n\nfunction App() {\n  const [showNewVersion, setShowNewVersion] = useState(false)\n  useEffect(() => {\n    let version = document.cookie.split('; ').find(row => row.startsWith('version='))\n    if (!version || version == ''){\n      version = 0\n    } else {\n      version = version.split('=')[1].split('.')\n      if (version.length > 2) version.pop()\n      version = version.join('')\n      console.log(version)\n    }\n    console.log(version)\n    let curVer = currentVersion.split('.')\n    if (curVer.length > 2) curVer.pop()\n    curVer = curVer.join('')\n    console.log(curVer)\n    if (parseInt(curVer) > parseInt(version)){\n        setShowNewVersion(true)\n    }\n    document.cookie = `version=${currentVersion}`\n  },[])\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/sort'>\n            <SortingVisualiserPage />\n          </Route>\n          <Route path='/pathfind'>\n            {!allowInDevPages ? <UnavailablePage/> : null}\n            <PathfindingVisualiserPage />\n          </Route>\n          <Route path='/compute'>\n            {!allowInDevPages ? <UnavailablePage/> : null}\n            <AlgoriComputePage />\n          </Route>\n          <Route exact path='/'>\n            <HomePage />\n          </Route>\n          <Route>\n            <UnavailablePage/>\n          </Route>\n        </Switch>\n        \n        <Menu/>\n        {showNewVersion ? <LatestChangesCard closeFunc={setShowNewVersion} isOpen={true} changes={changelogData[versionID].modifications} date={changelogData[versionID].date} version={changelogData[versionID].version} title={changelogData[versionID].title}> <p>{changelogData[versionID].info}</p> </LatestChangesCard>: null}\n        \n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}