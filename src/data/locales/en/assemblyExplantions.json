{
    "instructions": {
        "ADC": {
            "name": "Add With Carry",
            "desc": "This instruction adds the contents of a memory location to the accumulator together with the carry bit. If overflow occurs the carry bit is set, this enables multiple byte addition to be performed.            "
        },
        "AND": {
            "name": "Logical AND",
            "desc": "A logical AND is performed, bit by bit, on the accumulator contents using the contents of a byte of memory.            "
        },
        "ASL": {
            "name": "Arithmetic Shift Left",
            "desc": "This operation shifts all the bits of the accumulator or memory contents one bit left. Bit 0 is set to 0 and bit 7 is placed in the carry flag. The effect of this operation is to multiply the memory contents by 2 (ignoring 2's complement considerations), setting the carry if the result will not fit in 8 bits."
        },
        "BCC": {
            "name": "Branch if Carry Clear",
            "desc": "If the carry flag is clear then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BCS": {
            "name": "Branch if Carry Set",
            "desc": "If the carry flag is set then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BEQ": {
            "name": "Branch if Equal",
            "desc": "If the zero flag is set then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BIT": {
            "name": "Bit Test",
            "desc": "This instructions is used to test if one or more bits are set in a target memory location. The mask pattern in A is ANDed with the value in memory to set or clear the zero flag, but the result is not kept. Bits 7 and 6 of the value from memory are copied into the N and V flags."
        },
        "BMI": {
            "name": "Branch if Minus",
            "desc": "If the negative flag is set then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BNE": {
            "name": "Branch if Not Equal",
            "desc": "If the zero flag is clear then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BPL": {
            "name": "Branch if Positive",
            "desc": "If the negative flag is clear then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BRK": {
            "name": "Force Interrupt",
            "desc": "The BRK instruction forces the generation of an interrupt request. The program counter and processor status are pushed on the stack then the IRQ interrupt vector at $FFFE/F is loaded into the PC and the break flag in the status set to one.",
            "note": "The interpretation of a BRK depends on the operating system. On the BBC Microcomputer it is used by language ROMs to signal run time errors but it could be used for other purposes (e.g. calling operating system functions, etc.)."
        },
        "BVC": {
            "name": "Branch if Overflow Clear",
            "desc": "If the overflow flag is clear then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "BVS": {
            "name": "Branch if Overflow Set",
            "desc": "If the overflow flag is set then add the relative displacement to the program counter to cause a branch to a new location."
        },
        "CLC": {
            "name": "Clear Carry Flag",
            "desc": "Set the carry flag to zero."
        },
        "CLD": {
            "name": "Clear Decimal Mode",
            "desc": "Sets the decimal mode flag to zero.",
            "note": "The state of the decimal flag is uncertain when the CPU is powered up and it is not reset when an interrupt is generated. In both cases you should include an explicit CLD to ensure that the flag is cleared before performing addition or subtraction."
        },
        "CLI": {
            "name": "Clear Interrupt Disable",
            "desc": "Clears the interrupt disable flag allowing normal interrupt requests to be serviced."
        },
        "CLV": {
            "name": "Clear Overflow Flag",
            "desc": "Clears the overflow flag."
        },
        "CMP": {
            "name": "Compare",
            "desc": "This instruction compares the contents of the accumulator with another memory held value and sets the zero and carry flags as appropriate.            "
        },
        "CPX": {
            "name": "Compare X Register",
            "desc": "This instruction compares the contents of the X register with another memory held value and sets the zero and carry flags as appropriate."
        },
        "CPY": {
            "name": "Compare Y Register",
            "desc": "This instruction compares the contents of the Y register with another memory held value and sets the zero and carry flags as appropriate."
        },
        "DEC": {
            "name": "Decrement Memory",
            "desc": "Subtracts one from the value held at a specified memory location setting the zero and negative flags as appropriate."
        },
        "DEX": {
            "name": "Decrement X Register",
            "desc": "Subtracts one from the X register setting the zero and negative flags as appropriate."
        },
        "DEY": {
            "name": "Decrement Y Register",
            "desc": "Subtracts one from the Y register setting the zero and negative flags as appropriate."
        },
        "EOR": {
            "name": "Exclusive OR",
            "desc": "An exclusive OR is performed, bit by bit, on the accumulator contents using the contents of a byte of memory."
        },
        "INC": {
            "name": "Increment Memory",
            "desc": "Adds one to the value held at a specified memory location setting the zero and negative flags as appropriate."
        },
        "INX": {
            "name": "Increment X Register",
            "desc": "Adds one to the X register setting the zero and negative flags as appropriate."
        },
        "INY": {
            "name": "Increment Y Register",
            "desc": "Adds one to the Y register setting the zero and negative flags as appropriate."
        },
        "JMP": {
            "name": "Jump",
            "desc": "Sets the program counter to the address specified by the operand."
        },
        "JSR": {
            "name": "Jump to Subroutine",
            "desc": "The JSR instruction pushes the address (minus one) of the return point on to the stack and then sets the program counter to the target memory address."
        },
        "LDA": {
            "name": "Load Accumulator",
            "desc": "Loads a byte of memory into the accumulator setting the zero and negative flags as appropriate."
        },
        "LDX": {
            "name": "Load X Register",
            "desc": "Loads a byte of memory into the X register setting the zero and negative flags as appropriate."
        },
        "LDY": {
            "name": "Load Y Register",
            "desc": "Loads a byte of memory into the Y register setting the zero and negative flags as appropriate."
        },
        "LSR": {
            "name": "Logical Shift Right",
            "desc": "Each of the bits in A or M is shift one place to the right. The bit that was in bit 0 is shifted into the carry flag. Bit 7 is set to zero."
        },
        "NOP": {
            "name": "No Operation",
            "desc": "The NOP instruction causes no changes to the processor other than the normal incrementing of the program counter to the next instruction."
        },
        "ORA": {
            "name": "Logical Inclusive OR",
            "desc": "An inclusive OR is performed, bit by bit, on the accumulator contents using the contents of a byte of memory."
        },
        "PHA": {
            "name": "Push Accumulator",
            "desc": "Pushes a copy of the accumulator on to the stack."
        },
        "PHP": {
            "name": "Push Processor Status",
            "desc": "Pushes a copy of the status flags on to the stack."
        },
        "PLA": {
            "name": "Pull Accumulator",
            "desc": "Pulls an 8 bit value from the stack and into the accumulator. The zero and negative flags are set as appropriate."
        },
        "PLP": {
            "name": "Pull Processor Status",
            "desc": "Pulls an 8 bit value from the stack and into the processor flags. The flags will take on new states as determined by the value pulled."
        },
        "ROL": {
            "name": "Rotate Left",
            "desc": "Move each of the bits in either A or M one place to the left. Bit 0 is filled with the current value of the carry flag whilst the old bit 7 becomes the new carry flag value."
        },
        "ROR": {
            "name": "Rotate Right",
            "desc": "Move each of the bits in either A or M one place to the right. Bit 7 is filled with the current value of the carry flag whilst the old bit 0 becomes the new carry flag value."
        },
        "RTI": {
            "name": "Return from Interrupt",
            "desc": "The RTI instruction is used at the end of an interrupt processing routine. It pulls the processor flags from the stack followed by the program counter."
        },
        "RTS": {
            "name": "Return from Subroutine",
            "desc": "The RTS instruction is used at the end of a subroutine to return to the calling routine. It pulls the program counter (minus one) from the stack."
        },
        "SBC": {
            "name": "Subtract with Carry",
            "desc": "This instruction subtracts the contents of a memory location to the accumulator together with the not of the carry bit. If overflow occurs the carry bit is clear, this enables multiple byte subtraction to be performed."
        },
        "SEC": {
            "name": "Set Carry Flag",
            "desc": "Set the carry flag to one."
        },
        "SED": {
            "name": "Set Decimal Flag",
            "desc": "Set the decimal mode flag to one."
        },
        "SEI": {
            "name": "Set Interrupt Disable",
            "desc": "Set the interrupt disable flag to one."
        },
        "STA": {
            "name": "Store Accumulator",
            "desc": "Stores the contents of the accumulator into memory."
        },
        "STX": {
            "name": "Store X Register",
            "desc": "Stores the contents of the X register into memory."
        },
        "STY": {
            "name": "Store Y Register",
            "desc": "Stores the contents of the Y register into memory."
        },
        "TAX": {
            "name": "Transfer Accumulator to X",
            "desc": "Copies the current contents of the accumulator into the X register and sets the zero and negative flags as appropriate."
        },
        "TAY": {
            "name": "Transfer Accumulator to Y",
            "desc": "Copies the current contents of the accumulator into the Y register and sets the zero and negative flags as appropriate."
        },
        "TSX": {
            "name": "Transfer Stack Pointer to X",
            "desc": "Copies the current contents of the stack register into the X register and sets the zero and negative flags as appropriate."
        },
        "TXA": {
            "name": "Transfer X to Accumulator",
            "desc": "Copies the current contents of the X register into the accumulator and sets the zero and negative flags as appropriate."
        },
        "TXS": {
            "name": "Transfer X to Stack Pointer",
            "desc": "Copies the current contents of the X register into the stack register."
        },
        "TYA": {
            "name": "Transfer Y to Accumulator",
            "desc": "Copies the current contents of the Y register into the accumulator and sets the zero and negative flags as appropriate."
        }


    },
    "addressingModes": {

    }
}