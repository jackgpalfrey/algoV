[{"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx":"1","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.tsx":"2","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\SortingVisualiserPage.tsx":"3","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx":"4","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts":"5","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts":"6","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts":"7","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx":"8","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts":"9","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts":"10","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts":"11","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx":"12","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\AlgoriComputePage.jsx":"13","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\PathfindingVisualiserPage.jsx":"14","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx":"15","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts":"16","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx":"17","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx":"18","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx":"19"},{"size":231,"mtime":1611443855374,"results":"20","hashOfConfig":"21"},{"size":943,"mtime":1611572789686,"results":"22","hashOfConfig":"21"},{"size":250,"mtime":1611423060434,"results":"23","hashOfConfig":"21"},{"size":8915,"mtime":1611930775454,"results":"24","hashOfConfig":"21"},{"size":1285,"mtime":1611531796731,"results":"25","hashOfConfig":"21"},{"size":1559,"mtime":1611579522880,"results":"26","hashOfConfig":"21"},{"size":1466,"mtime":1611580219756,"results":"27","hashOfConfig":"21"},{"size":2981,"mtime":1611962069758,"results":"28","hashOfConfig":"21"},{"size":563,"mtime":1611930831467,"results":"29","hashOfConfig":"21"},{"size":1980,"mtime":1611693902042,"results":"30","hashOfConfig":"21"},{"size":2072,"mtime":1611924758095,"results":"31","hashOfConfig":"21"},{"size":1714,"mtime":1611653075220,"results":"32","hashOfConfig":"21"},{"size":133,"mtime":1611570216976,"results":"33","hashOfConfig":"21"},{"size":162,"mtime":1611570151206,"results":"34","hashOfConfig":"21"},{"size":1178,"mtime":1611936988070,"results":"35","hashOfConfig":"21"},{"size":1199,"mtime":1611585890443,"results":"36","hashOfConfig":"21"},{"size":67,"mtime":1611845343871,"results":"37","hashOfConfig":"21"},{"size":1424,"mtime":1611913560946,"results":"38","hashOfConfig":"21"},{"size":235,"mtime":1611847446709,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"17wj5ys",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx",[],["86","87"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.tsx",["88"],"import React from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport SortingVisualiserPage from './pages/SortingVisualiserPage';\n\n\nimport {BrowserRouter as Router, Redirect, Route, Switch} from 'react-router-dom'\nimport PathfindingVisualiserPage from './pages/PathfindingVisualiserPage';\nimport AlgoriComputePage from './pages/AlgoriComputePage';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/sort'>\n            <SortingVisualiserPage />\n          </Route>\n          <Route path='/pathfind'>\n            <PathfindingVisualiserPage />\n          </Route>\n          <Route path='/compute'>\n            <AlgoriComputePage />\n          </Route>\n          <Route path='/'>\n            <HomePage />\n          </Route>\n        </Switch>\n        \n        <Menu/>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\SortingVisualiserPage.tsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx",["89","90","91","92","93","94","95","96","97"],"import React, { useEffect, useState } from 'react'\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport InfoCard from '../InfoCard'\r\nimport './style.css'\r\n\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc',\r\n    BEING_CHECKED: '#fc0388',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\nfunction SortingVisualiser(props){\r\n    const cookieData = document.cookie.replace(';','').replace(' ','').split(',')\r\n    const [array, setArray] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [numBars, setNumBars] = useState(Math.round((window.innerWidth / 12) / 2))\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(cookieData[1] || 'bubble')\r\n    const [isSorted, setIsSorted] = useState(true)\r\n\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        resetArray(numBars)\r\n\r\n    }, [])\r\n\r\n    function resetArray(numOfBars){\r\n        let newArray = []\r\n        for (let i = 0; i < numOfBars; i++){\r\n            let randomVal = Math.round(Math.random() * 60) + 8\r\n            let item = {\r\n                value: randomVal,\r\n                color: COLORS.BASE\r\n            }\r\n            newArray.push(item)\r\n        }\r\n        setIsSorted(false)\r\n        setArray(newArray)\r\n    }\r\n\r\n    async function animate(command){\r\n        setArray(prevState => {\r\n            try {\r\n                let newArray = prevState.slice()\r\n                switch(command.command){\r\n                    case 'setColor':\r\n                        if (typeof command.id === 'number' && command.id > newArray.length -1 ) return newArray[command.id].color = command.color\r\n                        let col;\r\n                        command.id.forEach(value => {\r\n                            if (value > newArray.length - 1) return; //throw 'Out of bounds'\r\n                            if (command.color[0] === '?') {\r\n                                command.color = command.color.slice(1)\r\n                                if (array[value].color == COLORS.DONE) return\r\n                            }\r\n                            command.color[0] === '$' ? col = COLORS[command.color.slice(1)] : col = command.color \r\n                            newArray[value].color = col\r\n                        })\r\n                        \r\n                        break;\r\n                    case 'swap':\r\n                        if (command.id1 > newArray.length -1) throw 'Out of bounds'\r\n                        if (command.id2 > newArray.length -1) throw 'Out of bounds'\r\n                        const tmp1 = {...newArray[command.id1]}\r\n                        const tmp2 = {...newArray[command.id2]}\r\n                        newArray[command.id1] = tmp2\r\n                        newArray[command.id2] = tmp1\r\n                        break;\r\n                    case 'setArray':\r\n                        newArray = []\r\n                        command.array.forEach(val => {\r\n                            let item = {\r\n                                value: val,\r\n                                color: COLORS.BASE\r\n                            }\r\n                            newArray.push(item)\r\n                        })\r\n                        break;\r\n                }\r\n                \r\n                return newArray\r\n            \r\n            } catch (err) {\r\n                throw err\r\n                return prevState\r\n            }  \r\n        });\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function animator(animations,speed){\r\n        setAnimationActive(prevState => true)\r\n        let idx = 0\r\n\r\n        const intervalID = setInterval( () => {\r\n            if (idx > animations.length - 1) {\r\n                clearInterval(intervalID)\r\n                setAnimationActive(false)\r\n                return \r\n            }\r\n            animate(animations[idx])\r\n            idx++\r\n        }, speed)\r\n    }\r\n\r\n    function getNumbersFromArrayState(){\r\n        let numbers = []\r\n        for (let i = 0; i < array.length; i++){\r\n            numbers.push(array[i].value)\r\n        }\r\n\r\n        return numbers\r\n    }\r\n\r\n    function handleSortClick(){\r\n        let data = []\r\n        if(animationActive) return false\r\n        switch(activeAlgorithm){\r\n            case 'bubble':\r\n                data = bubbleSort(getNumbersFromArrayState())\r\n                break;\r\n            case 'selection':\r\n                data = selectionSort(getNumbersFromArrayState())\r\n                break;\r\n            case 'insertion':\r\n                data = insertionSort(getNumbersFromArrayState())\r\n                break;\r\n            case 'quick':\r\n                //return alert('Currently Unavailable')\r\n                data = quickSort(getNumbersFromArrayState())\r\n                break;\r\n            case 'heap':\r\n                data = heapSort(getNumbersFromArrayState())\r\n                break;\r\n            case 'merge':\r\n                return alert('Currently Unavailable')\r\n                data = mergeSort(getNumbersFromArrayState())\r\n                break;\r\n            case 'reverseArray':\r\n                data = reverseArray(getNumbersFromArrayState())\r\n                break;\r\n        }\r\n\r\n        let [animations,runTime] = data\r\n        setRunTime(Math.round(runTime * 1000) / 1000)\r\n        animator(animations,animationSpeed)\r\n        setIsSorted(true)\r\n    }\r\n\r\n    let barWidth = ((window.innerWidth / 100) * 90) / numBars\r\n\r\n    let barsDivs = array.map((item,idx)  => {\r\n        let barStyle = {\r\n            height: `${item.value}%`, \r\n            backgroundColor: `${item.color}`,\r\n            width: barWidth,\r\n            fontSize: barWidth > 20 ? barWidth / 3 : 0,\r\n            color: COLORS.TEXT\r\n            \r\n        }\r\n        return (<div key={idx} className='bar' style={barStyle}>{item.value}</div>)\r\n    })\r\n\r\n    \r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='bar-container'>\r\n                <div className='inner-bar-container'>\r\n                    {barsDivs}\r\n                </div>\r\n                \r\n            </div>\r\n            <nav>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>Animation Time ({animationSpeed}ms) </p>\r\n                <input disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(e.target.value)\r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {resetArray(numBars)}}} className={!animationActive ? 'button reset' : 'button-disabled reset'}>Reset</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={!animationActive ? 'button sort' : 'button-disabled sort'}>Sort</button>\r\n                <select disabled={animationActive} value={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                    <option value='bubble'>Bubble Sort</option>\r\n                    <option value='selection'>Selection Sort</option>\r\n                    <option value='insertion'>Insertion Sort</option>\r\n                    <option value='quick'>Quick Sort</option>\r\n                    <option value='heap'>Heap Sort</option>\r\n                    <option value='merge'>Merge Sort</option>\r\n                    <option value='reverseArray'>(Other)Reverse Array</option>\r\n                </select>\r\n                \r\n                    <div className='sliderBox'>\r\n                        <p className={animationActive ? 'disabled' : ''}>Number of Bars ({numBars})</p>\r\n                        <input disabled={animationActive} type=\"range\" min=\"5\" max={`${Math.round(window.innerWidth / 12) - 10}`} value={numBars} onChange={e => {\r\n                            setNumBars(e.target.value)\r\n                            resetArray(e.target.value)\r\n                        }}></input>\r\n                    </div>\r\n                    \r\n                    \r\n\r\n                <p className={animationActive ? 'timeTaken disabled' : 'timeTaken'}>{runTime !== 0 ? `Time: ${runTime}ms`: `Time: N/A`}</p>\r\n                \r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualiser",["98","99"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx",["100"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts",["101","102"],"const COLORS = {\r\n    BASE: '#035efc',\r\n    BEING_CHECKED: '#fc0388',\r\n    DONE: '#15ba09'\r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n \r\n\r\n\r\n}\r\n\r\nfunction quickSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n\r\n\r\n    let sortedArray = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default quickSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts",["103","104"],"// FROM: https://levelup.gitconnected.com/heapsort-for-javascript-newbies-598d25477d55\r\n//TODO: Improve Animations\r\n\r\n\r\nfunction swap(array: number[], idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push({command: 'swap',id1: idx1, id2: idx2})\r\n}\r\n\r\n\r\nfunction heapify(array: number[], length: number, idx: number, animations: object[]){\r\n    let largest:number = idx\r\n    let left:number = idx * 2 + 1\r\n    let right:number = left + 1\r\n\r\n    animations.push({command: 'setColor',id: [left,right],color: '?$BEING_CHECKED'})\r\n\r\n    if(left < length && array[left] > array[largest]) {\r\n        largest = left\r\n    }\r\n\r\n    if(right < length && array[right] > array[largest]){\r\n        largest = right\r\n    }\r\n\r\n    animations.push({command: 'setColor',id: [left,right],color: '?$BASE'})\r\n\r\n    if(largest != idx){\r\n        swap(array, idx, largest, animations)\r\n        heapify(array, length, largest, animations)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sort(array: number[], animations: object[]){\r\n    let length = array.length\r\n    let idx = Math.floor(length / 2 - 1)\r\n    let k = length - 1;\r\n\r\n    while (idx >= 0) {\r\n        heapify(array, length, idx, animations)\r\n        idx--\r\n    }\r\n\r\n    while(k >= 0){\r\n        swap(array, 0, k, animations)\r\n        heapify(array, k, 0, animations)\r\n        //animations.push({command: 'setColor',id: [k],color: '$DONE'})\r\n        k--\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n\r\n\r\nfunction heapSort(array: number[]){\r\n    let startTime = performance.now()\r\n    var animations: object[] = [];\r\n    let sortedArray = sort(array, animations)\r\n\r\n    let endTime = performance.now()\r\n\r\n    let idxs:number[] = []\r\n    for (let i = 0; i < array.length; i++){\r\n        idxs.push(i)\r\n    }\r\n    animations.push({command: 'setColor',id: idxs, color: '$DONE'})\r\n\r\n\r\n    let runTime = endTime - startTime\r\n    return [animations, runTime]\r\n}\r\n\r\nexport default heapSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts",["105","106","107","108"],"import { create } from \"domain\"\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc',\r\n    BEING_CHECKED: '#fc0388',\r\n    DONE: '#15ba09'\r\n}\r\n\r\nfunction swap(array: any, idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push({command: 'swap',id1: array[idx1][0], id2: array[idx2][0]})\r\n}\r\n\r\n\r\nfunction mergeArrays(leftArray: any, rightArray: any, animations: any){\r\n    let leftIndex = 0 , rightIndex = 0\r\n\r\n    console.log(leftArray)\r\n\r\n    while(leftIndex < leftArray.length && rightIndex < rightArray.length){\r\n        animations.push({command: 'swap',id1: rightArray[rightIndex][0], id2: rightArray[rightIndex][0]})\r\n        let tmp = leftArray[leftIndex]\r\n        leftArray[leftIndex] = rightArray[rightIndex]\r\n        rightArray[rightIndex] = tmp\r\n        if (leftArray[leftIndex][1] < rightArray[rightIndex][1]){\r\n            leftIndex++\r\n        } else {\r\n            rightIndex++\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return \r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n    if (array.length <= 1) return array\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n\r\n    const left = array.slice(0,middle);\r\n    const right = array.slice(middle);\r\n\r\n    return mergeArrays(sort(left,animations), sort(right,animations),animations)\r\n\r\n}\r\n\r\n\r\nfunction createIndexedArray(array: number[]){\r\n    let indexedArray = []\r\n    for (let i = 0; i < array.length - 1; i++){\r\n        indexedArray.push([i,array[i]])\r\n    }\r\n\r\n    return indexedArray\r\n}\r\n\r\nfunction mergeSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n    let indexedArray: number[][] = createIndexedArray(array)\r\n\r\n\r\n    sortedArray = sort(indexedArray,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    console.log(animations)\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default mergeSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\AlgoriComputePage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\PathfindingVisualiserPage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx",["109","110"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts",["111"],"\r\nfunction sort(array: any, animations: any): any {\r\n    let sortedArray = array.slice()\r\n\r\n    for (let i = 0; i < Math.floor(sortedArray.length / 2); i++){\r\n        animations.push({command: 'setColor',id: [i,(sortedArray.length-1-i)],color: '$BEING_CHECKED'})\r\n        let tmp = sortedArray[i]\r\n        sortedArray[i] = sortedArray[sortedArray.length-1-i]\r\n        sortedArray[sortedArray.length-1-i] = tmp\r\n        animations.push({command: 'swap',id1: i, id2: (sortedArray.length-1-i)})\r\n        animations.push({command: 'setColor',id: [i,(sortedArray.length-1-i)],color: '$DONE'})\r\n    }\r\n\r\n    animations.push({command: 'setColor',id: [(Math.ceil(sortedArray.length / 2)) - 1],color: '$DONE'})\r\n\r\n    return [sortedArray, animations]\r\n\r\n\r\n}\r\n\r\nfunction reverseArray(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n\r\n    [sortedArray, animations] = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default reverseArray","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx",["112","113"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":7,"column":34,"nodeType":"120","messageId":"121","endLine":7,"endColumn":42},{"ruleId":"122","severity":1,"message":"123","line":29,"column":12,"nodeType":"120","messageId":"121","endLine":29,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":40,"column":8,"nodeType":"126","endLine":40,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":60,"column":17,"nodeType":"130","messageId":"131","endLine":93,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":68,"column":56,"nodeType":"134","messageId":"135","endLine":68,"endColumn":58},{"ruleId":"136","severity":1,"message":"137","line":76,"column":63,"nodeType":"138","messageId":"139","endLine":76,"endColumn":84},{"ruleId":"136","severity":1,"message":"137","line":77,"column":63,"nodeType":"138","messageId":"139","endLine":77,"endColumn":84},{"ruleId":"140","severity":1,"message":"141","line":99,"column":17,"nodeType":"142","messageId":"143","endLine":99,"endColumn":33},{"ruleId":"128","severity":1,"message":"129","line":136,"column":9,"nodeType":"130","messageId":"131","endLine":160,"endColumn":10},{"ruleId":"140","severity":1,"message":"141","line":155,"column":17,"nodeType":"144","messageId":"143","endLine":156,"endColumn":23},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"122","severity":1,"message":"145","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":25},{"ruleId":"118","severity":1,"message":"146","line":1,"column":7,"nodeType":"120","messageId":"121","endLine":1,"endColumn":13},{"ruleId":"118","severity":1,"message":"147","line":20,"column":9,"nodeType":"120","messageId":"121","endLine":20,"endColumn":20},{"ruleId":"132","severity":1,"message":"148","line":30,"column":16,"nodeType":"134","messageId":"135","endLine":30,"endColumn":18},{"ruleId":"118","severity":1,"message":"147","line":63,"column":9,"nodeType":"120","messageId":"121","endLine":63,"endColumn":20},{"ruleId":"118","severity":1,"message":"149","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":16},{"ruleId":"118","severity":1,"message":"146","line":3,"column":7,"nodeType":"120","messageId":"121","endLine":3,"endColumn":13},{"ruleId":"118","severity":1,"message":"150","line":9,"column":10,"nodeType":"120","messageId":"121","endLine":9,"endColumn":14},{"ruleId":"118","severity":1,"message":"147","line":71,"column":5,"nodeType":"120","messageId":"121","endLine":71,"endColumn":16},{"ruleId":"122","severity":1,"message":"119","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"152","line":14,"column":55,"nodeType":"153","messageId":"154","endLine":14,"endColumn":57},{"ruleId":"118","severity":1,"message":"147","line":27,"column":6,"nodeType":"120","messageId":"121","endLine":27,"endColumn":17},{"ruleId":"122","severity":1,"message":"155","line":1,"column":8,"nodeType":"120","messageId":"121","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"156","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-unused-vars","'isSorted' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'numBars'. Either include it or remove the dependency array.","ArrayExpression",["159"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","ExpressionStatement","'setOriginalNode' is defined but never used.","'COLORS' is assigned a value but never used.","'sortedArray' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'create' is defined but never used.","'swap' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},"Update the dependencies array to be: [numBars]",{"range":"162","text":"163"},[1472,1474],"[numBars]"]