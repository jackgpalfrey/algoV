[{"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx":"1","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx":"2","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts":"3","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts":"4","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts":"5","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx":"6","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts":"7","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts":"8","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts":"9","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx":"10","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx":"11","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts":"12","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx":"13","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx":"14","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx":"15","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx":"16","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx":"17","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\LatestChangesCard\\index.jsx":"18","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.jsx":"19","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\UnavailablePage.jsx":"20","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\GridPage.jsx":"21","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\BarsPage.tsx":"22","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\DocsPage\\index.jsx":"23","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\util\\getLocaleText.js":"24","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\data\\locales\\en\\docs.js":"25"},{"size":235,"mtime":1614858547970,"results":"26","hashOfConfig":"27"},{"size":24234,"mtime":1615588023927,"results":"28","hashOfConfig":"27"},{"size":1596,"mtime":1615047217662,"results":"29","hashOfConfig":"27"},{"size":1780,"mtime":1615047248952,"results":"30","hashOfConfig":"27"},{"size":1561,"mtime":1615047232564,"results":"31","hashOfConfig":"27"},{"size":3068,"mtime":1615582154808,"results":"32","hashOfConfig":"27"},{"size":462,"mtime":1614872367345,"results":"33","hashOfConfig":"27"},{"size":2377,"mtime":1615047225513,"results":"34","hashOfConfig":"27"},{"size":1693,"mtime":1614872357091,"results":"35","hashOfConfig":"27"},{"size":3020,"mtime":1615581132061,"results":"36","hashOfConfig":"27"},{"size":2332,"mtime":1615588070321,"results":"37","hashOfConfig":"27"},{"size":1459,"mtime":1615047242467,"results":"38","hashOfConfig":"27"},{"size":67,"mtime":1611845343871,"results":"39","hashOfConfig":"27"},{"size":2109,"mtime":1615589565367,"results":"40","hashOfConfig":"27"},{"size":235,"mtime":1615069584116,"results":"41","hashOfConfig":"27"},{"size":2287,"mtime":1615581222558,"results":"42","hashOfConfig":"27"},{"size":406,"mtime":1615544429279,"results":"43","hashOfConfig":"27"},{"size":1612,"mtime":1615195716233,"results":"44","hashOfConfig":"27"},{"size":2607,"mtime":1615588194581,"results":"45","hashOfConfig":"27"},{"size":775,"mtime":1614951016918,"results":"46","hashOfConfig":"27"},{"size":234,"mtime":1614959868734,"results":"47","hashOfConfig":"27"},{"size":249,"mtime":1614960116447,"results":"48","hashOfConfig":"27"},{"size":5512,"mtime":1615582420203,"results":"49","hashOfConfig":"27"},{"size":1027,"mtime":1615587569060,"results":"50","hashOfConfig":"27"},{"size":41947,"mtime":1615579793075,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"17wj5ys",{"filePath":"55","messages":"56","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\index.tsx",[],["118","119"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\SortingVisualiser\\index.jsx",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"import React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport bubbleSort from '../../algoithms/sorting/bubbleSort'\r\nimport heapSort from '../../algoithms/sorting/heapSort'\r\nimport insertionSort from '../../algoithms/sorting/insertionSort'\r\nimport mergeSort from '../../algoithms/sorting/mergeSort'\r\nimport quickSort from '../../algoithms/sorting/quickSort'\r\nimport reverseArray from '../../algoithms/sorting/reverseArray'\r\nimport selectionSort from '../../algoithms/sorting/selectionSort'\r\nimport Console from '../Console'\r\nimport InfoCard from '../InfoCard'\r\nimport './style.css'\r\n\r\nimport getLocaleText from '../../util/getLocaleText'\r\nconst consoleText = getLocaleText('general').console\r\nconst text = getLocaleText('general').bars\r\nconst algoData = getLocaleText('algorithmInfo')\r\n\r\nconst COLORS = {\r\n    BASE: '#035efc', \r\n    CHECKING: 'red',\r\n    DONE: '#0f8707',\r\n    TEXT: 'white'\r\n    \r\n}\r\n\r\n\r\n\r\nfunction SortingVisualiser(props){\r\n\r\n    //#region State Creation \r\n    let sortingCookie = document.cookie.split('; ').find(row => row.startsWith('sort='))\r\n    if (!sortingCookie || sortingCookie == ''){\r\n        sortingCookie = \"100,bubbleSort\"\r\n    } else {\r\n        sortingCookie = sortingCookie.split('=')[1]\r\n    }\r\n    const cookieData = sortingCookie.replace(' ','').split(',')\r\n    let animationtype = cookieData[0]\r\n    let urlAnimation = useLocation().search.replace('?','')\r\n    if (urlAnimation && Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = urlAnimation\r\n    if(!Object.keys(algoData['sorting']).includes(urlAnimation)) animationtype = 'bubbleSort'\r\n    const [array, setArray] = useState([])\r\n    const [animationSpeed, setAnimationSpeed] = useState(cookieData[0] || 100)\r\n    const [numBars, setNumBars] = useState(Math.round((window.innerWidth / 12) / 2))\r\n    const [runTime, setRunTime] = useState(0)\r\n    const [swaps, setSwaps] = useState(0)\r\n    const [comparisons, setComparisons] = useState(0)\r\n    const [animationActive, setAnimationActive] = useState(false)\r\n    const [activeAlgorithm, setActiveAlgorithm] = useState(animationtype || 'bubbleSort')\r\n    const [isTerminalOpen, setIsTerminalOpen] = useState(false)\r\n    const [activeTimeouts, setActiveTimeouts] = useState([])\r\n    const [activeIntervals, setActiveIntervals] = useState([])\r\n\r\n    //#endregion\r\n    \r\n    useEffect(effect => {\r\n        document.cookie = `sort=${animationSpeed},${activeAlgorithm};`;\r\n    },[animationSpeed, activeAlgorithm])\r\n    \r\n\r\n    useEffect(effect => {\r\n        AnimateEngine([\"resetArray\",numBars])\r\n    }, [])\r\n\r\n\r\n    function AnimateEngine(command){\r\n        try {\r\n            let commandCode = command\r\n            if (Array.isArray(command)) commandCode = command[0]\r\n            \r\n            let response = [\"PENDING\", \"In progress\"]\r\n            console.log(`Command: ${commandCode}`)\r\n            switch(commandCode){\r\n                case 'setState':\r\n                        let indexArray = command[1]\r\n                        let type = command[2]\r\n                        let data = command[3]\r\n\r\n                        if (!indexArray || !Array.isArray(indexArray)) return [\"ERROR\", \"Invalid Indexs\"]\r\n                        if (!type || typeof type !== 'string') return [\"ERROR\", \"Invalid Type\"]\r\n                        \r\n                        type = type.toLowerCase()\r\n\r\n                        if (type === 'color'){\r\n                            if(typeof data !== 'string') return [\"ERROR\", \"Invalid Data\"]\r\n                            if (data.includes('$')) data = COLORS[data.replace('$','')]\r\n                        } else if (type === 'value'){\r\n                            if(typeof data !== 'number') return [\"ERROR\", \"Invalid Data\"]\r\n                        } else {\r\n                            return [\"ERROR\", \"Invalid Type\"]\r\n                        }\r\n\r\n\r\n                        setArray(prevState => {\r\n                            let newArray = prevState.slice()\r\n                            \r\n                            indexArray.forEach(idx => {\r\n                                if (typeof idx == \"number\" && idx >= 0 && idx < newArray.length){\r\n                                    newArray[idx][type] = data\r\n\r\n                                } if (typeof idx == \"number\" && idx < 0 && Math.abs(idx) <= newArray.length){\r\n                                    newArray[newArray.length - Math.abs(idx)][type] = data\r\n                                \r\n                                } else if (idx === '$ALL'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$LHALF'){\r\n                                    for (let y = 0; y < Math.ceil(newArray.length / 2); y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n                                } else if (idx === '$RHALF'){\r\n                                    for (let y = Math.floor(newArray.length / 2); y < newArray.length; y++){\r\n                                        newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$ODD'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 0) newArray[y][type] = data\r\n                                        \r\n                                    }\r\n    \r\n                                } else if (idx === '$EVEN'){\r\n                                    for (let y = 0; y < newArray.length; y++){\r\n                                        if (y % 2 === 1) newArray[y][type] = data\r\n                                    }\r\n    \r\n                                } else if (idx === '$MID'){\r\n                                    newArray[Math.floor((newArray.length - 1) / 2)][type] = data\r\n                                    newArray[Math.ceil((newArray.length - 1) / 2)][type] = data\r\n    \r\n                                }\r\n                                \r\n                                \r\n                            });\r\n                            \r\n                            return newArray\r\n                        });\r\n                            \r\n\r\n                    break;\r\n                \r\n                case 'sc':\r\n                case 'setColor': // Sets color of bars. Syntax: [\"setColor\",[array of ids or $ALL, $LHALF, $RHALF], \"valid css color OR valid inbuilt variable prefixed with $\"]\r\n                    let idxes = command[1]\r\n                    let color = command[2]\r\n                    \r\n                    AnimateEngine([\"setState\", idxes, 'color', color])\r\n                    break;\r\n                \r\n                case 'swap':\r\n                    let id1 = command[1]\r\n                    let id2 = command[2]\r\n                    if (id1 == undefined || typeof id1 !== 'number') return [\"ERROR\", \"Invalid id1\"]\r\n                    if (id2 == undefined || typeof id2 !== 'number') return [\"ERROR\", \"Invalid id2\"]\r\n                    setArray(prevState => {\r\n                        id1 = command[1]\r\n                        id2 = command[2]\r\n                        let newArray = prevState.slice()\r\n\r\n                        if (id1 < 0) id1 = newArray.length - Math.abs(id1)\r\n                        if (id2 < 0) id2 = newArray.length - Math.abs(id2)\r\n                        \r\n                        if (id1 >= 0 && id1 < newArray.length && id2 >= 0 && id2 < newArray.length){\r\n                            const tmp1 = {...newArray[id1]}\r\n                            const tmp2 = {...newArray[id2]}\r\n                            newArray[id1] = tmp2\r\n                            newArray[id2] = tmp1\r\n                        }\r\n                        \r\n        \r\n                        return newArray\r\n                    })\r\n        \r\n                    break;\r\n                \r\n                case 'setValue':\r\n                    let idxs = command[1]\r\n                    let value = command[2]\r\n\r\n                    AnimateEngine([\"setState\", idxs, 'value', value])\r\n                    break;\r\n                \r\n                case 'setArray':\r\n                    let values = command[1]\r\n                    let colorCode = command[2]\r\n\r\n                    if (!values || !Array.isArray(values)) return [\"ERROR\", \"Invalid Values\"]\r\n                    if (!colorCode || typeof colorCode !== 'string') return [\"ERROR\", \"Invalid Color\"]\r\n                    setArray(prevState => {\r\n                        let newArray = []\r\n                        let color = command[2]\r\n                        if (color.includes('$')) color = COLORS[color.replace('$','')]\r\n        \r\n                        values.forEach(value => {\r\n                        if (typeof value == \"number\"){\r\n                                newArray.push({value: value, color: color})\r\n                            }\r\n                            \r\n                        });\r\n                        setNumBars(newArray.length)\r\n                        return newArray\r\n                    })\r\n                    break;\r\n                        \r\n                case 'do':\r\n                    let subCommands = command[1]\r\n                    let interval = command[2]\r\n\r\n                    if (!subCommands || !Array.isArray(subCommands)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!interval && interval != 0 || typeof interval !== 'number' && interval != '$userSet' || interval < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n                    if (interval == '$userSet') interval = animationSpeed\r\n                   \r\n                    if (interval == 0) {\r\n                        for (let i = 0; i < subCommands.length; i++){\r\n                            AnimateEngine(subCommands[i])\r\n                        }\r\n                        break; \r\n                    }\r\n\r\n\r\n                    \r\n\r\n                    AnimateEngine(subCommands[0])\r\n                    let currentCommandIdx = 1\r\n\r\n                    let intervalID = setInterval(() => {\r\n                        if (currentCommandIdx >= subCommands.length){\r\n                            clearInterval(intervalID)\r\n                            //AnimateEngine([\"clearLoop\", `${intervalID}`])\r\n                            return\r\n                        }\r\n\r\n                        AnimateEngine(subCommands[currentCommandIdx])\r\n                        currentCommandIdx++\r\n                    }, interval)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curIntervals = prevState.slice()\r\n                        curIntervals.push(intervalID)\r\n                        return curIntervals\r\n                    })\r\n                    break;\r\n                \r\n                case 'doFor':\r\n                    let commandsToRun = command[1]\r\n                    let repeats = command[2]\r\n                    let intervalBetweenEach = command[3]\r\n\r\n                    if (!commandsToRun || !Array.isArray(commandsToRun)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!repeats && repeats !== 0 || typeof repeats !== 'number' || repeats < 0) return [\"ERROR\", \"Invalid Repeats\"]\r\n                    if (!intervalBetweenEach && intervalBetweenEach !== 0 || (typeof intervalBetweenEach !== 'number' && intervalBetweenEach !== '$userSet') || intervalBetweenEach < 0) return [\"ERROR\", \"Invalid Interval\"]\r\n\r\n                    if (intervalBetweenEach === '$userSet'){\r\n                        intervalBetweenEach = parseInt(animationSpeed)\r\n                    }\r\n                    \r\n                    let currentIteration = 1\r\n\r\n                    AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n                    \r\n                    let intervalIdentifier = setInterval(() => {\r\n                        if (currentIteration >= repeats && repeats !== 0) {\r\n                            clearInterval(intervalIdentifier)\r\n                            return;\r\n                        }\r\n\r\n                        AnimateEngine([\"do\", commandsToRun, intervalBetweenEach])\r\n\r\n                        currentIteration++\r\n                    }, intervalBetweenEach * commandsToRun.length)\r\n\r\n                    setActiveIntervals(prevState => {\r\n                        let curAIntervals = prevState.slice()\r\n                        curAIntervals.push(intervalIdentifier)\r\n                        return curAIntervals\r\n                    })\r\n                    break;\r\n\r\n                case 'doSim':\r\n                    let toRunCommands = command[1]\r\n                    AnimateEngine([\"do\", toRunCommands, 0])\r\n                    break;\r\n\r\n                case 'doIn':\r\n                    let commandsToExecute = command[1]\r\n                    let waitFor = command[2]\r\n\r\n                    if (!commandsToExecute || !Array.isArray(commandsToExecute)) return [\"ERROR\", \"Invalid Sub Commands\"]\r\n                    if (!waitFor || typeof waitFor !== 'number' || waitFor <= 0) return [\"ERROR\", \"Wait Time Invalid\"]\r\n                    let timeoutID = setTimeout(() => {\r\n                        command[1].forEach((value) => {\r\n                            console.log(value)\r\n                            AnimateEngine(value)\r\n                        })\r\n                    }, command[2] )\r\n\r\n                    setActiveTimeouts(prevState => {\r\n                        let curTimeouts = prevState.slice()\r\n                        curTimeouts.push(timeoutID)\r\n                        return curTimeouts\r\n                    })\r\n\r\n                    break;\r\n                \r\n                case 'ra':\r\n                case 'resetArray':\r\n                    \r\n                    let numOfBars = command[1]\r\n                    if (!numOfBars) numOfBars = numBars\r\n                    if (typeof numOfBars !== 'number') return [\"ERROR\", \"Invalid Number of bars\"]\r\n                    let Randvalues = []\r\n                    for (let i = 0; i < numOfBars; i++){\r\n                        Randvalues.push(Math.round(Math.random() * 60) + 13)\r\n                    }\r\n                    AnimateEngine([\"setArray\",Randvalues,\"$BASE\"])\r\n                    break;\r\n                \r\n                case 'setRuntimeDisplay':\r\n                    let newRuntime = command[1]\r\n                    if (!newRuntime) return [\"ERROR\", \"Invalid Runtime\"]\r\n                    setRunTime(newRuntime)\r\n                    break;\r\n\r\n                case 'setComparisonsDisplay':\r\n                    let newComparisons = command[1]\r\n                    if (!newComparisons) return [\"ERROR\", \"Invalid Comparisons\"]\r\n                    setComparisons(newComparisons)\r\n                    break;\r\n\r\n                case 'setSwapsDisplay':\r\n                    let newSwaps = command[1]\r\n                    if (!newSwaps) return [\"ERROR\", \"Invalid Swaps\"]\r\n                    setSwaps(newSwaps)\r\n                    break;\r\n\r\n                case 'startAnimation':\r\n                    setAnimationActive(true)\r\n                    break;\r\n\r\n                case 'endAnimation':\r\n                    setAnimationActive(false)\r\n                    break;\r\n\r\n                case 'clearLoop': //FIXME: Dosen't work\r\n                    let specificLoop = command[1]\r\n                    let activeLoops = activeIntervals.slice()\r\n                    if (specificLoop == undefined){\r\n                        let ALLen = activeLoops.length\r\n                        for (let i = 0; i < ALLen; i++){\r\n                            clearInterval(activeLoops.pop())\r\n                        }\r\n                    } else if (typeof specificLoop === 'number') {\r\n                        let loop = activeLoops.splice(specificLoop, 1)[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    } else if (typeof specificLoop === 'string'){\r\n                        let loop = activeLoops.indexOf(parseInt(specificLoop))[0]\r\n                        console.log(loop)\r\n                        clearInterval(loop)\r\n                    }\r\n\r\n                    setActiveIntervals(activeLoops)\r\n                    \r\n                    \r\n                    break;\r\n\r\n                case 'clearWait': //FIXME: Dosen't work\r\n                    let activeWaits = activeTimeouts.slice()\r\n                    let AWLen = activeWaits.length\r\n                    for (let i = 0; i < AWLen; i++){\r\n                        clearTimeout(activeWaits.pop())\r\n                    }\r\n                    break;\r\n                \r\n                case 'ct':\r\n                case 'clearTimers': //FIXME: Dosen't work\r\n                    AnimateEngine([\"clearLoops\"])\r\n                    AnimateEngine([\"clearWaits\"])\r\n                    break;\r\n                \r\n                case 'r':\r\n                case 'reload':\r\n                    window.location.reload()\r\n                    break;\r\n                    \r\n                case 'executeInternalAnimation':\r\n                    let animationKey = command[1]\r\n                    if (!animationKey || typeof animationKey !== 'string' ) return [\"ERROR\", \"Invalid Animation Key\"]\r\n                    let resultData = []\r\n                    switch(animationKey){\r\n                        case 'bubbleSort':\r\n                            resultData = bubbleSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'selectionSort':\r\n                            resultData = selectionSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'insertionSort':\r\n                            resultData = insertionSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'quickSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = quickSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'heapSort':\r\n                            resultData = heapSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'mergeSort':\r\n                            return alert('Currently Unavailable')\r\n                            resultData = mergeSort(getNumbersFromArrayState())\r\n                            break;\r\n                        case 'reverseArray':\r\n                            resultData = reverseArray(getNumbersFromArrayState())\r\n                            break;\r\n                        default:\r\n                            return [\"ERROR\", \"Invalid Animation Key\"]\r\n                            break;\r\n                    }\r\n\r\n                    AnimateEngine([\"doSim\", [resultData]])\r\n                    break;\r\n\r\n                case 'version':\r\n                    let version = document.cookie.split('; ').find(row => row.startsWith('version=')).split('=')[1]\r\n                    alert(`Version: ${version}`)\r\n                    break;\r\n\r\n\r\n                case 'defaultColor':\r\n                    let codeForColor = command[1]\r\n                    let colorForCode = command[2]\r\n                    COLORS[codeForColor] = colorForCode\r\n                    break;\r\n                \r\n                default:\r\n                    return [\"ERROR\", \"Unknown Command\"]\r\n                    break;\r\n            }\r\n\r\n            return [\"SUCCESS\", \"Exectuted Successfully\"]\r\n\r\n        } catch (error){\r\n            console.error(error)\r\n            return [\"ERROR\", \"Try Failed\"]\r\n        }\r\n    \r\n    }\r\n\r\n    function getNumbersFromArrayState(){\r\n        let numbers = []\r\n        for (let i = 0; i < array.length; i++){\r\n            numbers.push(array[i].value)\r\n        }\r\n\r\n        return numbers\r\n    }\r\n\r\n    function handleSortClick(){\r\n        if (animationActive) return false\r\n        console.log(AnimateEngine([\"executeInternalAnimation\", activeAlgorithm]))\r\n    }\r\n\r\n    function createBars(){\r\n        let barWidth = ((window.innerWidth / 100) * 90) / numBars\r\n        \r\n        let barsDivs = array.map((item, idx) => {\r\n            let style = {\r\n                height: `${item.value}%`, \r\n                backgroundColor: `${item.color}`,\r\n                width: barWidth,\r\n                margin: barWidth / 4 > 20 ? 20 : barWidth / 4,\r\n                fontSize: barWidth > 20 ? barWidth / 3 : 0,\r\n                color: COLORS.TEXT,\r\n                fontWeight: \"bold\"\r\n            }\r\n\r\n            return (<div key={idx} title={item.value}className='bar' style={style}>{item.value}</div>)\r\n        })\r\n\r\n        return barsDivs\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='sort-container'>\r\n            <div className='bar-container'>\r\n                <div className='inner-bar-container'>\r\n                    {createBars()}\r\n                </div>\r\n                \r\n            </div>\r\n            <nav>\r\n            <i className='material-icons consoleButton clickable dark' title={isTerminalOpen ? consoleText.closeConsole : consoleText.openConsole} onClick={() => setIsTerminalOpen(!isTerminalOpen)}>{isTerminalOpen ? 'code_off': 'code'}</i>\r\n            <div className='sliderBox'>\r\n                <p className={animationActive ? 'disabled' : ''}>{`${text.animationTimeSlider} (${animationSpeed}ms) `}</p>\r\n                <input className='clickable' disabled={animationActive} type=\"range\" min=\"1\" max=\"1000\" value={animationSpeed} onChange={e => {\r\n                    setAnimationSpeed(parseInt(e.target.value)); \r\n                }}></input>\r\n            </div>\r\n                <button disabled={animationActive} onClick={() => {if(!animationActive) {AnimateEngine([\"resetArray\", numBars])}}} className={`${!animationActive ? 'button reset' : 'button-disabled reset'} clickable`}>{text.resetButton}</button>\r\n                <button disabled={animationActive} onClick={handleSortClick} className={`${!animationActive ? 'button sort' : 'button-disabled sort'} clickable`}>{text.runButton}</button>\r\n                <select className='clickable'disabled={animationActive} value={activeAlgorithm} name={activeAlgorithm} onChange={e => {setActiveAlgorithm(e.target.value)}}>\r\n                <option disabled className='algorithmsTitle clickable' value='otherTitle'>{text.sortingAlgorithmsTitle}</option>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option disabled className='algorithmsTitle' value='otherTitle'>{text.otherAlgorithmsTitle}</option>\r\n                    <option value='reverseArray'>Reverse Array</option>\r\n                </select>\r\n                \r\n                    <div className='sliderBox'>\r\n                        <p className={animationActive ? 'disabled' : ''}>{`${text.numberOfBarsSlider} (${numBars})`}</p>\r\n                        <input className='clickable' disabled={animationActive} type=\"range\" min=\"5\" max={`${Math.round(window.innerWidth / 12) - 10}`} value={numBars} onChange={e => {\r\n                            AnimateEngine([\"resetArray\",parseInt(e.target.value)])\r\n                        }}></input>\r\n                    </div>\r\n                    \r\n                    \r\n\r\n                <p title={`${text.swapsDisplay} ${swaps} \\n${text.comparisonsDisplay} ${comparisons}`} className='timeTaken'>{`${text.runtimeDisplay} ${runTime}ms`}</p>\r\n                \r\n            </nav>\r\n            <InfoCard algorithmType='sorting' algorithmID={activeAlgorithm}/>\r\n\r\n            <Console display={isTerminalOpen} docsKey='AnimateEngineBars-clearLoop' AnimateEngine={AnimateEngine}/>\r\n \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualiser",["142","143"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\bubbleSort.ts",["144","145"],"function sort(array: number[]): [number[],object[],number]{\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        \r\n        for (let j = 0; j < sortedArray.length - 1 - i; j++){\r\n            animations.push([\"setColor\", [j,j+1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] > sortedArray[j+1]){\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j+1]\r\n                sortedArray[j+1] = tmp \r\n                animations.push([\"swap\",j,j+1])\r\n                swaps++\r\n            }\r\n            animations.push([\"setColor\",[j,j+1],\"$BASE\"])\r\n        }\r\n        animations.push([\"setColor\",[sortedArray.length - 1 - i],\"$DONE\"])\r\n    }\r\n\r\n   \r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [0], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n\r\n}\r\n\r\nfunction bubbleSort(array: number[]): any{\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return (command)\r\n}\r\n\r\n\r\nexport default bubbleSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\selectionSort.ts",["146","147"],"const COLORS = {\r\n    CURRENT_MIN: '#3e09ba',\r\n}\r\n\r\n\r\nfunction sort(array: number[]) {\r\n    const startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations: object[] = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n\r\n    for (let i = 0; i < sortedArray.length - 1; i++){\r\n        let minValIdx = i\r\n        for (let j = i + 1; j < sortedArray.length; j++){\r\n            animations.push([\"setColor\", [j], \"$CHECKING\"])\r\n            comparisons++\r\n            if (array[j] < array[minValIdx]){\r\n                animations.push([\"setColor\", [minValIdx], \"$BASE\"])\r\n                minValIdx = j\r\n                animations.push([\"setColor\", [j], COLORS.CURRENT_MIN])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j+1], \"$BASE\"])\r\n            }  \r\n\r\n                      \r\n        }\r\n        swaps++\r\n        let tmp = array[i]\r\n        array[i] = array[minValIdx]\r\n        array[minValIdx] = tmp\r\n        animations.push([\"swap\", i, minValIdx])\r\n        animations.push([\"setColor\", [i], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [-1], \"$DONE\"])\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction selectionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default selectionSort;","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\insertionSort.ts",["148","149"],"\r\n\r\n\r\n\r\nfunction sort(array: number[]){\r\n    let startTime = performance.now()\r\n    let sortedArray: number[] = array\r\n    let animations = []\r\n    let swaps = 0\r\n    let comparisons = 0\r\n\r\n    for (let i = 0; i < sortedArray.length; i++){\r\n        for (let j = i; j > 0; j--){\r\n            animations.push([\"setColor\", [j,j-1], \"$CHECKING\"])\r\n            comparisons++\r\n            if (sortedArray[j] < sortedArray[j-1]) {\r\n                const tmp = sortedArray[j]\r\n                sortedArray[j] = sortedArray[j-1]\r\n                sortedArray[j-1] = tmp\r\n                swaps++\r\n                animations.push([\"swap\", j, j-1])\r\n            } else {\r\n                animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n                break;\r\n            }\r\n            animations.push([\"setColor\", [j,j-1], \"$BASE\"])\r\n        }\r\n    }\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", comparisons])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    return [sortedArray, animations, runTime]\r\n}\r\n\r\nfunction insertionSort(array: number[]){\r\n    let [sortedArray, animations, runTime] = sort(array)\r\n\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default insertionSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\InfoCard\\index.jsx",["150"],"import React, { useState } from 'react'\r\nimport './style.css'\r\n//import data from '../../data/algorithmInfo.json'\r\n\r\nimport getLocaleText from '../../util/getLocaleText'\r\nconst text = getLocaleText('general').infoCard\r\nconst data = getLocaleText('algorithmInfo')\r\n\r\n\r\nfunction InfoCard({algorithmType, algorithmID}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isOpenHover, setIsOpenHover] = useState(false)\r\n    \r\n\r\n    let title = 'No Information Available'\r\n    let avgTimeComplexity = ''\r\n    let worstTimeComplexity = ''\r\n    let bestTimeComplexity  = ''\r\n    let memoryComplexity = ''\r\n    let stable = ''\r\n    let descriptionArray = []\r\n    let creditText = ''\r\n    let credit = ''\r\n\r\n    if (data[algorithmType][algorithmID]){\r\n        title = data[algorithmType][algorithmID].title || 'Unknown'\r\n        avgTimeComplexity = data[algorithmType][algorithmID].avgTimeComplexity || 'Unknown'\r\n        worstTimeComplexity = data[algorithmType][algorithmID].worstTimeComplexity || 'Unknown'\r\n        bestTimeComplexity = data[algorithmType][algorithmID].bestTimeComplexity || 'Unknown'\r\n        memoryComplexity = data[algorithmType][algorithmID].memoryComplexity || 'Unknown'\r\n        stable = data[algorithmType][algorithmID].stable || 'Unknown'\r\n        descriptionArray = data[algorithmType][algorithmID].description.split('\\n')\r\n        creditText = data[algorithmType][algorithmID].creditText || 'Description From'\r\n        credit = data[algorithmType][algorithmID].credit\r\n    }\r\n    \r\n\r\n    let card = (<div className='card scrollable-bright' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/>\r\n                    <p className='title'>{title}</p>\r\n                    <hr></hr>\r\n                    <p className='meta'>{`${text.worstCaseTimeMeta} ${worstTimeComplexity}`}</p>\r\n                    <p className='meta'>{`${text.avgTimeMeta} ${avgTimeComplexity}`}</p>\r\n                    <p className='meta'>{`${text.bestCaseTimeMeta} ${bestTimeComplexity}`}</p>\r\n                    <p className='meta'>{`${text.memoryMeta} ${memoryComplexity}`}</p>\r\n                    <p className='meta'>{`${text.stableMeta} ${stable} `}<i className={'material-icons help'} title={text.stableMetaDesc}>help</i></p>\r\n                    <hr></hr>\r\n                    {descriptionArray.map((item,idx) => <p className='description'>{item}</p>)}\r\n                    {credit ? <a className='credit' href={credit} >{`${creditText}: ${credit}`}</a> : null}     \r\n                </div>)\r\n    return (\r\n            <div className='card-container' /*onMouseOver={() => setIsOpenHover(true)} onMouseLeave={() => setIsOpenHover(false)}*/ >\r\n                {isOpen || isOpenHover ? card : null}\r\n                <button onClick={() => setIsOpen(!isOpen)} className='openCardButton' >\r\n                {isOpen ? <i className=\"material-icons clickable dark\">close</i> : <i className=\"material-icons clickable dark\">info</i> }\r\n                </button>  \r\n            </div>\r\n            )\r\n\r\n    }\r\n\r\nexport default InfoCard","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\quickSort.ts",["151"],"function sort(array: any, animations: any): any {\r\n \r\n\r\n\r\n}\r\n\r\nfunction quickSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n\r\n\r\n    let sortedArray = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default quickSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\heapSort.ts",["152"],"// FROM: https://levelup.gitconnected.com/heapsort-for-javascript-newbies-598d25477d55\r\n//TODO: Improve Animations\r\n\r\n\r\nfunction swap(array: number[], idx1: number, idx2: number, animations: object[]){\r\n    let tmp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = tmp\r\n    animations.push([\"swap\", idx1, idx2])\r\n}\r\n\r\n\r\nfunction heapify(array: number[], length: number, idx: number, animations: object[], data: any){\r\n    let largest:number = idx\r\n    let left:number = idx * 2 + 1\r\n    let right:number = left + 1\r\n\r\n    animations.push([\"setColor\", [left,right], \"$CHECKING\"])\r\n    data.comparisons++\r\n    if(left < length && array[left] > array[largest]) {\r\n        largest = left\r\n    }\r\n    data.comparisons++\r\n    if(right < length && array[right] > array[largest]){\r\n        largest = right\r\n    }\r\n\r\n    animations.push([\"setColor\", [left,right], \"$BASE\"])\r\n\r\n    if(largest !== idx){\r\n        data.swaps++\r\n        swap(array, idx, largest, animations)\r\n        heapify(array, length, largest, animations, data)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction sort(array: number[], animations: object[], data: any){\r\n    let length = array.length\r\n    let idx = Math.floor(length / 2 - 1)\r\n    let k = length - 1;\r\n\r\n    while (idx >= 0) {\r\n        heapify(array, length, idx, animations, data)\r\n        idx--\r\n    }\r\n\r\n    while(k >= 0){\r\n        data.swaps++\r\n        swap(array, 0, k, animations)\r\n        heapify(array, k, 0, animations, data)\r\n        //animations.push({command: 'setColor',id: [k],color: '$DONE'})\r\n        k--\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n\r\n\r\nfunction heapSort(array: number[]){\r\n    let startTime = performance.now()\r\n    var animations: object[] = [];\r\n    var data = {\r\n        swaps: 0,\r\n        comparisons: 0\r\n    }\r\n    let sortedArray = sort(array, animations,data)\r\n\r\n    let endTime = performance.now()\r\n\r\n    animations.push([\"setColor\", [\"$ALL\"], \"$DONE\"])\r\n\r\n    let runTime = endTime - startTime\r\n\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", data.comparisons])\r\n    endAni.push([\"setSwapsDisplay\", data.swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\nexport default heapSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\mergeSort.ts",["153"],"function mergeArrays(leftArray: any, rightArray: any, animations: any){\r\n    let leftIndex = 0 , rightIndex = 0\r\n\r\n    console.log(leftArray)\r\n\r\n    while(leftIndex < leftArray.length && rightIndex < rightArray.length){\r\n        animations.push({command: 'swap',id1: rightArray[rightIndex][0], id2: rightArray[rightIndex][0]})\r\n        let tmp = leftArray[leftIndex]\r\n        leftArray[leftIndex] = rightArray[rightIndex]\r\n        rightArray[rightIndex] = tmp\r\n        if (leftArray[leftIndex][1] < rightArray[rightIndex][1]){\r\n            leftIndex++\r\n        } else {\r\n            rightIndex++\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return \r\n}\r\n\r\n\r\n\r\nfunction sort(array: any, animations: any): any {\r\n    if (array.length <= 1) return array\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n\r\n    const left = array.slice(0,middle);\r\n    const right = array.slice(middle);\r\n\r\n    return mergeArrays(sort(left,animations), sort(right,animations),animations)\r\n\r\n}\r\n\r\n\r\nfunction createIndexedArray(array: number[]){\r\n    let indexedArray = []\r\n    for (let i = 0; i < array.length - 1; i++){\r\n        indexedArray.push([i,array[i]])\r\n    }\r\n\r\n    return indexedArray\r\n}\r\n\r\nfunction mergeSort(array: number[]): [object[],number]{\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n\r\n    let indexedArray: number[][] = createIndexedArray(array)\r\n\r\n\r\n    sortedArray = sort(indexedArray,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    //animations = [{command: 'setArray',array: sortedArray}]\r\n\r\n    console.log(animations)\r\n    return [animations, runTime]\r\n}\r\n\r\n\r\nexport default mergeSort","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Menu\\index.jsx",["154"],"import React, { useEffect, useState } from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport './style.css'\r\nimport vars from '../../data/vars.json'\r\n\r\nimport getLocaleText from '../../util/getLocaleText'\r\nconst text = getLocaleText('general').menu\r\n\r\n\r\nfunction Menu(props){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    function handleScroll(){\r\n        setIsOpen(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        document.addEventListener('scroll',handleScroll)\r\n\r\n        return () => {\r\n            document.removeEventListener('scroll', handleScroll)\r\n        }\r\n    }, [])\r\n    \r\n    return (\r\n        <div>\r\n        {/* {<div className='hoverToOpen' onMouseEnter={() => {console.log(true)}}></div> */}\r\n        {isOpen ? <div className='background-layer' onScroll={() => {setIsOpen(false)}} onClick = {() => {setIsOpen(false)}}></div> : null}\r\n        <div className={isOpen ? 'menuCard': 'menuCard closed'} /*onMouseEnter={() => {setIsOpen(true)}} onMouseLeave={() => {setIsOpen(false)}}*/>\r\n            \r\n            <br />\r\n            <br />\r\n            <button onClick={() => setIsOpen(!isOpen)} className='openMenuButton' >\r\n                <i className=\"material-icons clickable dark\">{isOpen ? 'menu_open' : 'menu' }</i>\r\n            </button>\r\n            {isOpen ? [<NavLink exact className='link clickable homeButton' activeClassName='current' to='/'><span title={text.home}><i className=\"material-icons item\">home</i></span></NavLink>,\r\n                       <NavLink className='link clickable' activeClassName='current' to='/bars'><span title={text.bars}><i className=\"material-icons item\">bar_chart</i></span></NavLink>,\r\n                       <NavLink className='link clickable' activeClassName='current' to='/grid'><span title={text.grid}><i className=\"material-icons item\">window</i></span></NavLink>,\r\n                       <NavLink className='link clickable unavailable' activeClassName='current' to='/logic'><span title={text.logic}><i className=\"material-icons item\">device_hub</i></span></NavLink>,\r\n                       <NavLink className='link clickable unavailable' activeClassName='current' to='/learn'><span title={text.learn}><i className=\"material-icons item\">class</i></span></NavLink>, \r\n                       <NavLink className='link clickable unavailable'  activeClassName='current' to='/puzzles'><span title={text.challenges}><i className=\"material-icons item\">extension</i></span></NavLink>] \r\n                       : null}\r\n\r\n            {isOpen && props.isLoggedIn ? <NavLink className='link unavailable' activeClassName='current' to='/settings'><span title={text.settings}><i className=\"material-icons item\">settings</i></span></NavLink> : null}\r\n            {isOpen && !props.isLoggedIn ? <NavLink className='link unavailable' activeClassName='current' to='/login'><span className='login' title={text.login}>{text.login}</span></NavLink> : null}\r\n\r\n            \r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\HomePage.jsx",["155","156"],"import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Container from '../components/ChangeLog/Container'\r\nimport Item from '../components/ChangeLog/Item'\r\nimport './HomePageStyle.css'\r\nimport icon from '../images/icon.png'\r\n\r\n\r\nimport getLocaleText from '../util/getLocaleText'\r\nconst text = getLocaleText('general').changelog\r\nconst changeLogData = getLocaleText('changeLog')\r\n\r\nfunction HomePage(){\r\n    const [isAllOpen, setIsAllOpen] = useState(false)\r\n    const [isNewestFirst, setIsNewestFirst] = useState(true)\r\n    console.log(isAllOpen)\r\n\r\n    let changeLogItems = changeLogData.slice()\r\n    if (isNewestFirst) changeLogItems = changeLogItems.reverse()\r\n\r\n    let changeItems = changeLogItems.map((value, idx) => {\r\n        let dontDisplay = value.dontDisplay\r\n        let displayAfter = value.displayAfter\r\n        if (displayAfter) {\r\n            const [day, month, year] = displayAfter.split('/')\r\n            displayAfter = `${year}-${month}-${day}`\r\n            \r\n        }\r\n        let date = new Date().getTime()\r\n        let afterDate = Date.parse(displayAfter)\r\n        let timeUntil = afterDate - date\r\n        if ((!dontDisplay && !displayAfter) || (timeUntil <= 0)) return <Item key={idx}  isOpen={isAllOpen} changes={value.modifications} date={value.isNext ? `${text.plannedForDate} ${value.date}` : value.date} version={value.isNext ? text.nextUpdateVersionKey : value.version} title={value.title}> <p>{value.info}</p> </Item>\r\n    })\r\n\r\n\r\n    console.log(getLocaleText('general'))\r\n\r\n    return (\r\n        <div className='changeLog'>\r\n            <div className='changeLogMenuItems'>\r\n                <div className='openAllChangesButton clickable' onClick={() => setIsAllOpen(!isAllOpen)}>{isAllOpen ? text.closeAllButton : text.openAllButton}</div>\r\n                <img className='homepage-img' src={icon} alt='AlgoV' width='100' height='50'/>\r\n                <div className='openAllChangesButton clickable' onClick={() => setIsNewestFirst(!isNewestFirst)}>{isNewestFirst ? text.orderOldestToNewestButton : text.orderNewestToOldestButton}</div>\r\n            </div>\r\n            <Container titleBgColor='' titleTxtColor='' infoBgColor='' infoTxtColor=''>\r\n                {changeItems}\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HomePage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\algoithms\\sorting\\reverseArray.ts",["157"],"\r\nfunction sort(array: any, animations: any): any {\r\n    let sortedArray = array.slice()\r\n    let swaps = 0\r\n\r\n    for (let i = 0; i < Math.floor(sortedArray.length / 2); i++){\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$CHECKING\"])\r\n        let tmp = sortedArray[i]\r\n        sortedArray[i] = sortedArray[sortedArray.length-1-i]\r\n        sortedArray[sortedArray.length-1-i] = tmp\r\n        swaps++\r\n        animations.push([\"swap\", i, (sortedArray.length-1-i)])\r\n        animations.push([\"setColor\", [i,(sortedArray.length-1-i)], \"$DONE\"])\r\n    }\r\n\r\n    animations.push([\"setColor\", [(Math.ceil(sortedArray.length / 2)) - 1], \"$DONE\"])\r\n\r\n    return [sortedArray, animations, swaps]\r\n\r\n\r\n}\r\n\r\nfunction reverseArray(array: number[]){\r\n    const startTime = performance.now()\r\n    let animations: object[] = []\r\n    let sortedArray: number[];\r\n    let swaps:number\r\n\r\n\r\n    [sortedArray, animations, swaps] = sort(array,animations)\r\n\r\n\r\n    const endTime = performance.now()\r\n    const runTime = endTime - startTime\r\n\r\n    animations.push([\"endAnimation\"])\r\n\r\n    let endAni = []\r\n    endAni.push([\"setRuntimeDisplay\", Math.round(runTime * 1000) / 1000])\r\n    endAni.push([\"setComparisonsDisplay\", 0])\r\n    endAni.push([\"setSwapsDisplay\", swaps])\r\n    endAni.push([\"startAnimation\"])\r\n\r\n\r\n    animations.unshift([\"doSim\", endAni])\r\n    let command = [\"do\", animations, \"$userSet\"]\r\n    return command\r\n}\r\n\r\n\r\nexport default reverseArray","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\index.jsx",["158","159"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Item.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\ChangeLog\\Container.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\Console\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\PathfindingVisualiser\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\components\\LatestChangesCard\\index.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\App.jsx",["160","161","162"],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\UnavailablePage.jsx",["163"],"import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport './UnavailablePageStyle.css'\r\nfunction InDevPage(props){\r\n    let history = useHistory()\r\n    console.log(history)\r\n    return (\r\n        <div className='inDevPage'>\r\n            <div className='InDevDiv'>\r\n                <i className=\"material-icons no-icon\">not_interested</i>\r\n                <h1 className='inDevPageh1'>{`${history.location.pathname} is unavailable`}</h1>\r\n                <p className='inDevPagep'>This page does not exist or is under maintenance. Check back again later.</p>\r\n                <Link to='/'><span className='inDevGoHomeLink'>Go Home</span></Link>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InDevPage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\GridPage.jsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\BarsPage.tsx",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\pages\\DocsPage\\index.jsx",["164"],"import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport './style.css'\r\nimport icon from '../../images/icon.png'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nimport getLocaleText from '../../util/getLocaleText'\r\nconst docData = getLocaleText('docs')\r\n    \r\n\r\nfunction DocsPage(){\r\n\r\n    let firstItem = \"General-Introduction\"\r\n    let firstOpenTabs = [\"General\"]\r\n    let urlItem = useLocation() .search.replace('?','')\r\n    if (urlItem){ \r\n        firstItem = urlItem\r\n        firstOpenTabs.push(urlItem.split('-')[0])\r\n    }\r\n    const [openItem, setOpenItem] = useState(firstItem)\r\n    const [openTabs, setOpenTabs] = useState(firstOpenTabs)\r\n    const [search, setSearch] = useState('')\r\n\r\n    let itemKey = openItem.split('-')\r\n    let data = docData[itemKey[0]].pages[itemKey[1]]\r\n\r\n\r\n    function createRows(){\r\n        let table = []\r\n    \r\n        for (let i = 0; i < data.arguments.length; i++){\r\n            let arg = data.arguments[i]\r\n            let argRow = []\r\n            argRow.push(<td>{arg[0]}</td>)\r\n            argRow.push(<td>{arg[1]}</td>)\r\n            argRow.push(<td>{arg[2]}</td>)\r\n            argRow.push(<td>{arg[3]}</td>)\r\n    \r\n            table.push(<tr>{argRow}</tr>)\r\n        }\r\n    \r\n        return table\r\n    }\r\n\r\n\r\n    function createSideBar(){\r\n        let sections = Object.values(docData)\r\n        let sideBarHTML = sections.map((value, index) => {\r\n            let pages = Object.values(value.pages)\r\n            let items = pages.map((pageObj) => {\r\n                let activeItemKey = openItem.split('-')\r\n                let classes = \"docsPage-sideBarItem clickable\"\r\n                if (value.id === activeItemKey[0] && pageObj.id === activeItemKey[1]) classes += \" docsPage-sideBarItem-selected\"\r\n                if (search[0] === '?' && !pageObj.sideTitle.toLowerCase().includes(`${search.substring(1).toLowerCase()}`)) classes += \" docsPage-sideBarItem-hidden\"\r\n                if (search[0] !== '?' && !pageObj.sideTitle.toLowerCase().startsWith(`${search.toLowerCase()}`)) classes += \" docsPage-sideBarItem-hidden\"\r\n                return (<div onClick={() => {\r\n                    setOpenItem(`${value.id}-${pageObj.id}`)\r\n                }} className={classes}>{pageObj.sideTitle}</div>)\r\n            })\r\n            return (\r\n                <>\r\n                <div className= 'docsPage-sidebar-section'>\r\n                    <div onClick={() => {\r\n                        if (openTabs.includes(value.id)){\r\n                            setOpenTabs((prevState) => {\r\n                                let curOpenTabs = prevState.slice()\r\n                                curOpenTabs.splice(curOpenTabs.indexOf(value.id))\r\n                                return curOpenTabs\r\n                            })\r\n                        } else {\r\n                            setOpenTabs((prevState) => {\r\n                                let curOpenTabs = prevState.slice()\r\n                                curOpenTabs.push(value.id)\r\n                                return curOpenTabs\r\n                            })\r\n                        }\r\n                    }}className=\"docsPage-sideBarTitle clickable\">{value.name}</div>\r\n                    {openTabs.includes(value.id) || search !== '' ? items : null}\r\n                </div>\r\n                </>\r\n            )\r\n        })\r\n\r\n        return [sideBarHTML]\r\n    }\r\n\r\n\r\n\r\n    function createTable(){\r\n        return (\r\n            <table className='arguments'>\r\n                <tr>\r\n                    <th>Argument</th>\r\n                    <th>Type</th>\r\n                    <th>Examples</th>\r\n                    <th>Notes</th>\r\n                </tr>\r\n                {createRows()}\r\n            </table>\r\n        )\r\n    }\r\n    return (\r\n        <div className='docsPage-container'>\r\n            <div className='docsPage-titleBar'><Link to='/'><img className='docspage-img' src={icon} alt='AlgoV' width='80' height='40'/></Link> Docs</div>\r\n            <div className='docsPage-searchBox'>Test</div>\r\n            <div className='docsPage-mainContent'>\r\n                <div className='docsPage-mainContent-container'>\r\n                    <h1 className='docsPage-mainContent-h1'>{data.title}</h1>\r\n                    <hr />\r\n                    <p className='docsPage-mainContent-description'>{data.desc}</p>\r\n                    <br />\r\n                    {data.syntaxHTML ? <p className='docsPage-mainContent-example-title docsPage-mainContent-example-container'>Syntax: <span className='docsPage-mainContent-example' >{data.syntaxHTML}</span></p>: null}\r\n                    {data.exampleHTML ? <p className='docsPage-mainContent-example-container'><span className='docsPage-mainContent-example-title'>Example: </span><span className='docsPage-mainContent-example'>{data.exampleHTML}</span></p>: null}\r\n                    {data.arguments ? createTable(): null}\r\n                </div>\r\n                \r\n            </div>\r\n            <div className='docsPage-sideBar'>\r\n                <div className= 'docsPage-sidebar-container'>\r\n                    <div className= 'docsPage-sidebar-section'>\r\n                        <input className='docsPage-sidebar-search' placeholder='Search:' onChange={(e) => {\r\n                            setSearch(e.target.value)\r\n                        }}/>\r\n                    </div>\r\n                    {[createSideBar()]}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocsPage","C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\util\\getLocaleText.js",[],"C:\\Users\\jackg\\Documents\\Projects\\WebDevelopement\\Algori\\algori\\src\\data\\locales\\en\\docs.js",["165"],"const data = {\r\n\tGeneral: {\r\n\t\tid: 'General',\r\n\t\tname: 'General',\r\n\t\tpages: {\r\n\t\t\tIntroduction: {\r\n\t\t\t\tid: 'Introduction',\r\n\t\t\t\tsideTitle: 'Introduction',\r\n\t\t\t\ttitle: 'General   -   Introduction',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'Welcome To AlgoV Docs. Click On The Sections To The Left to see the relevant pages. When using search normally items are compared with your search based on its first characters. However if you preface your search with a ? it will look for your search anywhere in the page titles',\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tAnimateEngineBars: {\r\n\t\tid: 'AnimateEngineBars',\r\n\t\tname: 'AnimateEngine (Bars)',\r\n\t\tpages: {\r\n\t\t\tclearLoop: {\r\n\t\t\t\tid: 'clearLoop',\r\n\t\t\t\tsideTitle: 'clearLoop',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   clearLoop',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'WARNING: NOT FUNCTIONAL clearLoop is used to stop loops (intervals).',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearLoop'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Loop ID?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearLoop'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Loop ID',\r\n\t\t\t\t\t\t'Optional Number - ID of Specific Loop',\r\n\t\t\t\t\t\t'1',\r\n\t\t\t\t\t\t'Leaving Loop ID will clear all',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tclearTimers: {\r\n\t\t\t\tid: 'clearTimers',\r\n\t\t\t\tsideTitle: 'clearTimers',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   clearTimers',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'WARNING: NOT FUNCTIONAL clearTimers is used to stop delays (timeouts) and loops (intervals).',\r\n\t\t\t\talias: 'ct',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearTimers'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearTimers'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tclearWait: {\r\n\t\t\t\tid: 'clearWait',\r\n\t\t\t\tsideTitle: 'clearWait',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   clearWait',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'WARNING: NOT FUNCTIONAL clearWait is used to stop delays (timeouts).',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearWait'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Wait ID?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearWait'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Wait ID',\r\n\t\t\t\t\t\t'Optional Number - ID of Specific Wait',\r\n\t\t\t\t\t\t'1',\r\n\t\t\t\t\t\t'Leaving Wait ID will clear all',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdefaultColor: {\r\n\t\t\t\tid: 'defaultColor',\r\n\t\t\t\tsideTitle: 'defaultColor',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   defaultColor',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'defaultColor is used to change the default colors used by algorithms in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'defaultColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Variable Name</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Color</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'defaultColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>'BASE'</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>'red'</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Varaible Name',\r\n\t\t\t\t\t\t'String',\r\n\t\t\t\t\t\t\"'BASE'\",\r\n\t\t\t\t\t\t'Standard Variables: BASE, CHECKING, DONE',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Color', 'CSS Color Value', '\"red\"', ['None']],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdo: {\r\n\t\t\t\tid: 'do',\r\n\t\t\t\tsideTitle: 'do',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   do',\r\n\t\t\t\tdesc: 'do is used to run multiple commands every given interval.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'do'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Interval</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'do'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>1000</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Interval',\r\n\t\t\t\t\t\t'Number in m/s',\r\n\t\t\t\t\t\t'1000',\r\n\t\t\t\t\t\t['Interval of 0 performs all commands simulteneously'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdoFor: {\r\n\t\t\t\tid: 'doFor',\r\n\t\t\t\tsideTitle: 'doFor',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   doFor',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'doFor is used to run multiple commands simulteneously for a given number of time every given interval.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doFor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Number Of Repeats</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>Interval</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doFor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>2</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>1000</span>]{' '}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Repeats', 'Number', '2', ['Number of 0 runs infinitely ']],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Interval',\r\n\t\t\t\t\t\t'Number in m/s',\r\n\t\t\t\t\t\t'1000',\r\n\t\t\t\t\t\t['Interval of 0 performs all commands simulteneously'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdoIn: {\r\n\t\t\t\tid: 'doIn',\r\n\t\t\t\tsideTitle: 'doIn',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   doIn',\r\n\t\t\t\tdesc: 'doIn is used to run multiple commands after given time.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doIn'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Wait Time</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doIn'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>1000</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Wait Time', 'Number in m/s', '1000', ['None']],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdoSim: {\r\n\t\t\t\tid: 'doSim',\r\n\t\t\t\tsideTitle: 'doSim',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   doSim',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'doSim is an abstracted command based on do used to run multiple commands simulteneously.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doSim'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>]]]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doSim'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>]]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tendAnimation: {\r\n\t\t\t\tid: 'endAnimation',\r\n\t\t\t\tsideTitle: 'endAnimation',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   endAnimation',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'endAnimation is used to \"stop an animation\" and reallow user input in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'endAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'endAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\texecuteInternalAnimation: {\r\n\t\t\t\tid: 'executeInternalAnimation',\r\n\t\t\t\tsideTitle: 'executeInternalAnimation',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   executeInternalAnimation',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'executeInternalAnimation is used to run a default animation in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'executeInternalAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Animation Code</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'executeInternalAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>\"heapSort\"</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Animation Code',\r\n\t\t\t\t\t\t'String',\r\n\t\t\t\t\t\t'heapSort',\r\n\t\t\t\t\t\t'Algorithm Codes: bubbleSort, selectionSort, insertionSort, heapSort etc.',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\treload: {\r\n\t\t\t\tid: 'reload',\r\n\t\t\t\tsideTitle: 'reload',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   reload',\r\n\t\t\t\tdesc: 'reload is used to reload the page.',\r\n\t\t\t\talias: 'r',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'reload'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'reload'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tresetArray: {\r\n\t\t\t\tid: 'resetArray',\r\n\t\t\t\tsideTitle: 'resetArray',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   resetArray',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'resetArray is an abstracted command based on setArray used to reset the bars in the Bar Visualiser to a random set of value.',\r\n\t\t\t\talias: 'ra',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'resetArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Number of bars?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'resetArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>32</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Number of Bars',\r\n\t\t\t\t\t\t'Optional number',\r\n\t\t\t\t\t\t'32',\r\n\t\t\t\t\t\t'Leaving Number of Bars Out will reset array to number of bars set by the user',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetArray: {\r\n\t\t\t\tid: 'setArray',\r\n\t\t\t\tsideTitle: 'setArray',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setArray',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setArray is used to change the entire array to the given values in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Values]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Color</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[1,2,18,22,55,16]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>'red'</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Values',\r\n\t\t\t\t\t\t'Array with numbers',\r\n\t\t\t\t\t\t'[1,2,18,22,55,16]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Color',\r\n\t\t\t\t\t\t'CSS Color Value OR Color Variable',\r\n\t\t\t\t\t\t'\"red\" / \"$CHECKING\"',\r\n\t\t\t\t\t\t['Available Color Varaibles: $BASE, $CHECKING, $DONE'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetColor: {\r\n\t\t\t\tid: 'setColor',\r\n\t\t\t\tsideTitle: 'setColor',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setColor',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setColor is an abstracted command based on setState used to change the color of bars in the Bar Visualiser.',\r\n\t\t\t\talias: 'sc',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Indexes]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Color</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[1,2,-1,'$MID']</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>'red'</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Indexes',\r\n\t\t\t\t\t\t'Array with numbers or Index Variables',\r\n\t\t\t\t\t\t'[1,2,-1,\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last bar. Available Index Variables: $ALL, $LHALF, $RHALF, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Data',\r\n\t\t\t\t\t\t'CSS Color Value OR Color Variable',\r\n\t\t\t\t\t\t'\"red\" / \"$CHECKING\"',\r\n\t\t\t\t\t\t['Available Color Varaibles: $BASE, $CHECKING, $DONE'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetComparisonsDisplay: {\r\n\t\t\t\tid: 'setComparisonsDisplay',\r\n\t\t\t\tsideTitle: 'setComparisonsDisplay',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setComparisonsDisplay',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setComparisonsDisplay is use to set the comparisons display in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setComparisonsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Comparisons</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setComparisonsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>100</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [['Comparisons', 'Number', '100', 'None']],\r\n\t\t\t},\r\n\t\t\tsetRuntimeDisplay: {\r\n\t\t\t\tid: 'setRuntimeDisplay',\r\n\t\t\t\tsideTitle: 'setRuntimeDisplay',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setRuntimeDisplay',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setRuntimeDisplay is use to set the runtime display in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setRuntimeDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Runtime</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setRuntimeDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [['Runtime', 'Number', '1', 'None']],\r\n\t\t\t},\r\n\t\t\tsetState: {\r\n\t\t\t\tid: 'setState',\r\n\t\t\t\tsideTitle: 'setState',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setState',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setState is used to manipulate the state of bars in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setState'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Indexes]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>\r\n\t\t\t\t\t\t\tType of data (value/color)\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t, <span style={{ color: 'gold' }}>Data</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setState'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[1,2,-1,'$MID']</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>'color'</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>'red'</span>]{' '}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Indexes',\r\n\t\t\t\t\t\t'Array with numbers or Index Variables',\r\n\t\t\t\t\t\t'[1,2,-1,\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last bar. Available Index Variables: $ALL, $LHALF, $RHALF, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Type of data', 'String (Value / Color)', '\"color\"', ['None']],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Data',\r\n\t\t\t\t\t\t'(Color) CSS Color Value OR Color Variable / (Value) Number',\r\n\t\t\t\t\t\t'\"red\" / \"$CHECKING\" / 10',\r\n\t\t\t\t\t\t['Available Color Varaibles: $BASE, $CHECKING, $DONE'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetSwapsDisplay: {\r\n\t\t\t\tid: 'setSwapsDisplay',\r\n\t\t\t\tsideTitle: 'setSwapsDisplay',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setSwapsDisplay',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setSwapsDisplay is use to set the swaps display in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setSwapsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Swaps</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setSwapsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>100</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [['Swaps', 'Number', '100', 'None']],\r\n\t\t\t},\r\n\t\t\tsetValue: {\r\n\t\t\t\tid: 'setValue',\r\n\t\t\t\tsideTitle: 'setValue',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   setValue',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setValue is an abstracted command based on setState used to change the value of bars in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setValue'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Indexes]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Value</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setValue'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[1,2,-1,'$MID']</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>32</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Indexes',\r\n\t\t\t\t\t\t'Array with numbers or Index Variables',\r\n\t\t\t\t\t\t'[1,2,-1,\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last bar. Available Index Variables: $ALL, $LHALF, $RHALF, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Value', 'Number', '32', 'None'],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tstartAnimation: {\r\n\t\t\t\tid: 'startAnimation',\r\n\t\t\t\tsideTitle: 'startAnimation',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   startAnimation',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'startAnimation is used to \"start an animation\" and block user input in the Bar Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'startAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'startAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tswap: {\r\n\t\t\t\tid: 'swap',\r\n\t\t\t\tsideTitle: 'swap',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   swap',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'swap is use to swap two bars in the Bar Visualiser. This swaps both the value and the color of the bars.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'swap'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Index 1</span>,\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Index 2</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'swap'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>,\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>-1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Index 1',\r\n\t\t\t\t\t\t'Number',\r\n\t\t\t\t\t\t'1',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last bar',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Index 2',\r\n\t\t\t\t\t\t'Number',\r\n\t\t\t\t\t\t'-1',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last bar',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tversion: {\r\n\t\t\t\tid: 'version',\r\n\t\t\t\tsideTitle: 'version',\r\n\t\t\t\ttitle: 'AnimateEngine (Bars)   -   version',\r\n\t\t\t\tdesc: 'version returns the current version of AlgoV.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'version'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'version'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tAnimateEngineGrid: {\r\n\t\tid: 'AnimateEngineGrid',\r\n\t\tname: 'AnimateEngine (Grid)',\r\n\t\tpages: {\r\n\t\t\tclearLoop: {\r\n\t\t\t\tid: 'clearLoop',\r\n\t\t\t\tsideTitle: 'clearLoop',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   clearLoop',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'WARNING: NOT FUNCTIONAL clearLoop is used to stop loops (intervals).',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearLoop'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Loop ID?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearLoop'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Loop ID',\r\n\t\t\t\t\t\t'Optional Number - ID of Specific Loop',\r\n\t\t\t\t\t\t'1',\r\n\t\t\t\t\t\t'Leaving Loop ID will clear all',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tclearTimers: {\r\n\t\t\t\tid: 'clearTimers',\r\n\t\t\t\tsideTitle: 'clearTimers',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   clearTimers',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'WARNING: NOT FUNCTIONAL clearTimers is used to stop delays (timeouts) and loops (intervals).',\r\n\t\t\t\talias: 'ct',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearTimers'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearTimers'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tclearWait: {\r\n\t\t\t\tid: 'clearWait',\r\n\t\t\t\tsideTitle: 'clearWait',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   clearWait',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'WARNING: NOT FUNCTIONAL clearWait is used to stop delays (timeouts).',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearWait'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Wait ID?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'clearWait'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Wait ID',\r\n\t\t\t\t\t\t'Optional Number - ID of Specific Wait',\r\n\t\t\t\t\t\t'1',\r\n\t\t\t\t\t\t'Leaving Wait ID will clear all',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdefaultColor: {\r\n\t\t\t\tid: 'defaultColor',\r\n\t\t\t\tsideTitle: 'defaultColor',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   defaultColor',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'defaultColor is used to change the default colors used by algorithms in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'defaultColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Variable Name</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Color</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'defaultColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>'BASE'</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>'red'</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Varaible Name',\r\n\t\t\t\t\t\t'String',\r\n\t\t\t\t\t\t\"'BASE'\",\r\n\t\t\t\t\t\t'Standard Variables: BASE, CHECKING, ROUTE, NEXT',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Color', 'CSS Color Value', '\"red\"', ['None']],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdo: {\r\n\t\t\t\tid: 'do',\r\n\t\t\t\tsideTitle: 'do',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   do',\r\n\t\t\t\tdesc: 'do is used to run multiple commands every given interval.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'do'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Interval</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'do'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>1000</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Interval',\r\n\t\t\t\t\t\t'Number in m/s',\r\n\t\t\t\t\t\t'1000',\r\n\t\t\t\t\t\t['Interval of 0 performs all commands simulteneously'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdoFor: {\r\n\t\t\t\tid: 'doFor',\r\n\t\t\t\tsideTitle: 'doFor',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   doFor',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'doFor is used to run multiple commands simulteneously for a given number of time every given interval.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doFor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Number Of Repeats</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>Interval</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doFor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>2</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>1000</span>]{' '}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Repeats', 'Number', '2', ['Number of 0 runs infinitely ']],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Interval',\r\n\t\t\t\t\t\t'Number in m/s',\r\n\t\t\t\t\t\t'1000',\r\n\t\t\t\t\t\t['Interval of 0 performs all commands simulteneously'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdoIn: {\r\n\t\t\t\tid: 'doIn',\r\n\t\t\t\tsideTitle: 'doIn',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   doIn',\r\n\t\t\t\tdesc: 'doIn is used to run multiple commands after given time.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doIn'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Wait Time</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doIn'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>],{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>1000</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Wait Time', 'Number in m/s', '1000', ['None']],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tdoSim: {\r\n\t\t\t\tid: 'doSim',\r\n\t\t\t\tsideTitle: 'doSim',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   doSim',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'doSim is an abstracted command based on do used to run multiple commands simulteneously.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doSim'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>Array of Commands</span>]]]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'doSim'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,[<span style={{ color: 'pink' }}>[\"setColor\",[0],\"red\"]</span>]]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Commands',\r\n\t\t\t\t\t\t'Array with AnimateEngine Commands',\r\n\t\t\t\t\t\t'[[\"setColor\",[0],\"red\"]]',\r\n\t\t\t\t\t\t'None',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tendAnimation: {\r\n\t\t\t\tid: 'endAnimation',\r\n\t\t\t\tsideTitle: 'endAnimation',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   endAnimation',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'endAnimation is used to \"stop an animation\" and reallow user input in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'endAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'endAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\texecuteInternalAnimation: {\r\n\t\t\t\tid: 'executeInternalAnimation',\r\n\t\t\t\tsideTitle: 'executeInternalAnimation',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   executeInternalAnimation',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'executeInternalAnimation is used to run a default animation in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'executeInternalAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Animation Code</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'executeInternalAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>\"pathfind-a*\"</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t['Animation Code', 'String', 'pathfind-a*', 'Algorithm Codes: TBD'],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\treload: {\r\n\t\t\t\tid: 'reload',\r\n\t\t\t\tsideTitle: 'reload',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   reload',\r\n\t\t\t\tdesc: 'reload is used to reload the page.',\r\n\t\t\t\talias: 'r',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'reload'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'reload'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tresetArray: {\r\n\t\t\t\tid: 'resetArray',\r\n\t\t\t\tsideTitle: 'resetArray',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   resetArray',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'resetArray is an abstracted command based on setArray used to reset the grid in the Grid Visualiser to nothing.',\r\n\t\t\t\talias: 'ra',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'resetArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Number of Nodes?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'resetArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>32</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Number of Nodes',\r\n\t\t\t\t\t\t'Optional number',\r\n\t\t\t\t\t\t'32',\r\n\t\t\t\t\t\t'Leaving Number of nodes Out will reset array to number of nodes set by the user',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetArray: {\r\n\t\t\t\tid: 'setArray',\r\n\t\t\t\tsideTitle: 'setArray',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setArray',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setArray is used to change the entire array to the given values in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Nodes]</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setArray'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,\r\n\t\t\t\t\t\t<span style={{ color: 'pink' }}>\r\n\t\t\t\t\t\t\t[{`{color: 'red', type: 'open', tr: 32, tl: 12, br: '', bl: ''}`}]\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Nodes',\r\n\t\t\t\t\t\t'Array with objects',\r\n\t\t\t\t\t\t\"{color: 'red', type: 'open', tr: 32, tl: 12, br: '', bl: '', onHover: ''}\",\r\n\t\t\t\t\t\t'Node Data: color - Color of square, type - Type of Square (eg. WALL, START, END, WEIGHT<1> etc, tl,tr,br,bl,onHover - Text of related locations eg. Top Left ',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetColor: {\r\n\t\t\t\tid: 'setColor',\r\n\t\t\t\tsideTitle: 'setColor',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setColor',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setColor is an abstracted command based on setState used to change the color of Nodes in the Grid Visualiser.',\r\n\t\t\t\talias: 'sc',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Coords]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Color</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setColor'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[[0,1],[1,2],[3,-1],'$MID']</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>'red'</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Indexes',\r\n\t\t\t\t\t\t'Array with numbers or Index Variables',\r\n\t\t\t\t\t\t'[[0,1],[1,2],[3,-1],\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last node on the respective axis. Available Index Variables: $ALL, $TLQUAD, $TRQUAD, $BLQUAD, $BRQUAD, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Color',\r\n\t\t\t\t\t\t'CSS Color Value OR Color Variable',\r\n\t\t\t\t\t\t'\"red\" / \"$CHECKING\"',\r\n\t\t\t\t\t\t['Available Color Varaibles: $BASE, $CHECKING, $ROUTE, $NEXT'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetComparisonsDisplay: {\r\n\t\t\t\tid: 'setComparisonsDisplay',\r\n\t\t\t\tsideTitle: 'setComparisonsDisplay',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setComparisonsDisplay',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setComparisonsDisplay is use to set the comparisons display in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setComparisonsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Comparisons</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setComparisonsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>100</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [['Comparisons', 'Number', '100', 'None']],\r\n\t\t\t},\r\n\t\t\tsetRuntimeDisplay: {\r\n\t\t\t\tid: 'setRuntimeDisplay',\r\n\t\t\t\tsideTitle: 'setRuntimeDisplay',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setRuntimeDisplay',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setRuntimeDisplay is use to set the runtime display in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setRuntimeDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Runtime</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setRuntimeDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>1</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [['Runtime', 'Number', '1', 'None']],\r\n\t\t\t},\r\n\t\t\tsetState: {\r\n\t\t\t\tid: 'setState',\r\n\t\t\t\tsideTitle: 'setState',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setState',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setState is used to manipulate the state of Nodes in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setState'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Coords]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>\r\n\t\t\t\t\t\t\tType of data (color/type/tr/tl/br/bl/onHover)\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t, <span style={{ color: 'gold' }}>Data</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setState'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[[0,1],[0,2],[-5,-1],'$MID']</span>\r\n\t\t\t\t\t\t, <span style={{ color: 'turquoise' }}>'color'</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>'red'</span>]{' '}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Indexes',\r\n\t\t\t\t\t\t'Array with numbers or Index Variables',\r\n\t\t\t\t\t\t'[1,2,-1,\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last node on the respective axis. Available Index Variables: $ALL, $TLQUAD, $TRQUAD, $BLQUAD, $BRQUAD, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Type of data', 'String (Value / Color)', '\"color\"', ['None']],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Data',\r\n\t\t\t\t\t\t'(Color) CSS Color Value OR Color Variable / (Type) String / (tr,tl,br,bl,onHover) String',\r\n\t\t\t\t\t\t'\"red\" / \"$CHECKING\" / 10',\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t'Available Color Varaibles: $BASE, $CHECKING, $ROUTE, $NEXT. Available Types: WALL, START, END, WEIGHT<1> etc.',\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetSwapsDisplay: {\r\n\t\t\t\tid: 'setSwapsDisplay',\r\n\t\t\t\tsideTitle: 'setSwapsDisplay',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setSwapsDisplay',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setSwapsDisplay is use to set the swaps display in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setSwapsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>Swaps</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setSwapsDisplay'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>100</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [['Swaps', 'Number', '100', 'None']],\r\n\t\t\t},\r\n\t\t\tsetText: {\r\n\t\t\t\tid: 'setText',\r\n\t\t\t\tsideTitle: 'setText',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setText',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setText is used to manipulate the text of Nodes in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setText'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Coords]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>\r\n\t\t\t\t\t\t\tText Position (tr/tl/br/bl/onHover)\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t, <span style={{ color: 'gold' }}>Value</span>,\r\n\t\t\t\t\t\t<span style={{ color: 'green' }}>Color?</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setText'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[[0,1],[0,2],[-5,-1],'$MID']</span>\r\n\t\t\t\t\t\t, <span style={{ color: 'turquoise' }}>'tl'</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'gold' }}>10</span>,\r\n\t\t\t\t\t\t<span style={{ color: 'green' }}>'red'</span>]{' '}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Coords',\r\n\t\t\t\t\t\t'Array with numbers or Index Variables',\r\n\t\t\t\t\t\t'[[0,1],[0,2],[-5,-1],\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last node on the respective axis. Available Index Variables: $ALL, $TLQUAD, $TRQUAD, $BLQUAD, $BRQUAD, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t['Text Position', 'String (tr/tl/br/bl/onHover)', '\"tl\"', ['None']],\r\n\t\t\t\t\t['Value', 'String', '10', [,]],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Color',\r\n\t\t\t\t\t\t'Optional String',\r\n\t\t\t\t\t\t'\"red\"',\r\n\t\t\t\t\t\t['Available Color Varaibles: $BASE, $CHECKING, $ROUTE, $NEXT.'],\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tsetType: {\r\n\t\t\t\tid: 'setType',\r\n\t\t\t\tsideTitle: 'setType',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   setType',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'setType is an abstracted command based on setState used to change the type of Nodes in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setValue'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[Array of Coords]</span>,{' '}\r\n\t\t\t\t\t\t<span style={{ color: 'turquoise' }}>Type</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'setValue'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t,<span style={{ color: 'pink' }}>[[0,1],[0,2],[-8,-1],\"$MID\"]</span>\r\n\t\t\t\t\t\t, <span style={{ color: 'turquoise' }}>\"WALL\"</span>]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\targuments: [\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Array of Coords',\r\n\t\t\t\t\t\t'Array with Coords or Index Variables',\r\n\t\t\t\t\t\t'[[0,1],[0,2],[-8,-1],\"$MID\"]',\r\n\t\t\t\t\t\t'Negative Numbers reference from the last node on the respective axis. Available Index Variables: $ALL, $TLQUAD, $TRQUAD, $BLQUAD, $BRQUAD, $MID, $ODD, $EVEN',\r\n\t\t\t\t\t],\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'Type',\r\n\t\t\t\t\t\t'String',\r\n\t\t\t\t\t\t'\"WALL\"',\r\n\t\t\t\t\t\t'Available Types: WALL, START, END, WEIGHT<1>',\r\n\t\t\t\t\t],\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tstartAnimation: {\r\n\t\t\t\tid: 'startAnimation',\r\n\t\t\t\tsideTitle: 'startAnimation',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   startAnimation',\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t'startAnimation is used to \"start an animation\" and block user input in the Grid Visualiser.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'startAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'startAnimation'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t\tversion: {\r\n\t\t\t\tid: 'version',\r\n\t\t\t\tsideTitle: 'version',\r\n\t\t\t\ttitle: 'AnimateEngine (Grid)   -   version',\r\n\t\t\t\tdesc: 'version returns the current version of AlgoV.',\r\n\t\t\t\tsyntaxHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'version'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t\texampleHTML: (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t<span className='docsPage-mainContent-exampleStyle-command'>\r\n\t\t\t\t\t\t\t'version'\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t</span>\r\n\t\t\t\t),\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n};\r\n\r\nexport default data;\r\n",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":34,"column":41,"nodeType":"172","messageId":"173","endLine":34,"endColumn":43},{"ruleId":"174","severity":1,"message":"175","line":65,"column":8,"nodeType":"176","endLine":65,"endColumn":10,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":73,"column":17,"nodeType":"180","messageId":"181","endLine":73,"endColumn":25},{"ruleId":"170","severity":1,"message":"171","line":156,"column":29,"nodeType":"172","messageId":"173","endLine":156,"endColumn":31},{"ruleId":"170","severity":1,"message":"171","line":157,"column":29,"nodeType":"172","messageId":"173","endLine":157,"endColumn":31},{"ruleId":"182","severity":1,"message":"183","line":213,"column":35,"nodeType":"184","messageId":"185","endLine":213,"endColumn":37},{"ruleId":"170","severity":1,"message":"186","line":213,"column":47,"nodeType":"172","messageId":"173","endLine":213,"endColumn":49},{"ruleId":"182","severity":1,"message":"183","line":213,"column":52,"nodeType":"184","messageId":"185","endLine":213,"endColumn":54},{"ruleId":"182","severity":1,"message":"187","line":213,"column":52,"nodeType":"184","messageId":"185","endLine":213,"endColumn":54},{"ruleId":"182","severity":1,"message":"187","line":213,"column":84,"nodeType":"184","messageId":"185","endLine":213,"endColumn":86},{"ruleId":"170","severity":1,"message":"186","line":213,"column":96,"nodeType":"172","messageId":"173","endLine":213,"endColumn":98},{"ruleId":"170","severity":1,"message":"171","line":214,"column":34,"nodeType":"172","messageId":"173","endLine":214,"endColumn":36},{"ruleId":"170","severity":1,"message":"171","line":216,"column":34,"nodeType":"172","messageId":"173","endLine":216,"endColumn":36},{"ruleId":"182","severity":1,"message":"183","line":253,"column":34,"nodeType":"184","messageId":"185","endLine":253,"endColumn":36},{"ruleId":"182","severity":1,"message":"183","line":253,"column":51,"nodeType":"184","messageId":"185","endLine":253,"endColumn":53},{"ruleId":"182","severity":1,"message":"183","line":254,"column":46,"nodeType":"184","messageId":"185","endLine":254,"endColumn":48},{"ruleId":"182","severity":1,"message":"183","line":254,"column":75,"nodeType":"184","messageId":"185","endLine":254,"endColumn":77},{"ruleId":"170","severity":1,"message":"171","line":350,"column":38,"nodeType":"172","messageId":"173","endLine":350,"endColumn":40},{"ruleId":"188","severity":1,"message":"189","line":405,"column":29,"nodeType":"190","messageId":"191","endLine":406,"endColumn":35},{"ruleId":"188","severity":1,"message":"189","line":412,"column":29,"nodeType":"190","messageId":"191","endLine":413,"endColumn":35},{"ruleId":"188","severity":1,"message":"189","line":419,"column":29,"nodeType":"192","messageId":"191","endLine":419,"endColumn":35},{"ruleId":"188","severity":1,"message":"189","line":439,"column":21,"nodeType":"192","messageId":"191","endLine":439,"endColumn":27},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"193","severity":1,"message":"194","line":45,"column":10,"nodeType":"180","messageId":"181","endLine":45,"endColumn":21},{"ruleId":"193","severity":1,"message":"195","line":45,"column":35,"nodeType":"180","messageId":"181","endLine":45,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":55,"column":10,"nodeType":"180","messageId":"181","endLine":55,"endColumn":21},{"ruleId":"193","severity":1,"message":"195","line":55,"column":35,"nodeType":"180","messageId":"181","endLine":55,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":48,"column":10,"nodeType":"180","messageId":"181","endLine":48,"endColumn":21},{"ruleId":"193","severity":1,"message":"195","line":48,"column":35,"nodeType":"180","messageId":"181","endLine":48,"endColumn":42},{"ruleId":"178","severity":1,"message":"196","line":12,"column":25,"nodeType":"180","messageId":"181","endLine":12,"endColumn":39},{"ruleId":"193","severity":1,"message":"194","line":12,"column":9,"nodeType":"180","messageId":"181","endLine":12,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":70,"column":9,"nodeType":"180","messageId":"181","endLine":70,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":55,"column":5,"nodeType":"180","messageId":"181","endLine":55,"endColumn":16},{"ruleId":"178","severity":1,"message":"197","line":4,"column":8,"nodeType":"180","messageId":"181","endLine":4,"endColumn":12},{"ruleId":"178","severity":1,"message":"198","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":18},{"ruleId":"199","severity":1,"message":"200","line":21,"column":55,"nodeType":"201","messageId":"202","endLine":21,"endColumn":57},{"ruleId":"193","severity":1,"message":"194","line":30,"column":6,"nodeType":"180","messageId":"181","endLine":30,"endColumn":17},{"ruleId":"178","severity":1,"message":"203","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":13},{"ruleId":"178","severity":1,"message":"204","line":1,"column":17,"nodeType":"180","messageId":"181","endLine":1,"endColumn":25},{"ruleId":"178","severity":1,"message":"205","line":7,"column":56,"nodeType":"180","messageId":"181","endLine":7,"endColumn":66},{"ruleId":"178","severity":1,"message":"206","line":25,"column":22,"nodeType":"180","messageId":"181","endLine":25,"endColumn":35},{"ruleId":"170","severity":1,"message":"171","line":29,"column":29,"nodeType":"172","messageId":"173","endLine":29,"endColumn":31},{"ruleId":"178","severity":1,"message":"204","line":1,"column":17,"nodeType":"180","messageId":"181","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"208","line":16,"column":19,"nodeType":"209","messageId":"210","endLine":16,"endColumn":40,"fix":"211"},{"ruleId":"212","severity":1,"message":"213","line":1392,"column":32,"nodeType":"176","messageId":"214","endLine":1392,"endColumn":35},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AnimateEngine' and 'numBars'. Either include them or remove the dependency array.","ArrayExpression",["217"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Expected '!==' and instead saw '!='.","Unexpected mix of '||' and '&&'.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","BreakStatement","@typescript-eslint/no-unused-vars","'sortedArray' is assigned a value but never used.","'runTime' is assigned a value but never used.","'setIsOpenHover' is assigned a value but never used.","'vars' is defined but never used.","'Redirect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'React' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","'setIsLoggedIn' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property search.","MemberExpression","unexpectedWhitespace",{"range":"218","text":"219"},"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},[435,437],".","Update the dependencies array to be: [AnimateEngine, numBars]",{"range":"222","text":"223"},[2609,2611],"[AnimateEngine, numBars]"]